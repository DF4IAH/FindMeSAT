
FindMeSAT_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000170  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000029f4  20000170  08006674  00020170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002b64  08006674  00022b64  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 10 .debug_info   000418d6  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000076f1  00000000  00000000  00061a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000152bf  00000000  00000000  00069167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ce0  00000000  00000000  0007e428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000020a8  00000000  00000000  00080108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010a7c  00000000  00000000  000821b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009f37  00000000  00000000  00092c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009cb63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005398  00000000  00000000  0009cbe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080063b0 	.word	0x080063b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	080063b0 	.word	0x080063b0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x20>)
{
 8000502:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	6813      	ldr	r3, [r2, #0]
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f825 	bl	800055c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f005 fafc 	bl	8005b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f005 faac 	bl	8005a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000524:	4a02      	ldr	r2, [pc, #8]	; (8000530 <HAL_IncTick+0xc>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200010c4 	.word	0x200010c4

08000534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <HAL_GetTick+0x8>)
 8000536:	6818      	ldr	r0, [r3, #0]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200010c4 	.word	0x200010c4

08000540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
 8000542:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000544:	f7ff fff6 	bl	8000534 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000548:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800054a:	4605      	mov	r5, r0
  {
    wait++;
 800054c:	bf18      	it	ne
 800054e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000550:	f7ff fff0 	bl	8000534 <HAL_GetTick>
 8000554:	1b40      	subs	r0, r0, r5
 8000556:	4284      	cmp	r4, r0
 8000558:	d8fa      	bhi.n	8000550 <HAL_Delay+0x10>
  {
  }
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}

0800055c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000560:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000564:	041b      	lsls	r3, r3, #16
 8000566:	0c1b      	lsrs	r3, r3, #16
 8000568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800056c:	0200      	lsls	r0, r0, #8
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000576:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000578:	60d3      	str	r3, [r2, #12]
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	68dc      	ldr	r4, [r3, #12]
 8000586:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf28      	it	cs
 8000594:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000598:	f04f 0501 	mov.w	r5, #1
 800059c:	fa05 f303 	lsl.w	r3, r5, r3
 80005a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a4:	bf8c      	ite	hi
 80005a6:	3c03      	subhi	r4, #3
 80005a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005aa:	4019      	ands	r1, r3
 80005ac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ae:	fa05 f404 	lsl.w	r4, r5, r4
 80005b2:	3c01      	subs	r4, #1
 80005b4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	ea42 0201 	orr.w	r2, r2, r1
 80005bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	bfaf      	iteee	ge
 80005c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	f000 000f 	andlt.w	r0, r0, #15
 80005ca:	4b06      	ldrlt	r3, [pc, #24]	; (80005e4 <HAL_NVIC_SetPriority+0x64>)
 80005cc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	bfa5      	ittet	ge
 80005d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00
 80005e4:	e000ed14 	.word	0xe000ed14

080005e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e8:	0942      	lsrs	r2, r0, #5
 80005ea:	2301      	movs	r3, #1
 80005ec:	f000 001f 	and.w	r0, r0, #31
 80005f0:	fa03 f000 	lsl.w	r0, r3, r0
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_NVIC_EnableIRQ+0x14>)
 80005f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005fa:	4770      	bx	lr
 80005fc:	e000e100 	.word	0xe000e100

08000600 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000600:	3801      	subs	r0, #1
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000606:	d20a      	bcs.n	800061e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	21f0      	movs	r1, #240	; 0xf0
 8000610:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800061e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e010 	.word	0xe000e010
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000630:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000632:	bf0c      	ite	eq
 8000634:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000638:	f022 0204 	bicne.w	r2, r2, #4
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	4770      	bx	lr
 8000640:	e000e010 	.word	0xe000e010

08000644 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000644:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000648:	2a02      	cmp	r2, #2
{
 800064a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800064c:	d003      	beq.n	8000656 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800064e:	2204      	movs	r2, #4
 8000650:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000652:	2001      	movs	r0, #1
 8000654:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000656:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000658:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800065a:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800065c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800065e:	f021 010e 	bic.w	r1, r1, #14
 8000662:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	f021 0101 	bic.w	r1, r1, #1
 800066a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800066c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000676:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000678:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800067c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000680:	b113      	cbz	r3, 8000688 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000682:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000684:	4620      	mov	r0, r4
 8000686:	bd10      	pop	{r4, pc}
 8000688:	4618      	mov	r0, r3
    }
  }
  return status;
}
 800068a:	bd10      	pop	{r4, pc}

0800068c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800068c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000690:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000694:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000838 <HAL_GPIO_Init+0x1ac>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000698:	4a65      	ldr	r2, [pc, #404]	; (8000830 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00;
 800069a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800069c:	fa38 f403 	lsrs.w	r4, r8, r3
 80006a0:	d102      	bne.n	80006a8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80006a2:	b003      	add	sp, #12
 80006a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006a8:	f04f 0e01 	mov.w	lr, #1
 80006ac:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80006b0:	ea18 060e 	ands.w	r6, r8, lr
 80006b4:	f000 80ab 	beq.w	800080e <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b8:	684c      	ldr	r4, [r1, #4]
 80006ba:	f024 0710 	bic.w	r7, r4, #16
 80006be:	2f02      	cmp	r7, #2
 80006c0:	d116      	bne.n	80006f0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80006c2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006c6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006ca:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80006ce:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006d2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006d6:	f04f 0c0f 	mov.w	ip, #15
 80006da:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006de:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006e2:	690d      	ldr	r5, [r1, #16]
 80006e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80006e8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006ec:	f8ca 5020 	str.w	r5, [sl, #32]
 80006f0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006f4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006f6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006fa:	fa05 f50a 	lsl.w	r5, r5, sl
 80006fe:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000700:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000704:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000708:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800070c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800070e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000712:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000714:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000718:	d811      	bhi.n	800073e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800071a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800071c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000720:	68cf      	ldr	r7, [r1, #12]
 8000722:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000726:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800072a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800072c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800072e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000732:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000736:	409f      	lsls	r7, r3
 8000738:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800073c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800073e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000740:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000742:	688f      	ldr	r7, [r1, #8]
 8000744:	fa07 f70a 	lsl.w	r7, r7, sl
 8000748:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800074a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074c:	00e5      	lsls	r5, r4, #3
 800074e:	d55e      	bpl.n	800080e <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000754:	f045 0501 	orr.w	r5, r5, #1
 8000758:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 800075c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000760:	f023 0703 	bic.w	r7, r3, #3
 8000764:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000768:	f005 0501 	and.w	r5, r5, #1
 800076c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000770:	9501      	str	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000772:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000778:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800077c:	f04f 0c0f 	mov.w	ip, #15
 8000780:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000784:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000788:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800078c:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000790:	d03f      	beq.n	8000812 <HAL_GPIO_Init+0x186>
 8000792:	4d28      	ldr	r5, [pc, #160]	; (8000834 <HAL_GPIO_Init+0x1a8>)
 8000794:	42a8      	cmp	r0, r5
 8000796:	d03e      	beq.n	8000816 <HAL_GPIO_Init+0x18a>
 8000798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079c:	42a8      	cmp	r0, r5
 800079e:	d03c      	beq.n	800081a <HAL_GPIO_Init+0x18e>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d03a      	beq.n	800081e <HAL_GPIO_Init+0x192>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d038      	beq.n	8000822 <HAL_GPIO_Init+0x196>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d036      	beq.n	8000826 <HAL_GPIO_Init+0x19a>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d034      	beq.n	800082a <HAL_GPIO_Init+0x19e>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	bf14      	ite	ne
 80007c8:	2508      	movne	r5, #8
 80007ca:	2507      	moveq	r5, #7
 80007cc:	fa05 f50e 	lsl.w	r5, r5, lr
 80007d0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80007d4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 80007d6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007d8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007de:	bf0c      	ite	eq
 80007e0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007e2:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80007e4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80007e6:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007f0:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80007f2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80007f4:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007fe:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8000800:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 8000802:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000804:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf54      	ite	pl
 8000808:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800080a:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 800080c:	60d5      	str	r5, [r2, #12]
    position++;
 800080e:	3301      	adds	r3, #1
 8000810:	e744      	b.n	800069c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000812:	2500      	movs	r5, #0
 8000814:	e7da      	b.n	80007cc <HAL_GPIO_Init+0x140>
 8000816:	2501      	movs	r5, #1
 8000818:	e7d8      	b.n	80007cc <HAL_GPIO_Init+0x140>
 800081a:	2502      	movs	r5, #2
 800081c:	e7d6      	b.n	80007cc <HAL_GPIO_Init+0x140>
 800081e:	2503      	movs	r5, #3
 8000820:	e7d4      	b.n	80007cc <HAL_GPIO_Init+0x140>
 8000822:	2504      	movs	r5, #4
 8000824:	e7d2      	b.n	80007cc <HAL_GPIO_Init+0x140>
 8000826:	2505      	movs	r5, #5
 8000828:	e7d0      	b.n	80007cc <HAL_GPIO_Init+0x140>
 800082a:	2506      	movs	r5, #6
 800082c:	e7ce      	b.n	80007cc <HAL_GPIO_Init+0x140>
 800082e:	bf00      	nop
 8000830:	40010400 	.word	0x40010400
 8000834:	48000400 	.word	0x48000400
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800083c:	b10a      	cbz	r2, 8000842 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800083e:	6181      	str	r1, [r0, #24]
 8000840:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000842:	6281      	str	r1, [r0, #40]	; 0x28
 8000844:	4770      	bx	lr

08000846 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000846:	6943      	ldr	r3, [r0, #20]
 8000848:	4059      	eors	r1, r3
 800084a:	6141      	str	r1, [r0, #20]
 800084c:	4770      	bx	lr

0800084e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800084e:	6803      	ldr	r3, [r0, #0]
 8000850:	699a      	ldr	r2, [r3, #24]
 8000852:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000854:	bf44      	itt	mi
 8000856:	2200      	movmi	r2, #0
 8000858:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800085a:	699a      	ldr	r2, [r3, #24]
 800085c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800085e:	bf5e      	ittt	pl
 8000860:	699a      	ldrpl	r2, [r3, #24]
 8000862:	f042 0201 	orrpl.w	r2, r2, #1
 8000866:	619a      	strpl	r2, [r3, #24]
 8000868:	4770      	bx	lr

0800086a <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800086a:	f011 0301 	ands.w	r3, r1, #1
 800086e:	d007      	beq.n	8000880 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000870:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000874:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000878:	2b28      	cmp	r3, #40	; 0x28
 800087a:	bf0c      	ite	eq
 800087c:	2342      	moveq	r3, #66	; 0x42
 800087e:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000880:	078a      	lsls	r2, r1, #30
 8000882:	d509      	bpl.n	8000898 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000884:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000888:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800088c:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800088e:	bf0c      	ite	eq
 8000890:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000894:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000898:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800089a:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800089e:	bf48      	it	mi
 80008a0:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80008a4:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80008a8:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80008aa:	bf08      	it	eq
 80008ac:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80008b0:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80008b2:	6801      	ldr	r1, [r0, #0]
 80008b4:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80008b6:	bf08      	it	eq
 80008b8:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80008bc:	ea22 0303 	bic.w	r3, r2, r3
 80008c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 80008c2:	2000      	movs	r0, #0
 80008c4:	4770      	bx	lr

080008c6 <HAL_I2C_Init>:
{
 80008c6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80008c8:	4604      	mov	r4, r0
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d04a      	beq.n	8000964 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80008ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80008d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008d6:	b91b      	cbnz	r3, 80008e0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80008d8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80008dc:	f004 fec2 	bl	8005664 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80008e0:	2324      	movs	r3, #36	; 0x24
 80008e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80008e6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008e8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f022 0201 	bic.w	r2, r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008f2:	6862      	ldr	r2, [r4, #4]
 80008f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80008f8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008fa:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008fc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000906:	d124      	bne.n	8000952 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800090c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800090e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000910:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000912:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800091a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000922:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000924:	6922      	ldr	r2, [r4, #16]
 8000926:	430a      	orrs	r2, r1
 8000928:	69a1      	ldr	r1, [r4, #24]
 800092a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800092e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000930:	6a21      	ldr	r1, [r4, #32]
 8000932:	69e2      	ldr	r2, [r4, #28]
 8000934:	430a      	orrs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f042 0201 	orr.w	r2, r2, #1
 800093e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000940:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000942:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000944:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000946:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800094a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800094c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000950:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000952:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000956:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000958:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800095a:	bf04      	itt	eq
 800095c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000960:	605a      	streq	r2, [r3, #4]
 8000962:	e7d4      	b.n	800090e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
}
 8000966:	bd10      	pop	{r4, pc}

08000968 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000968:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800096a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800096c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800096e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000970:	b103      	cbz	r3, 8000974 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000972:	4718      	bx	r3
 8000974:	4770      	bx	lr

08000976 <HAL_I2C_SlaveTxCpltCallback>:
 8000976:	4770      	bx	lr

08000978 <HAL_I2C_SlaveRxCpltCallback>:
 8000978:	4770      	bx	lr

0800097a <I2C_ITSlaveSequentialCplt>:
{
 800097a:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800097c:	2500      	movs	r5, #0
 800097e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000982:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000986:	2b29      	cmp	r3, #41	; 0x29
{
 8000988:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800098a:	d10d      	bne.n	80009a8 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800098c:	2328      	movs	r3, #40	; 0x28
 800098e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000992:	2321      	movs	r3, #33	; 0x21
 8000994:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000996:	2101      	movs	r1, #1
 8000998:	f7ff ff67 	bl	800086a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800099c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80009a0:	4620      	mov	r0, r4
 80009a2:	f7ff ffe8 	bl	8000976 <HAL_I2C_SlaveTxCpltCallback>
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80009a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009ac:	2b2a      	cmp	r3, #42	; 0x2a
 80009ae:	d10c      	bne.n	80009ca <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80009b0:	2328      	movs	r3, #40	; 0x28
 80009b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80009b6:	2322      	movs	r3, #34	; 0x22
 80009b8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80009ba:	2102      	movs	r1, #2
 80009bc:	f7ff ff55 	bl	800086a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80009c0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80009c4:	4620      	mov	r0, r4
 80009c6:	f7ff ffd7 	bl	8000978 <HAL_I2C_SlaveRxCpltCallback>
 80009ca:	bd38      	pop	{r3, r4, r5, pc}

080009cc <HAL_I2C_AddrCallback>:
{
 80009cc:	4770      	bx	lr

080009ce <HAL_I2C_ListenCpltCallback>:
 80009ce:	4770      	bx	lr

080009d0 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <I2C_ITListenCplt+0x5c>)
{
 80009d2:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 80009d4:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80009dc:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80009de:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009e2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80009e6:	074b      	lsls	r3, r1, #29
{
 80009e8:	4604      	mov	r4, r0
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80009ea:	d511      	bpl.n	8000a10 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80009ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	6242      	str	r2, [r0, #36]	; 0x24
 80009f2:	6802      	ldr	r2, [r0, #0]
 80009f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009f6:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80009f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80009fa:	b14b      	cbz	r3, 8000a10 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 80009fc:	3b01      	subs	r3, #1
 80009fe:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000a00:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000a02:	3b01      	subs	r3, #1
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000a08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000a10:	2107      	movs	r1, #7
 8000a12:	4620      	mov	r0, r4
 8000a14:	f7ff ff29 	bl	800086a <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000a24:	4620      	mov	r0, r4
 8000a26:	f7ff ffd2 	bl	80009ce <HAL_I2C_ListenCpltCallback>
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	ffff0000 	.word	0xffff0000

08000a30 <HAL_I2C_ErrorCallback>:
 8000a30:	4770      	bx	lr

08000a32 <HAL_I2C_AbortCpltCallback>:
{
 8000a32:	4770      	bx	lr

08000a34 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000a34:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000a36:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <I2C_ITError+0xd8>)
{
 8000a38:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000a3a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000a3e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000a40:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000a42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a44:	4319      	orrs	r1, r3
 8000a46:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000a48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a4c:	2b28      	cmp	r3, #40	; 0x28
{
 8000a4e:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000a50:	d007      	beq.n	8000a62 <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000a52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000a56:	2b29      	cmp	r3, #41	; 0x29
 8000a58:	d003      	beq.n	8000a62 <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000a5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8000a60:	d122      	bne.n	8000aa8 <I2C_ITError+0x74>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000a62:	2103      	movs	r1, #3
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff ff00 	bl	800086a <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000a6a:	2328      	movs	r3, #40	; 0x28
 8000a6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <I2C_ITError+0xdc>)
    hi2c->XferISR       = NULL;
 8000a76:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000a7c:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000a7e:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000a82:	d01e      	beq.n	8000ac2 <I2C_ITError+0x8e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000a88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000a8a:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <I2C_ITError+0xe0>)
 8000a8e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hi2c);
 8000a90:	2300      	movs	r3, #0
 8000a92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000a96:	f7ff fdd5 	bl	8000644 <HAL_DMA_Abort_IT>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d034      	beq.n	8000b08 <I2C_ITError+0xd4>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000a9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000aa0:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8000aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000aa6:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000aa8:	2107      	movs	r1, #7
 8000aaa:	f7ff fede 	bl	800086a <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000aae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ab2:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2320      	movne	r3, #32
 8000ab8:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	6323      	str	r3, [r4, #48]	; 0x30
 8000ac0:	e7d9      	b.n	8000a76 <I2C_ITError+0x42>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000ac2:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000ac6:	d00d      	beq.n	8000ae4 <I2C_ITError+0xb0>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000ac8:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000aca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ad0:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <I2C_ITError+0xe0>)
 8000ad4:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hi2c);
 8000ad6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000ada:	f7ff fdb3 	bl	8000644 <HAL_DMA_Abort_IT>
 8000ade:	b198      	cbz	r0, 8000b08 <I2C_ITError+0xd4>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ae0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000ae2:	e7dd      	b.n	8000aa0 <I2C_ITError+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000ae4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ae8:	2b60      	cmp	r3, #96	; 0x60
 8000aea:	d108      	bne.n	8000afe <I2C_ITError+0xca>
    hi2c->State = HAL_I2C_STATE_READY;
 8000aec:	2320      	movs	r3, #32
 8000aee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000af2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000af6:	4620      	mov	r0, r4
 8000af8:	f7ff ff9b 	bl	8000a32 <HAL_I2C_AbortCpltCallback>
 8000afc:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8000afe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff ff94 	bl	8000a30 <HAL_I2C_ErrorCallback>
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	bf00      	nop
 8000b0c:	ffff0000 	.word	0xffff0000
 8000b10:	08000c19 	.word	0x08000c19
 8000b14:	08000e2b 	.word	0x08000e2b

08000b18 <I2C_ITSlaveCplt>:
{
 8000b18:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b1a:	6803      	ldr	r3, [r0, #0]
 8000b1c:	2220      	movs	r2, #32
{
 8000b1e:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b20:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b22:	2208      	movs	r2, #8
 8000b24:	61da      	str	r2, [r3, #28]
{
 8000b26:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000b28:	2107      	movs	r1, #7
 8000b2a:	f7ff fe9e 	bl	800086a <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b36:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b3e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b42:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b46:	f022 0201 	bic.w	r2, r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f7ff fe7e 	bl	800084e <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000b52:	6822      	ldr	r2, [r4, #0]
 8000b54:	6813      	ldr	r3, [r2, #0]
 8000b56:	0458      	lsls	r0, r3, #17
 8000b58:	d402      	bmi.n	8000b60 <I2C_ITSlaveCplt+0x48>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8000b5a:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000b5c:	0419      	lsls	r1, r3, #16
 8000b5e:	d509      	bpl.n	8000b74 <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8000b60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000b64:	2b21      	cmp	r3, #33	; 0x21
 8000b66:	bf0c      	ite	eq
 8000b68:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8000b6a:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b11b      	cbz	r3, 8000b82 <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000b7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000b82:	076b      	lsls	r3, r5, #29
 8000b84:	d510      	bpl.n	8000ba8 <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b8a:	1c59      	adds	r1, r3, #1
 8000b8c:	6261      	str	r1, [r4, #36]	; 0x24
 8000b8e:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000b90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000b92:	b14b      	cbz	r3, 8000ba8 <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 8000b94:	3b01      	subs	r3, #1
 8000b96:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8000bb0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000bb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb4:	b16b      	cbz	r3, 8000bd2 <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000bb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f7ff ff3b 	bl	8000a34 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000bbe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000bc2:	2b28      	cmp	r3, #40	; 0x28
 8000bc4:	d124      	bne.n	8000c10 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8000bc6:	4629      	mov	r1, r5
 8000bc8:	4620      	mov	r0, r4
}
 8000bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8000bce:	f7ff beff 	b.w	80009d0 <I2C_ITListenCplt>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000bd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bd4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000bd8:	d00a      	beq.n	8000bf0 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <I2C_ITSlaveCplt+0xfc>)
 8000bdc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000bde:	2220      	movs	r2, #32
 8000be0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000be4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fef0 	bl	80009ce <HAL_I2C_ListenCpltCallback>
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000bf0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000bf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000bf8:	2a22      	cmp	r2, #34	; 0x22
 8000bfa:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000c02:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000c04:	d102      	bne.n	8000c0c <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000c06:	f7ff feb7 	bl	8000978 <HAL_I2C_SlaveRxCpltCallback>
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000c0c:	f7ff feb3 	bl	8000976 <HAL_I2C_SlaveTxCpltCallback>
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
 8000c12:	bf00      	nop
 8000c14:	ffff0000 	.word	0xffff0000

08000c18 <I2C_Slave_ISR_IT>:
{
 8000c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8000c1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c20:	2b01      	cmp	r3, #1
{
 8000c22:	4604      	mov	r4, r0
 8000c24:	460e      	mov	r6, r1
 8000c26:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8000c28:	f000 80cb 	beq.w	8000dc2 <I2C_Slave_ISR_IT+0x1aa>
 8000c2c:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000c2e:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8000c30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000c34:	d53e      	bpl.n	8000cb4 <I2C_Slave_ISR_IT+0x9c>
 8000c36:	06d0      	lsls	r0, r2, #27
 8000c38:	d53c      	bpl.n	8000cb4 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8000c3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	bb8b      	cbnz	r3, 8000ca4 <I2C_Slave_ISR_IT+0x8c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000c40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c46:	d003      	beq.n	8000c50 <I2C_Slave_ISR_IT+0x38>
 8000c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c4e:	d114      	bne.n	8000c7a <I2C_Slave_ISR_IT+0x62>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8000c50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000c54:	2b28      	cmp	r3, #40	; 0x28
 8000c56:	d110      	bne.n	8000c7a <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 8000c58:	4631      	mov	r1, r6
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff feb8 	bl	80009d0 <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8000c60:	06b2      	lsls	r2, r6, #26
 8000c62:	d505      	bpl.n	8000c70 <I2C_Slave_ISR_IT+0x58>
 8000c64:	06bb      	lsls	r3, r7, #26
 8000c66:	d503      	bpl.n	8000c70 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8000c68:	4631      	mov	r1, r6
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ff54 	bl	8000b18 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8000c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	d00c      	beq.n	8000c9e <I2C_Slave_ISR_IT+0x86>
 8000c84:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8000c88:	2a29      	cmp	r2, #41	; 0x29
 8000c8a:	d108      	bne.n	8000c9e <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff fddc 	bl	800084e <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff fe6f 	bl	800097a <I2C_ITSlaveSequentialCplt>
 8000c9c:	e7e0      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	61da      	str	r2, [r3, #28]
 8000ca2:	e7dd      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ca4:	6823      	ldr	r3, [r4, #0]
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6463      	str	r3, [r4, #68]	; 0x44
 8000cb2:	e7d5      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8000cb4:	0771      	lsls	r1, r6, #29
 8000cb6:	d51a      	bpl.n	8000cee <I2C_Slave_ISR_IT+0xd6>
 8000cb8:	077a      	lsls	r2, r7, #29
 8000cba:	d518      	bpl.n	8000cee <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8000cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b163      	cbz	r3, 8000cdc <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	6262      	str	r2, [r4, #36]	; 0x24
 8000cc8:	6822      	ldr	r2, [r4, #0]
 8000cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ccc:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000cce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000cd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8000cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1bd      	bne.n	8000c60 <I2C_Slave_ISR_IT+0x48>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8000ce4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8000ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000cea:	d1d4      	bne.n	8000c96 <I2C_Slave_ISR_IT+0x7e>
 8000cec:	e7b8      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8000cee:	0733      	lsls	r3, r6, #28
 8000cf0:	d546      	bpl.n	8000d80 <I2C_Slave_ISR_IT+0x168>
 8000cf2:	073d      	lsls	r5, r7, #28
 8000cf4:	d544      	bpl.n	8000d80 <I2C_Slave_ISR_IT+0x168>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8000cf6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000cfe:	2b28      	cmp	r3, #40	; 0x28
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	d137      	bne.n	8000d74 <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 8000d04:	699a      	ldr	r2, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d06:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000d08:	699d      	ldr	r5, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d0a:	2902      	cmp	r1, #2
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000d0c:	ea4f 4515 	mov.w	r5, r5, lsr #16
    transferdirection = I2C_GET_DIR(hi2c);
 8000d10:	f3c2 4800 	ubfx	r8, r2, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000d14:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000d18:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000d1a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d1e:	d120      	bne.n	8000d62 <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000d20:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000d24:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000d28:	f015 0506 	ands.w	r5, r5, #6
 8000d2c:	d10f      	bne.n	8000d4e <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 8000d2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d30:	3101      	adds	r1, #1
 8000d32:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000d34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d36:	2902      	cmp	r1, #2
 8000d38:	d192      	bne.n	8000c60 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d3a:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000d3c:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d3e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000d40:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d44:	4641      	mov	r1, r8
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fe40 	bl	80009cc <HAL_I2C_AddrCallback>
 8000d4c:	e788      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff fd8a 	bl	800086a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000d56:	2300      	movs	r3, #0
 8000d58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d5c:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 8000d60:	e7f0      	b.n	8000d44 <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000d62:	2104      	movs	r1, #4
 8000d64:	4620      	mov	r0, r4
 8000d66:	f7ff fd80 	bl	800086a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d70:	462a      	mov	r2, r5
 8000d72:	e7e7      	b.n	8000d44 <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d74:	2208      	movs	r2, #8
 8000d76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d7e:	e76f      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8000d80:	07b0      	lsls	r0, r6, #30
 8000d82:	f57f af6d 	bpl.w	8000c60 <I2C_Slave_ISR_IT+0x48>
 8000d86:	07b9      	lsls	r1, r7, #30
 8000d88:	f57f af6a 	bpl.w	8000c60 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8000d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b16b      	cbz	r3, 8000dae <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	6261      	str	r1, [r4, #36]	; 0x24
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000d9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000da0:	3b01      	subs	r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000da6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000da8:	3b01      	subs	r3, #1
 8000daa:	8523      	strh	r3, [r4, #40]	; 0x28
 8000dac:	e758      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8000dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	f43f af6f 	beq.w	8000c96 <I2C_Slave_ISR_IT+0x7e>
 8000db8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f43f af6b 	beq.w	8000c96 <I2C_Slave_ISR_IT+0x7e>
 8000dc0:	e74e      	b.n	8000c60 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8000dc2:	2002      	movs	r0, #2
}
 8000dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000dc8 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000dcc:	681a      	ldr	r2, [r3, #0]
{
 8000dce:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000dd0:	05cc      	lsls	r4, r1, #23
 8000dd2:	d508      	bpl.n	8000de6 <HAL_I2C_ER_IRQHandler+0x1e>
 8000dd4:	0614      	lsls	r4, r2, #24
 8000dd6:	d506      	bpl.n	8000de6 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000dd8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000dda:	f044 0401 	orr.w	r4, r4, #1
 8000dde:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000de0:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000de4:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000de6:	054c      	lsls	r4, r1, #21
 8000de8:	d508      	bpl.n	8000dfc <HAL_I2C_ER_IRQHandler+0x34>
 8000dea:	0614      	lsls	r4, r2, #24
 8000dec:	d506      	bpl.n	8000dfc <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000dee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000df0:	f044 0408 	orr.w	r4, r4, #8
 8000df4:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000df6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000dfa:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000dfc:	0589      	lsls	r1, r1, #22
 8000dfe:	d508      	bpl.n	8000e12 <HAL_I2C_ER_IRQHandler+0x4a>
 8000e00:	0612      	lsls	r2, r2, #24
 8000e02:	d506      	bpl.n	8000e12 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8000e04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000e06:	f042 0202 	orr.w	r2, r2, #2
 8000e0a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8000e12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e14:	f013 0f0b 	tst.w	r3, #11
 8000e18:	d004      	beq.n	8000e24 <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000e1a:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8000e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000e20:	f7ff be08 	b.w	8000a34 <I2C_ITError>
}
 8000e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e2a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e2c:	6802      	ldr	r2, [r0, #0]
{
 8000e2e:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e30:	6853      	ldr	r3, [r2, #4]
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e36:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8000e38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8000e3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000e40:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000e42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e46:	2b60      	cmp	r3, #96	; 0x60
 8000e48:	d105      	bne.n	8000e56 <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8000e50:	f7ff fdef 	bl	8000a32 <HAL_I2C_AbortCpltCallback>
 8000e54:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8000e56:	f7ff fdeb 	bl	8000a30 <HAL_I2C_ErrorCallback>
 8000e5a:	bd08      	pop	{r3, pc}

08000e5c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	2a20      	cmp	r2, #32
{
 8000e64:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e66:	d11d      	bne.n	8000ea4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d019      	beq.n	8000ea4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e70:	2324      	movs	r3, #36	; 0x24
 8000e72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e76:	6803      	ldr	r3, [r0, #0]
 8000e78:	681c      	ldr	r4, [r3, #0]
 8000e7a:	f024 0401 	bic.w	r4, r4, #1
 8000e7e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e80:	681c      	ldr	r4, [r3, #0]
 8000e82:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000e86:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e88:	681c      	ldr	r4, [r3, #0]
 8000e8a:	4321      	orrs	r1, r4
 8000e8c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	f041 0101 	orr.w	r1, r1, #1
 8000e94:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e96:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e98:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000ea4:	2002      	movs	r0, #2
  }
}
 8000ea6:	bd10      	pop	{r4, pc}

08000ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ea8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eaa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000eae:	b2e4      	uxtb	r4, r4
 8000eb0:	2c20      	cmp	r4, #32
 8000eb2:	d11c      	bne.n	8000eee <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d018      	beq.n	8000eee <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ebc:	2324      	movs	r3, #36	; 0x24
 8000ebe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ec2:	6803      	ldr	r3, [r0, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ecc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000ece:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ed2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ed6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ee0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ee2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ee6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000eee:	2002      	movs	r0, #2
  }
}
 8000ef0:	bd10      	pop	{r4, pc}

08000ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000ef6:	4604      	mov	r4, r0
{
 8000ef8:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d07c      	beq.n	8000ff8 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000efe:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8000f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f06:	b91b      	cbnz	r3, 8000f10 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f08:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f0c:	f004 fff4 	bl	8005ef8 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f10:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f12:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000f14:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f18:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8000f1c:	f002 fcf7 	bl	800390e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	466e      	mov	r6, sp
 8000f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2e:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f32:	f104 0804 	add.w	r8, r4, #4
 8000f36:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000f3a:	6820      	ldr	r0, [r4, #0]
 8000f3c:	f002 fccd 	bl	80038da <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000f40:	2100      	movs	r1, #0
 8000f42:	6820      	ldr	r0, [r4, #0]
 8000f44:	f002 fce9 	bl	800391a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6860      	ldr	r0, [r4, #4]
 8000f4c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8000f50:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000f54:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000f56:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000f58:	4282      	cmp	r2, r0
 8000f5a:	f103 031c 	add.w	r3, r3, #28
 8000f5e:	d13b      	bne.n	8000fd8 <HAL_PCD_Init+0xe6>
 8000f60:	2200      	movs	r2, #0
 8000f62:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000f64:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000f66:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8000f6e:	3201      	adds	r2, #1
 8000f70:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8000f72:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000f76:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8000f7a:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000f7e:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8000f82:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8000f86:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8000f8a:	d1ec      	bne.n	8000f66 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	466e      	mov	r6, sp
 8000f90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f9a:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f9e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	f002 fcd0 	bl	8003948 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8000fa8:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8000faa:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8000fae:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8000fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d102      	bne.n	8000fbe <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f000 fc5c 	bl	8001876 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8000fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d102      	bne.n	8000fca <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f000 fc69 	bl	800189c <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	f002 ff7b 	bl	8003ec6 <USB_DevDisconnect>
  return HAL_OK;
 8000fd0:	2000      	movs	r0, #0
}
 8000fd2:	b00a      	add	sp, #40	; 0x28
 8000fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8000fd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000fdc:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8000fe0:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000fe4:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8000fe8:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8000fec:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8000ff0:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	e7af      	b.n	8000f58 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	e7ea      	b.n	8000fd2 <HAL_PCD_Init+0xe0>

08000ffc <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000ffc:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8001000:	2b01      	cmp	r3, #1
{ 
 8001002:	b510      	push	{r4, lr}
 8001004:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001006:	d00c      	beq.n	8001022 <HAL_PCD_Start+0x26>
 8001008:	2301      	movs	r3, #1
 800100a:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 800100e:	6800      	ldr	r0, [r0, #0]
 8001010:	f002 ff4d 	bl	8003eae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001014:	6820      	ldr	r0, [r4, #0]
 8001016:	f002 fc74 	bl	8003902 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 800101a:	2000      	movs	r0, #0
 800101c:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8001020:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001022:	2002      	movs	r0, #2
}
 8001024:	bd10      	pop	{r4, pc}
	...

08001028 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800102c:	6807      	ldr	r7, [r0, #0]
{
 800102e:	b087      	sub	sp, #28
 8001030:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001032:	4638      	mov	r0, r7
 8001034:	f002 ff81 	bl	8003f3a <USB_GetMode>
 8001038:	9002      	str	r0, [sp, #8]
 800103a:	2800      	cmp	r0, #0
 800103c:	f040 8155 	bne.w	80012ea <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	f002 ff4c 	bl	8003ede <USB_ReadInterrupts>
 8001046:	2800      	cmp	r0, #0
 8001048:	f000 814f 	beq.w	80012ea <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800104c:	6820      	ldr	r0, [r4, #0]
 800104e:	f002 ff46 	bl	8003ede <USB_ReadInterrupts>
 8001052:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001054:	bf48      	it	mi
 8001056:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001058:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800105a:	bf42      	ittt	mi
 800105c:	6953      	ldrmi	r3, [r2, #20]
 800105e:	f003 0302 	andmi.w	r3, r3, #2
 8001062:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001064:	f002 ff3b 	bl	8003ede <USB_ReadInterrupts>
 8001068:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800106c:	d00c      	beq.n	8001088 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	f002 ff39 	bl	8003ee6 <USB_ReadDevAllOutEpInterrupt>
 8001074:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8001078:	4680      	mov	r8, r0
 800107a:	46a3      	mov	fp, r4
      
      while (ep_intr)
 800107c:	464e      	mov	r6, r9
      epnum = 0;
 800107e:	2500      	movs	r5, #0
      while (ep_intr)
 8001080:	f1b8 0f00 	cmp.w	r8, #0
 8001084:	f040 8134 	bne.w	80012f0 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	f002 ff28 	bl	8003ede <USB_ReadInterrupts>
 800108e:	0342      	lsls	r2, r0, #13
 8001090:	d50b      	bpl.n	80010aa <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001092:	6820      	ldr	r0, [r4, #0]
 8001094:	f002 ff2f 	bl	8003ef6 <USB_ReadDevAllInEpInterrupt>
 8001098:	4626      	mov	r6, r4
 800109a:	4683      	mov	fp, r0
 800109c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 80010a0:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80010a2:	f1bb 0f00 	cmp.w	fp, #0
 80010a6:	f040 81a1 	bne.w	80013ec <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f002 ff17 	bl	8003ede <USB_ReadInterrupts>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	da15      	bge.n	80010e0 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80010b4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 80010c0:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	f040 822c 	bne.w	8001522 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 80010ca:	2100      	movs	r1, #0
 80010cc:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80010d0:	4620      	mov	r0, r4
 80010d2:	f005 f887 	bl	80061e4 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	6953      	ldr	r3, [r2, #20]
 80010da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010de:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	f002 fefc 	bl	8003ede <USB_ReadInterrupts>
 80010e6:	0503      	lsls	r3, r0, #20
 80010e8:	d50b      	bpl.n	8001102 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80010ea:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80010ee:	07de      	lsls	r6, r3, #31
 80010f0:	d502      	bpl.n	80010f8 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f004 ff74 	bl	8005fe0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80010f8:	6822      	ldr	r2, [r4, #0]
 80010fa:	6953      	ldr	r3, [r2, #20]
 80010fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001100:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	f002 feeb 	bl	8003ede <USB_ReadInterrupts>
 8001108:	0100      	lsls	r0, r0, #4
 800110a:	d514      	bpl.n	8001136 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001114:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8001116:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800111a:	2a00      	cmp	r2, #0
 800111c:	f040 8205 	bne.w	800152a <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8001120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8001122:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8001124:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8001128:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 800112c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001130:	4620      	mov	r0, r4
 8001132:	f005 f857 	bl	80061e4 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001136:	6820      	ldr	r0, [r4, #0]
 8001138:	f002 fed1 	bl	8003ede <USB_ReadInterrupts>
 800113c:	04c1      	lsls	r1, r0, #19
 800113e:	d537      	bpl.n	80011b0 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001140:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8001144:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0x10);
 8001146:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0x10);
 800114e:	2110      	movs	r1, #16
 8001150:	f002 fc92 	bl	8003a78 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001154:	6861      	ldr	r1, [r4, #4]
 8001156:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800115a:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800115c:	9802      	ldr	r0, [sp, #8]
 800115e:	4288      	cmp	r0, r1
 8001160:	f040 81e7 	bne.w	8001532 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 800116a:	69f3      	ldr	r3, [r6, #28]
 800116c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001170:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001172:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 81e4 	beq.w	8001542 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800117a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800117e:	f043 030b 	orr.w	r3, r3, #11
 8001182:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001186:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001188:	f043 030b 	orr.w	r3, r3, #11
 800118c:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800118e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001192:	7c21      	ldrb	r1, [r4, #16]
 8001194:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001196:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800119a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800119e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80011a2:	f002 fee9 	bl	8003f78 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6953      	ldr	r3, [r2, #20]
 80011aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ae:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80011b0:	6820      	ldr	r0, [r4, #0]
 80011b2:	f002 fe94 	bl	8003ede <USB_ReadInterrupts>
 80011b6:	0482      	lsls	r2, r0, #18
 80011b8:	d520      	bpl.n	80011fc <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	f002 fec1 	bl	8003f42 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	68d3      	ldr	r3, [r2, #12]
 80011c4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80011c8:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80011ce:	2340      	movs	r3, #64	; 0x40
 80011d0:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80011d2:	f000 ff79 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_PCD_IRQHandler+0x3b8>)
 80011d8:	4a82      	ldr	r2, [pc, #520]	; (80013e4 <HAL_PCD_IRQHandler+0x3bc>)
 80011da:	4403      	add	r3, r0
 80011dc:	4293      	cmp	r3, r2
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f200 81b8 	bhi.w	8001554 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80011ea:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f004 feea 	bl	8005fc6 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6953      	ldr	r3, [r2, #20]
 80011f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011fa:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	f002 fe6e 	bl	8003ede <USB_ReadInterrupts>
 8001202:	06c3      	lsls	r3, r0, #27
 8001204:	d52b      	bpl.n	800125e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	6993      	ldr	r3, [r2, #24]
 800120a:	f023 0310 	bic.w	r3, r3, #16
 800120e:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8001210:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001212:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8001216:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001218:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800121c:	f040 81ea 	bne.w	80015f4 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8001220:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001224:	421e      	tst	r6, r3
 8001226:	d015      	beq.n	8001254 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8001228:	f04f 081c 	mov.w	r8, #28
 800122c:	fb08 4809 	mla	r8, r8, r9, r4
 8001230:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001234:	4632      	mov	r2, r6
 8001236:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 800123a:	4638      	mov	r0, r7
 800123c:	f002 fddf 	bl	8003dfe <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001240:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8001244:	4433      	add	r3, r6
 8001246:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800124a:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 800124e:	441e      	add	r6, r3
 8001250:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	6993      	ldr	r3, [r2, #24]
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	f002 fe3d 	bl	8003ede <USB_ReadInterrupts>
 8001264:	0707      	lsls	r7, r0, #28
 8001266:	d507      	bpl.n	8001278 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001268:	4620      	mov	r0, r4
 800126a:	f004 fea8 	bl	8005fbe <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	6953      	ldr	r3, [r2, #20]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	f002 fe30 	bl	8003ede <USB_ReadInterrupts>
 800127e:	02c6      	lsls	r6, r0, #11
 8001280:	d508      	bpl.n	8001294 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001282:	b2e9      	uxtb	r1, r5
 8001284:	4620      	mov	r0, r4
 8001286:	f004 fee1 	bl	800604c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	6953      	ldr	r3, [r2, #20]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001294:	6820      	ldr	r0, [r4, #0]
 8001296:	f002 fe22 	bl	8003ede <USB_ReadInterrupts>
 800129a:	0280      	lsls	r0, r0, #10
 800129c:	d508      	bpl.n	80012b0 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800129e:	b2e9      	uxtb	r1, r5
 80012a0:	4620      	mov	r0, r4
 80012a2:	f004 fecf 	bl	8006044 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	6953      	ldr	r3, [r2, #20]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80012b0:	6820      	ldr	r0, [r4, #0]
 80012b2:	f002 fe14 	bl	8003ede <USB_ReadInterrupts>
 80012b6:	0041      	lsls	r1, r0, #1
 80012b8:	d507      	bpl.n	80012ca <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f004 feca 	bl	8006054 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	6953      	ldr	r3, [r2, #20]
 80012c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012c8:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f002 fe07 	bl	8003ede <USB_ReadInterrupts>
 80012d0:	0742      	lsls	r2, r0, #29
 80012d2:	d50a      	bpl.n	80012ea <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80012d8:	076b      	lsls	r3, r5, #29
 80012da:	d502      	bpl.n	80012e2 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80012dc:	4620      	mov	r0, r4
 80012de:	f004 febd 	bl	800605c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4315      	orrs	r5, r2
 80012e8:	605d      	str	r5, [r3, #4]
    }
  }
}
 80012ea:	b007      	add	sp, #28
 80012ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 80012f0:	f018 0f01 	tst.w	r8, #1
 80012f4:	d049      	beq.n	800138a <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80012f6:	b2ea      	uxtb	r2, r5
 80012f8:	4611      	mov	r1, r2
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	9203      	str	r2, [sp, #12]
 80012fe:	f002 fe02 	bl	8003f06 <USB_ReadDevOutEPInterrupt>
          if (( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001302:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001306:	4682      	mov	sl, r0
          if (( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001308:	d032      	beq.n	8001370 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800130a:	2101      	movs	r1, #1
 800130c:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 800130e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_PCD_IRQHandler+0x3c0>)
 8001312:	9a03      	ldr	r2, [sp, #12]
 8001314:	4299      	cmp	r1, r3
 8001316:	d13f      	bne.n	8001398 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8001318:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	d41f      	bmi.n	8001360 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8001320:	6921      	ldr	r1, [r4, #16]
 8001322:	2901      	cmp	r1, #1
 8001324:	d10c      	bne.n	8001340 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001326:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8001328:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800132c:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8001330:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8001332:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8001336:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 800133a:	4408      	add	r0, r1
 800133c:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001340:	4611      	mov	r1, r2
 8001342:	4620      	mov	r0, r4
 8001344:	f004 fe2a 	bl	8005f9c <HAL_PCD_DataOutStageCallback>
                if (hpcd->Init.dma_enable == 1)
 8001348:	6921      	ldr	r1, [r4, #16]
 800134a:	2901      	cmp	r1, #1
 800134c:	d108      	bne.n	8001360 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 800134e:	b93d      	cbnz	r5, 8001360 <HAL_PCD_IRQHandler+0x338>
 8001350:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8001354:	b922      	cbnz	r2, 8001360 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001356:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	f002 fe0c 	bl	8003f78 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8001360:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001370:	f01a 0f08 	tst.w	sl, #8
 8001374:	d004      	beq.n	8001380 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8001376:	4620      	mov	r0, r4
 8001378:	f004 fe0a 	bl	8005f90 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800137c:	2308      	movs	r3, #8
 800137e:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001380:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001384:	bf1c      	itt	ne
 8001386:	2310      	movne	r3, #16
 8001388:	60b3      	strne	r3, [r6, #8]
        epnum++;
 800138a:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800138c:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8001390:	3620      	adds	r6, #32
 8001392:	f10b 0b1c 	add.w	fp, fp, #28
 8001396:	e673      	b.n	8001080 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8001398:	6921      	ldr	r1, [r4, #16]
 800139a:	2901      	cmp	r1, #1
 800139c:	d10c      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800139e:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 80013a0:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80013a4:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 80013a8:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 80013aa:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80013ae:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 80013b2:	4408      	add	r0, r1
 80013b4:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80013b8:	4611      	mov	r1, r2
 80013ba:	4620      	mov	r0, r4
 80013bc:	f004 fdee 	bl	8005f9c <HAL_PCD_DataOutStageCallback>
              if (hpcd->Init.dma_enable == 1)
 80013c0:	6921      	ldr	r1, [r4, #16]
 80013c2:	2901      	cmp	r1, #1
 80013c4:	d1d4      	bne.n	8001370 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d1d2      	bne.n	8001370 <HAL_PCD_IRQHandler+0x348>
 80013ca:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d1ce      	bne.n	8001370 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80013d2:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	f002 fdce 	bl	8003f78 <USB_EP0_OutStart>
 80013dc:	e7c8      	b.n	8001370 <HAL_PCD_IRQHandler+0x348>
 80013de:	bf00      	nop
 80013e0:	ff275340 	.word	0xff275340
 80013e4:	000c34ff 	.word	0x000c34ff
 80013e8:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 80013ec:	f01b 0f01 	tst.w	fp, #1
 80013f0:	d074      	beq.n	80014dc <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80013f2:	fa5f fa85 	uxtb.w	sl, r5
 80013f6:	4651      	mov	r1, sl
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f002 fd8e 	bl	8003f1a <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013fe:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001402:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001404:	d020      	beq.n	8001448 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001406:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 800140a:	2101      	movs	r1, #1
 800140c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800140e:	ea23 0301 	bic.w	r3, r3, r1
 8001412:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001416:	2301      	movs	r3, #1
 8001418:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 800141c:	6923      	ldr	r3, [r4, #16]
 800141e:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001420:	bf01      	itttt	eq
 8001422:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8001424:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8001426:	189b      	addeq	r3, r3, r2
 8001428:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800142a:	4651      	mov	r1, sl
 800142c:	4620      	mov	r0, r4
 800142e:	f004 fdbe 	bl	8005fae <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8001432:	6921      	ldr	r1, [r4, #16]
 8001434:	2901      	cmp	r1, #1
 8001436:	d107      	bne.n	8001448 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8001438:	b935      	cbnz	r5, 8001448 <HAL_PCD_IRQHandler+0x420>
 800143a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800143c:	b923      	cbnz	r3, 8001448 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800143e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f002 fd98 	bl	8003f78 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001448:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800144c:	bf1c      	itt	ne
 800144e:	2308      	movne	r3, #8
 8001450:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001454:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001458:	bf1c      	itt	ne
 800145a:	2310      	movne	r3, #16
 800145c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001460:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001464:	bf1c      	itt	ne
 8001466:	2340      	movne	r3, #64	; 0x40
 8001468:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800146c:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001470:	bf1c      	itt	ne
 8001472:	2302      	movne	r3, #2
 8001474:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001478:	f018 0f80 	tst.w	r8, #128	; 0x80
 800147c:	d02e      	beq.n	80014dc <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8001482:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001484:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001486:	eba3 0802 	sub.w	r8, r3, r2
 800148a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800148c:	4598      	cmp	r8, r3
 800148e:	bf28      	it	cs
 8001490:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8001492:	f108 0303 	add.w	r3, r8, #3
 8001496:	2204      	movs	r2, #4
 8001498:	fb93 f3f2 	sdiv	r3, r3, r2
 800149c:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800149e:	9b03      	ldr	r3, [sp, #12]
 80014a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80014a8:	9305      	str	r3, [sp, #20]
 80014aa:	9b05      	ldr	r3, [sp, #20]
 80014ac:	9a04      	ldr	r2, [sp, #16]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d904      	bls.n	80014c0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 80014b6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80014b8:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d900      	bls.n	80014c0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 80014be:	b9a3      	cbnz	r3, 80014ea <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 80014c0:	f1b8 0f00 	cmp.w	r8, #0
 80014c4:	dc0a      	bgt.n	80014dc <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014c6:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 80014c8:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014ca:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80014ce:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 80014d2:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d4:	ea23 0302 	bic.w	r3, r3, r2
 80014d8:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 80014dc:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80014de:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80014e2:	361c      	adds	r6, #28
 80014e4:	f109 0920 	add.w	r9, r9, #32
 80014e8:	e5db      	b.n	80010a2 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 80014ea:	eba3 0802 	sub.w	r8, r3, r2
 80014ee:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80014f0:	9803      	ldr	r0, [sp, #12]
 80014f2:	4598      	cmp	r8, r3
 80014f4:	bf28      	it	cs
 80014f6:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 80014f8:	2204      	movs	r2, #4
 80014fa:	f108 0303 	add.w	r3, r8, #3
 80014fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8001502:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001504:	7c23      	ldrb	r3, [r4, #16]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4652      	mov	r2, sl
 800150a:	fa1f f388 	uxth.w	r3, r8
 800150e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8001510:	f002 fc64 	bl	8003ddc <USB_WritePacket>
    ep->xfer_buff  += len;
 8001514:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8001516:	4443      	add	r3, r8
 8001518:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800151a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800151c:	4443      	add	r3, r8
 800151e:	6573      	str	r3, [r6, #84]	; 0x54
 8001520:	e7c3      	b.n	80014aa <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8001522:	4620      	mov	r0, r4
 8001524:	f004 fd74 	bl	8006010 <HAL_PCD_ResumeCallback>
 8001528:	e5d5      	b.n	80010d6 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 800152a:	4620      	mov	r0, r4
 800152c:	f004 fd58 	bl	8005fe0 <HAL_PCD_SuspendCallback>
 8001530:	e601      	b.n	8001136 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001532:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8001534:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001536:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8001538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800153c:	9002      	str	r0, [sp, #8]
 800153e:	3320      	adds	r3, #32
 8001540:	e60c      	b.n	800115c <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001542:	6973      	ldr	r3, [r6, #20]
 8001544:	f043 030b 	orr.w	r3, r3, #11
 8001548:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800154a:	6933      	ldr	r3, [r6, #16]
 800154c:	f043 030b 	orr.w	r3, r3, #11
 8001550:	6133      	str	r3, [r6, #16]
 8001552:	e61c      	b.n	800118e <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_PCD_IRQHandler+0x5ec>)
 8001556:	4930      	ldr	r1, [pc, #192]	; (8001618 <HAL_PCD_IRQHandler+0x5f0>)
 8001558:	4402      	add	r2, r0
 800155a:	428a      	cmp	r2, r1
 800155c:	d803      	bhi.n	8001566 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001564:	e641      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8001566:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800156a:	492c      	ldr	r1, [pc, #176]	; (800161c <HAL_PCD_IRQHandler+0x5f4>)
 800156c:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8001570:	428a      	cmp	r2, r1
 8001572:	d803      	bhi.n	800157c <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800157a:	e636      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 800157c:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8001580:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_PCD_IRQHandler+0x5f8>)
 8001582:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001586:	428a      	cmp	r2, r1
 8001588:	d803      	bhi.n	8001592 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001590:	e62b      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_PCD_IRQHandler+0x5fc>)
 8001594:	4924      	ldr	r1, [pc, #144]	; (8001628 <HAL_PCD_IRQHandler+0x600>)
 8001596:	4402      	add	r2, r0
 8001598:	428a      	cmp	r2, r1
 800159a:	d803      	bhi.n	80015a4 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80015a2:	e622      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_PCD_IRQHandler+0x604>)
 80015a6:	4922      	ldr	r1, [pc, #136]	; (8001630 <HAL_PCD_IRQHandler+0x608>)
 80015a8:	4402      	add	r2, r0
 80015aa:	428a      	cmp	r2, r1
 80015ac:	d803      	bhi.n	80015b6 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80015b4:	e619      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <HAL_PCD_IRQHandler+0x60c>)
 80015b8:	491f      	ldr	r1, [pc, #124]	; (8001638 <HAL_PCD_IRQHandler+0x610>)
 80015ba:	4402      	add	r2, r0
 80015bc:	428a      	cmp	r2, r1
 80015be:	d803      	bhi.n	80015c8 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80015c6:	e610      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 80015c8:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80015cc:	491b      	ldr	r1, [pc, #108]	; (800163c <HAL_PCD_IRQHandler+0x614>)
 80015ce:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d803      	bhi.n	80015de <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015dc:	e605      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <HAL_PCD_IRQHandler+0x618>)
 80015e0:	4918      	ldr	r1, [pc, #96]	; (8001644 <HAL_PCD_IRQHandler+0x61c>)
 80015e2:	4402      	add	r2, r0
 80015e4:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	bf94      	ite	ls
 80015ea:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80015ee:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80015f2:	e5fa      	b.n	80011ea <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	f47f ae2d 	bne.w	8001254 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80015fa:	2208      	movs	r2, #8
 80015fc:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8001600:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001602:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8001606:	f002 fbfa 	bl	8003dfe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800160a:	fb08 4809 	mla	r8, r8, r9, r4
 800160e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001612:	e61a      	b.n	800124a <HAL_PCD_IRQHandler+0x222>
 8001614:	ff1b1e40 	.word	0xff1b1e40
 8001618:	000f423f 	.word	0x000f423f
 800161c:	00124f7f 	.word	0x00124f7f
 8001620:	0013d61f 	.word	0x0013d61f
 8001624:	fee5b660 	.word	0xfee5b660
 8001628:	0016e35f 	.word	0x0016e35f
 800162c:	feced300 	.word	0xfeced300
 8001630:	001b773f 	.word	0x001b773f
 8001634:	feb35bc0 	.word	0xfeb35bc0
 8001638:	002191bf 	.word	0x002191bf
 800163c:	0038751f 	.word	0x0038751f
 8001640:	fe5954e0 	.word	0xfe5954e0
 8001644:	00419cdf 	.word	0x00419cdf

08001648 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8001648:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 800164c:	2a01      	cmp	r2, #1
{
 800164e:	b510      	push	{r4, lr}
 8001650:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001652:	d00b      	beq.n	800166c <HAL_PCD_SetAddress+0x24>
 8001654:	2201      	movs	r2, #1
 8001656:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 800165a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 800165e:	6800      	ldr	r0, [r0, #0]
 8001660:	f002 fc15 	bl	8003e8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001664:	2000      	movs	r0, #0
 8001666:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800166a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800166c:	2002      	movs	r0, #2
}
 800166e:	bd10      	pop	{r4, pc}

08001670 <HAL_PCD_EP_Open>:
{
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8001674:	b248      	sxtb	r0, r1
 8001676:	2800      	cmp	r0, #0
 8001678:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800167c:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001680:	bfb5      	itete	lt
 8001682:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001686:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800168a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800168c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8001690:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8001692:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001694:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8001696:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8001698:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 800169c:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d009      	beq.n	80016b6 <HAL_PCD_EP_Open+0x46>
 80016a2:	2301      	movs	r3, #1
 80016a4:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	f002 fa0e 	bl	8003aca <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80016b6:	2002      	movs	r0, #2
}
 80016b8:	bd70      	pop	{r4, r5, r6, pc}

080016ba <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80016ba:	b24b      	sxtb	r3, r1
 80016bc:	2b00      	cmp	r3, #0
{  
 80016be:	b510      	push	{r4, lr}
 80016c0:	f04f 021c 	mov.w	r2, #28
 80016c4:	4604      	mov	r4, r0
 80016c6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016ca:	bfb5      	itete	lt
 80016cc:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80016d0:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016d4:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80016d6:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 80016da:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80016dc:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80016de:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80016e0:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d009      	beq.n	80016fc <HAL_PCD_EP_Close+0x42>
 80016e8:	2301      	movs	r3, #1
 80016ea:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80016ee:	6820      	ldr	r0, [r4, #0]
 80016f0:	f002 fa2a 	bl	8003b48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80016f4:	2000      	movs	r0, #0
 80016f6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80016fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80016fc:	2002      	movs	r0, #2
}
 80016fe:	bd10      	pop	{r4, pc}

08001700 <HAL_PCD_EP_Receive>:
{
 8001700:	b538      	push	{r3, r4, r5, lr}
 8001702:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001706:	241c      	movs	r4, #28
 8001708:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800170c:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001710:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
  ep->xfer_len = len;
 8001714:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  ep->xfer_count = 0;
 8001718:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 800171a:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
  ep->xfer_count = 0;
 800171e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  ep->is_in = 0;
 8001722:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
  ep->num = ep_addr & 0x7F;
 8001726:	f884 51e0 	strb.w	r5, [r4, #480]	; 0x1e0
 800172a:	6902      	ldr	r2, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800172c:	6800      	ldr	r0, [r0, #0]
 800172e:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8001730:	b91d      	cbnz	r5, 800173a <HAL_PCD_EP_Receive+0x3a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001732:	f002 faef 	bl	8003d14 <USB_EP0StartXfer>
}
 8001736:	2000      	movs	r0, #0
 8001738:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800173a:	f002 fa33 	bl	8003ba4 <USB_EPStartXfer>
 800173e:	e7fa      	b.n	8001736 <HAL_PCD_EP_Receive+0x36>

08001740 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8001740:	231c      	movs	r3, #28
 8001742:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001746:	fb03 0101 	mla	r1, r3, r1, r0
}
 800174a:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 800174e:	4770      	bx	lr

08001750 <HAL_PCD_EP_Transmit>:
{
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001756:	241c      	movs	r4, #28
 8001758:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800175c:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001760:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001762:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1;
 8001768:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 800176a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1;
 800176c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0x7F;
 8001770:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8001774:	6902      	ldr	r2, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8001776:	6800      	ldr	r0, [r0, #0]
 8001778:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 800177a:	b91d      	cbnz	r5, 8001784 <HAL_PCD_EP_Transmit+0x34>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800177c:	f002 faca 	bl	8003d14 <USB_EP0StartXfer>
}
 8001780:	2000      	movs	r0, #0
 8001782:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8001784:	f002 fa0e 	bl	8003ba4 <USB_EPStartXfer>
 8001788:	e7fa      	b.n	8001780 <HAL_PCD_EP_Transmit+0x30>

0800178a <HAL_PCD_EP_SetStall>:
{
 800178a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800178c:	b24b      	sxtb	r3, r1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001794:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001798:	bfb5      	itete	lt
 800179a:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800179e:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017a2:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80017a4:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 80017a8:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80017aa:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80017ac:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 80017ae:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80017b0:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80017b2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80017b4:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80017b8:	4293      	cmp	r3, r2
{
 80017ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017bc:	d00f      	beq.n	80017de <HAL_PCD_EP_SetStall+0x54>
 80017be:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 80017c2:	6800      	ldr	r0, [r0, #0]
 80017c4:	f002 fb2b 	bl	8003e1e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80017c8:	b92d      	cbnz	r5, 80017d6 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80017ca:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80017ce:	7c21      	ldrb	r1, [r4, #16]
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	f002 fbd1 	bl	8003f78 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80017d6:	2000      	movs	r0, #0
 80017d8:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80017dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80017de:	2002      	movs	r0, #2
}
 80017e0:	bd38      	pop	{r3, r4, r5, pc}

080017e2 <HAL_PCD_EP_ClrStall>:
{
 80017e2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80017e4:	b24b      	sxtb	r3, r1
 80017e6:	2b00      	cmp	r3, #0
{
 80017e8:	4605      	mov	r5, r0
 80017ea:	f04f 021c 	mov.w	r2, #28
 80017ee:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017f2:	bfb5      	itete	lt
 80017f4:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80017f8:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017fc:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80017fe:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001802:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8001804:	2400      	movs	r4, #0
 8001806:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001808:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800180a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800180c:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8001810:	2b01      	cmp	r3, #1
 8001812:	d009      	beq.n	8001828 <HAL_PCD_EP_ClrStall+0x46>
 8001814:	2301      	movs	r3, #1
 8001816:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 800181a:	6828      	ldr	r0, [r5, #0]
 800181c:	f002 fb1e 	bl	8003e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001820:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8001824:	4620      	mov	r0, r4
 8001826:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001828:	2002      	movs	r0, #2
}
 800182a:	bd38      	pop	{r3, r4, r5, pc}

0800182c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800182c:	6800      	ldr	r0, [r0, #0]
{
 800182e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001830:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001832:	b921      	cbnz	r1, 800183e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8001834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001838:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 800183a:	2000      	movs	r0, #0
 800183c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800183e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8001840:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001842:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8001846:	1e4e      	subs	r6, r1, #1
 8001848:	b2ec      	uxtb	r4, r5
 800184a:	42b4      	cmp	r4, r6
 800184c:	f105 0501 	add.w	r5, r5, #1
 8001850:	db06      	blt.n	8001860 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8001852:	313f      	adds	r1, #63	; 0x3f
 8001854:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800185c:	6043      	str	r3, [r0, #4]
 800185e:	e7ec      	b.n	800183a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8001860:	3440      	adds	r4, #64	; 0x40
 8001862:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001866:	6864      	ldr	r4, [r4, #4]
 8001868:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800186c:	e7ec      	b.n	8001848 <HAL_PCDEx_SetTxFiFo+0x1c>

0800186e <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800186e:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001870:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001872:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001874:	4770      	bx	lr

08001876 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001876:	6802      	ldr	r2, [r0, #0]
{
 8001878:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 800187a:	2101      	movs	r1, #1
 800187c:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8001880:	2000      	movs	r0, #0
 8001882:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001886:	6993      	ldr	r3, [r2, #24]
 8001888:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800188c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800188e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	f043 0303 	orr.w	r3, r3, #3
 8001898:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 800189a:	4770      	bx	lr

0800189c <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800189c:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 800189e:	2301      	movs	r3, #1
 80018a0:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80018a4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 80018ac:	2000      	movs	r0, #0
 80018ae:	4770      	bx	lr

080018b0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_PWREx_GetVoltageRange+0xc>)
 80018b2:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80018b4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40007000 	.word	0x40007000

080018c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018cc:	d11a      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ce:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80018d2:	d013      	beq.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d4:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80018d6:	4912      	ldr	r1, [pc, #72]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80018dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e0:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	fbb2 f1f1 	udiv	r1, r2, r1
 80018ea:	2232      	movs	r2, #50	; 0x32
 80018ec:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80018ee:	b112      	cbz	r2, 80018f6 <HAL_PWREx_ControlVoltageScaling+0x36>
 80018f0:	6959      	ldr	r1, [r3, #20]
 80018f2:	0549      	lsls	r1, r1, #21
 80018f4:	d404      	bmi.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	055b      	lsls	r3, r3, #21
 80018fa:	d40d      	bmi.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80018fc:	2000      	movs	r0, #0
 80018fe:	4770      	bx	lr
        wait_loop_index--;
 8001900:	3a01      	subs	r2, #1
 8001902:	e7f4      	b.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001904:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001908:	bf1f      	itttt	ne
 800190a:	681a      	ldrne	r2, [r3, #0]
 800190c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001910:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001914:	601a      	strne	r2, [r3, #0]
 8001916:	e7f1      	b.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
}  
 800191a:	4770      	bx	lr
 800191c:	40007000 	.word	0x40007000
 8001920:	000f4240 	.word	0x000f4240
 8001924:	20000118 	.word	0x20000118

08001928 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <HAL_PWREx_EnableVddUSB+0xc>)
 800192a:	6853      	ldr	r3, [r2, #4]
 800192c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001930:	6053      	str	r3, [r2, #4]
 8001932:	4770      	bx	lr
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001938:	4a02      	ldr	r2, [pc, #8]	; (8001944 <HAL_PWREx_EnableVddIO2+0xc>)
 800193a:	6853      	ldr	r3, [r2, #4]
 800193c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001940:	6053      	str	r3, [r2, #4]
 8001942:	4770      	bx	lr
 8001944:	40007000 	.word	0x40007000

08001948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001948:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800194a:	4d1e      	ldr	r5, [pc, #120]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800194c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800194e:	00da      	lsls	r2, r3, #3
{
 8001950:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001952:	d518      	bpl.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001954:	f7ff ffac 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001958:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800195c:	d123      	bne.n	80019a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800195e:	2c80      	cmp	r4, #128	; 0x80
 8001960:	d929      	bls.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001962:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001964:	bf8c      	ite	hi
 8001966:	2002      	movhi	r0, #2
 8001968:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f023 0307 	bic.w	r3, r3, #7
 8001972:	4303      	orrs	r3, r0
 8001974:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800197c:	1a18      	subs	r0, r3, r0
 800197e:	bf18      	it	ne
 8001980:	2001      	movne	r0, #1
 8001982:	b003      	add	sp, #12
 8001984:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	65ab      	str	r3, [r5, #88]	; 0x58
 800198e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001998:	f7ff ff8a 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80019a4:	e7d8      	b.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80019a6:	2c80      	cmp	r4, #128	; 0x80
 80019a8:	d807      	bhi.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80019aa:	d008      	beq.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80019ac:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80019b0:	4258      	negs	r0, r3
 80019b2:	4158      	adcs	r0, r3
 80019b4:	e7d9      	b.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019b6:	2000      	movs	r0, #0
 80019b8:	e7d7      	b.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80019ba:	2003      	movs	r0, #3
 80019bc:	e7d5      	b.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80019be:	2002      	movs	r0, #2
 80019c0:	e7d3      	b.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	f012 0f0c 	tst.w	r2, #12
{
 80019d4:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80019d6:	d009      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80019de:	2a0c      	cmp	r2, #12
 80019e0:	d12d      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	2a01      	cmp	r2, #1
 80019ea:	d128      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80019ec:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80019ee:	4928      	ldr	r1, [pc, #160]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80019f0:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019f2:	bf55      	itete	pl
 80019f4:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f8:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019fa:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019fe:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001a02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001a06:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001a08:	f011 0f0c 	tst.w	r1, #12
 8001a0c:	bf0c      	ite	eq
 8001a0e:	4610      	moveq	r0, r2
 8001a10:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	f001 010c 	and.w	r1, r1, #12
 8001a18:	290c      	cmp	r1, #12
 8001a1a:	d130      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a1c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001a24:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a26:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x96>
 8001a2e:	2803      	cmp	r0, #3
 8001a30:	d026      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a32:	fbb2 f2f1 	udiv	r2, r2, r1
 8001a36:	68d8      	ldr	r0, [r3, #12]
 8001a38:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001a3c:	e017      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	f002 020c 	and.w	r2, r2, #12
 8001a44:	2a04      	cmp	r2, #4
 8001a46:	d007      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	f002 020c 	and.w	r2, r2, #12
 8001a4e:	2a08      	cmp	r2, #8
 8001a50:	d104      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7dc      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001a58:	480f      	ldr	r0, [pc, #60]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a5a:	e7fb      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001a5c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001a5e:	4602      	mov	r2, r0
 8001a60:	e7d7      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a66:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6a:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001a74:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a76:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a78:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001a7a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001a7e:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	4804      	ldr	r0, [pc, #16]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a84:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001a88:	e7ef      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x9e>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08006440 	.word	0x08006440
 8001a94:	01312d00 	.word	0x01312d00
 8001a98:	00f42400 	.word	0x00f42400

08001a9c <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9c:	6803      	ldr	r3, [r0, #0]
{
 8001a9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001aa2:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aa4:	06d8      	lsls	r0, r3, #27
 8001aa6:	d539      	bpl.n	8001b1c <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001aa8:	4cab      	ldr	r4, [pc, #684]	; (8001d58 <HAL_RCC_OscConfig+0x2bc>)
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	f013 0f0c 	tst.w	r3, #12
 8001ab0:	d162      	bne.n	8001b78 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	0799      	lsls	r1, r3, #30
 8001ab6:	d503      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x24>
 8001ab8:	69ab      	ldr	r3, [r5, #24]
 8001aba:	b90b      	cbnz	r3, 8001ac0 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 8001abc:	2001      	movs	r0, #1
 8001abe:	e07f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	6a28      	ldr	r0, [r5, #32]
 8001ac4:	071a      	lsls	r2, r3, #28
 8001ac6:	bf56      	itet	pl
 8001ac8:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001acc:	6823      	ldrmi	r3, [r4, #0]
 8001ace:	091b      	lsrpl	r3, r3, #4
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad4:	4283      	cmp	r3, r0
 8001ad6:	d23a      	bcs.n	8001b4e <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad8:	f7ff ff36 	bl	8001948 <RCC_SetFlashLatencyFromMSIRange>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1ed      	bne.n	8001abc <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6023      	str	r3, [r4, #0]
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	6a2a      	ldr	r2, [r5, #32]
 8001aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af0:	4313      	orrs	r3, r2
 8001af2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	69ea      	ldr	r2, [r5, #28]
 8001af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b00:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f7ff ff63 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001b06:	68a3      	ldr	r3, [r4, #8]
 8001b08:	4a94      	ldr	r2, [pc, #592]	; (8001d5c <HAL_RCC_OscConfig+0x2c0>)
 8001b0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	40d8      	lsrs	r0, r3
 8001b12:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x2c4>)
 8001b14:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f003 fffa 	bl	8005b10 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	07de      	lsls	r6, r3, #31
 8001b20:	d461      	bmi.n	8001be6 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	682b      	ldr	r3, [r5, #0]
 8001b24:	079c      	lsls	r4, r3, #30
 8001b26:	f100 80a9 	bmi.w	8001c7c <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	0719      	lsls	r1, r3, #28
 8001b2e:	f100 80e7 	bmi.w	8001d00 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	075a      	lsls	r2, r3, #29
 8001b36:	f100 8115 	bmi.w	8001d64 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	0699      	lsls	r1, r3, #26
 8001b3e:	f100 817c 	bmi.w	8001e3a <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	f040 81a3 	bne.w	8001e90 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e038      	b.n	8001bc0 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b5c:	4303      	orrs	r3, r0
 8001b5e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	69ea      	ldr	r2, [r5, #28]
 8001b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b6c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6e:	f7ff feeb 	bl	8001948 <RCC_SetFlashLatencyFromMSIRange>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d0c5      	beq.n	8001b02 <HAL_RCC_OscConfig+0x66>
 8001b76:	e7a1      	b.n	8001abc <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b78:	69ab      	ldr	r3, [r5, #24]
 8001b7a:	b323      	cbz	r3, 8001bc6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7fe fcd6 	bl	8000534 <HAL_GetTick>
 8001b88:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	079b      	lsls	r3, r3, #30
 8001b8e:	d511      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	6a2a      	ldr	r2, [r5, #32]
 8001b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	69ea      	ldr	r2, [r5, #28]
 8001ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bb0:	6063      	str	r3, [r4, #4]
 8001bb2:	e7b3      	b.n	8001b1c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fcbe 	bl	8000534 <HAL_GetTick>
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	2802      	cmp	r0, #2
 8001bbc:	d9e5      	bls.n	8001b8a <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8001bbe:	2003      	movs	r0, #3
}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bce:	f7fe fcb1 	bl	8000534 <HAL_GetTick>
 8001bd2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	079f      	lsls	r7, r3, #30
 8001bd8:	d5a0      	bpl.n	8001b1c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7fe fcab 	bl	8000534 <HAL_GetTick>
 8001bde:	1b80      	subs	r0, r0, r6
 8001be0:	2802      	cmp	r0, #2
 8001be2:	d9f7      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x138>
 8001be4:	e7eb      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001be6:	4c5c      	ldr	r4, [pc, #368]	; (8001d58 <HAL_RCC_OscConfig+0x2bc>)
 8001be8:	68a3      	ldr	r3, [r4, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf2:	68a3      	ldr	r3, [r4, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	68e3      	ldr	r3, [r4, #12]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	0398      	lsls	r0, r3, #14
 8001c0a:	d58a      	bpl.n	8001b22 <HAL_RCC_OscConfig+0x86>
 8001c0c:	686b      	ldr	r3, [r5, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d187      	bne.n	8001b22 <HAL_RCC_OscConfig+0x86>
 8001c12:	e753      	b.n	8001abc <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	686b      	ldr	r3, [r5, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d110      	bne.n	8001c3e <HAL_RCC_OscConfig+0x1a2>
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c24:	f7fe fc86 	bl	8000534 <HAL_GetTick>
 8001c28:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	0399      	lsls	r1, r3, #14
 8001c2e:	f53f af78 	bmi.w	8001b22 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c32:	f7fe fc7f 	bl	8000534 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	2864      	cmp	r0, #100	; 0x64
 8001c3a:	d9f6      	bls.n	8001c2a <HAL_RCC_OscConfig+0x18e>
 8001c3c:	e7bf      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c42:	d104      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1b2>
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4a:	6023      	str	r3, [r4, #0]
 8001c4c:	e7e6      	b.n	8001c1c <HAL_RCC_OscConfig+0x180>
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c54:	6022      	str	r2, [r4, #0]
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c5c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8001c62:	f7fe fc67 	bl	8000534 <HAL_GetTick>
 8001c66:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	039a      	lsls	r2, r3, #14
 8001c6c:	f57f af59 	bpl.w	8001b22 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7fe fc60 	bl	8000534 <HAL_GetTick>
 8001c74:	1b80      	subs	r0, r0, r6
 8001c76:	2864      	cmp	r0, #100	; 0x64
 8001c78:	d9f6      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1cc>
 8001c7a:	e7a0      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001c7c:	4c36      	ldr	r4, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x2bc>)
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d009      	beq.n	8001c9c <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c88:	68a3      	ldr	r3, [r4, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d113      	bne.n	8001cba <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c92:	68e3      	ldr	r3, [r4, #12]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d10e      	bne.n	8001cba <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	055b      	lsls	r3, r3, #21
 8001ca0:	d503      	bpl.n	8001caa <HAL_RCC_OscConfig+0x20e>
 8001ca2:	68eb      	ldr	r3, [r5, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f43f af09 	beq.w	8001abc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	6863      	ldr	r3, [r4, #4]
 8001cac:	692a      	ldr	r2, [r5, #16]
 8001cae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001cb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cb6:	6063      	str	r3, [r4, #4]
 8001cb8:	e737      	b.n	8001b2a <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cba:	68eb      	ldr	r3, [r5, #12]
 8001cbc:	b17b      	cbz	r3, 8001cde <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fc35 	bl	8000534 <HAL_GetTick>
 8001cca:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	055f      	lsls	r7, r3, #21
 8001cd0:	d4eb      	bmi.n	8001caa <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7fe fc2f 	bl	8000534 <HAL_GetTick>
 8001cd6:	1b80      	subs	r0, r0, r6
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9f7      	bls.n	8001ccc <HAL_RCC_OscConfig+0x230>
 8001cdc:	e76f      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fc25 	bl	8000534 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	0558      	lsls	r0, r3, #21
 8001cf0:	f57f af1b 	bpl.w	8001b2a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7fe fc1e 	bl	8000534 <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f6      	bls.n	8001cec <HAL_RCC_OscConfig+0x250>
 8001cfe:	e75e      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d00:	696b      	ldr	r3, [r5, #20]
 8001d02:	4c15      	ldr	r4, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x2bc>)
 8001d04:	b19b      	cbz	r3, 8001d2e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8001d06:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d12:	f7fe fc0f 	bl	8000534 <HAL_GetTick>
 8001d16:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001d18:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d1c:	079b      	lsls	r3, r3, #30
 8001d1e:	f53f af08 	bmi.w	8001b32 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d22:	f7fe fc07 	bl	8000534 <HAL_GetTick>
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f5      	bls.n	8001d18 <HAL_RCC_OscConfig+0x27c>
 8001d2c:	e747      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fbfb 	bl	8000534 <HAL_GetTick>
 8001d3e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001d40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d44:	079f      	lsls	r7, r3, #30
 8001d46:	f57f aef4 	bpl.w	8001b32 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7fe fbf3 	bl	8000534 <HAL_GetTick>
 8001d4e:	1b80      	subs	r0, r0, r6
 8001d50:	2802      	cmp	r0, #2
 8001d52:	d9f5      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2a4>
 8001d54:	e733      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08006425 	.word	0x08006425
 8001d60:	20000118 	.word	0x20000118
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d64:	4c7b      	ldr	r4, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d68:	00d8      	lsls	r0, r3, #3
 8001d6a:	d427      	bmi.n	8001dbc <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d72:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d7e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	4e75      	ldr	r6, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x4bc>)
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	05d9      	lsls	r1, r3, #23
 8001d86:	d51b      	bpl.n	8001dc0 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	68ab      	ldr	r3, [r5, #8]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d129      	bne.n	8001de2 <HAL_RCC_OscConfig+0x346>
 8001d8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d9a:	f7fe fbcb 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001da2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001da4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001da8:	079b      	lsls	r3, r3, #30
 8001daa:	d540      	bpl.n	8001e2e <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	f43f aec4 	beq.w	8001b3a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001dba:	e6be      	b.n	8001b3a <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2700      	movs	r7, #0
 8001dbe:	e7df      	b.n	8001d80 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dc8:	f7fe fbb4 	bl	8000534 <HAL_GetTick>
 8001dcc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dce:	6833      	ldr	r3, [r6, #0]
 8001dd0:	05da      	lsls	r2, r3, #23
 8001dd2:	d4d9      	bmi.n	8001d88 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7fe fbae 	bl	8000534 <HAL_GetTick>
 8001dd8:	eba0 0008 	sub.w	r0, r0, r8
 8001ddc:	2802      	cmp	r0, #2
 8001dde:	d9f6      	bls.n	8001dce <HAL_RCC_OscConfig+0x332>
 8001de0:	e6ed      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x358>
 8001de6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001df2:	e7cc      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f2>
 8001df4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001e00:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001e04:	f022 0204 	bic.w	r2, r2, #4
 8001e08:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1c4      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8001e10:	f7fe fb90 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e18:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001e1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e1e:	0798      	lsls	r0, r3, #30
 8001e20:	d5c4      	bpl.n	8001dac <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fb87 	bl	8000534 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	4540      	cmp	r0, r8
 8001e2a:	d9f6      	bls.n	8001e1a <HAL_RCC_OscConfig+0x37e>
 8001e2c:	e6c7      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fb81 	bl	8000534 <HAL_GetTick>
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	4540      	cmp	r0, r8
 8001e36:	d9b5      	bls.n	8001da4 <HAL_RCC_OscConfig+0x308>
 8001e38:	e6c1      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e3c:	4c45      	ldr	r4, [pc, #276]	; (8001f54 <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	b19b      	cbz	r3, 8001e68 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8001e40:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fb72 	bl	8000534 <HAL_GetTick>
 8001e50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001e52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001e56:	079a      	lsls	r2, r3, #30
 8001e58:	f53f ae73 	bmi.w	8001b42 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e5c:	f7fe fb6a 	bl	8000534 <HAL_GetTick>
 8001e60:	1b80      	subs	r0, r0, r6
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3b6>
 8001e66:	e6aa      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001e68:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001e74:	f7fe fb5e 	bl	8000534 <HAL_GetTick>
 8001e78:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001e7a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001e7e:	079b      	lsls	r3, r3, #30
 8001e80:	f57f ae5f 	bpl.w	8001b42 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e84:	f7fe fb56 	bl	8000534 <HAL_GetTick>
 8001e88:	1b80      	subs	r0, r0, r6
 8001e8a:	2802      	cmp	r0, #2
 8001e8c:	d9f5      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3de>
 8001e8e:	e696      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e90:	4c30      	ldr	r4, [pc, #192]	; (8001f54 <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	f43f ae0f 	beq.w	8001abc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea8:	d136      	bne.n	8001f18 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fb43 	bl	8000534 <HAL_GetTick>
 8001eae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	019f      	lsls	r7, r3, #6
 8001eb4:	d42a      	bmi.n	8001f0c <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001eb8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001eba:	06db      	lsls	r3, r3, #27
 8001ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ec0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ecc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001ece:	0852      	lsrs	r2, r2, #1
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001ed6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001ed8:	0852      	lsrs	r2, r2, #1
 8001eda:	3a01      	subs	r2, #1
 8001edc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001ee0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eea:	68e3      	ldr	r3, [r4, #12]
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fb1f 	bl	8000534 <HAL_GetTick>
 8001ef6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	0198      	lsls	r0, r3, #6
 8001efc:	f53f ae25 	bmi.w	8001b4a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fb18 	bl	8000534 <HAL_GetTick>
 8001f04:	1b40      	subs	r0, r0, r5
 8001f06:	2802      	cmp	r0, #2
 8001f08:	d9f6      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x45c>
 8001f0a:	e658      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe fb12 	bl	8000534 <HAL_GetTick>
 8001f10:	1b80      	subs	r0, r0, r6
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d9cc      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x414>
 8001f16:	e652      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	0119      	lsls	r1, r3, #4
 8001f1c:	d406      	bmi.n	8001f2c <HAL_RCC_OscConfig+0x490>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001f1e:	6823      	ldr	r3, [r4, #0]
           &&
 8001f20:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f22:	bf5e      	ittt	pl
 8001f24:	68e3      	ldrpl	r3, [r4, #12]
 8001f26:	f023 0303 	bicpl.w	r3, r3, #3
 8001f2a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2c:	68e3      	ldr	r3, [r4, #12]
 8001f2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001f38:	f7fe fafc 	bl	8000534 <HAL_GetTick>
 8001f3c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	019b      	lsls	r3, r3, #6
 8001f42:	f57f ae02 	bpl.w	8001b4a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe faf5 	bl	8000534 <HAL_GetTick>
 8001f4a:	1b40      	subs	r0, r0, r5
 8001f4c:	2802      	cmp	r0, #2
 8001f4e:	d9f6      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4a2>
 8001f50:	e635      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000

08001f5c <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_ClockConfig+0x15c>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	428b      	cmp	r3, r1
{
 8001f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001f6e:	d32b      	bcc.n	8001fc8 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	07d9      	lsls	r1, r3, #31
 8001f74:	d435      	bmi.n	8001fe2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f76:	6829      	ldr	r1, [r5, #0]
 8001f78:	078a      	lsls	r2, r1, #30
 8001f7a:	f100 8083 	bmi.w	8002084 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001f7e:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_RCC_ClockConfig+0x15c>)
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	429e      	cmp	r6, r3
 8001f88:	f0c0 8084 	bcc.w	8002094 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	f011 0f04 	tst.w	r1, #4
 8001f90:	4c4a      	ldr	r4, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x160>)
 8001f92:	f040 808a 	bne.w	80020aa <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	070b      	lsls	r3, r1, #28
 8001f98:	d506      	bpl.n	8001fa8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	68a3      	ldr	r3, [r4, #8]
 8001f9c:	692a      	ldr	r2, [r5, #16]
 8001f9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fa2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fa6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa8:	f7ff fd10 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	4a44      	ldr	r2, [pc, #272]	; (80020c0 <HAL_RCC_ClockConfig+0x164>)
 8001fb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	40d8      	lsrs	r0, r3
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_ClockConfig+0x168>)
 8001fba:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f003 fda7 	bl	8005b10 <HAL_InitTick>
  return HAL_OK;
 8001fc2:	2000      	movs	r0, #0
}
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	f023 0307 	bic.w	r3, r3, #7
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d0c9      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe2:	686a      	ldr	r2, [r5, #4]
 8001fe4:	4c35      	ldr	r4, [pc, #212]	; (80020bc <HAL_RCC_ClockConfig+0x160>)
 8001fe6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001fe8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	d11c      	bne.n	8002026 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001fec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ff0:	d0f4      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff2:	68a3      	ldr	r3, [r4, #8]
 8001ff4:	f023 0303 	bic.w	r3, r3, #3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fa9a 	bl	8000534 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	686b      	ldr	r3, [r5, #4]
 8002002:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8002004:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	d118      	bne.n	800203e <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200c:	68a3      	ldr	r3, [r4, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d0af      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe fa8d 	bl	8000534 <HAL_GetTick>
 800201a:	1bc0      	subs	r0, r0, r7
 800201c:	4540      	cmp	r0, r8
 800201e:	d9f5      	bls.n	800200c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8002020:	2003      	movs	r0, #3
 8002022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	2a02      	cmp	r2, #2
 8002028:	d102      	bne.n	8002030 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800202a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800202e:	e7df      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002030:	b912      	cbnz	r2, 8002038 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002032:	f013 0f02 	tst.w	r3, #2
 8002036:	e7db      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002038:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800203c:	e7d8      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	2b02      	cmp	r3, #2
 8002040:	d10a      	bne.n	8002058 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d094      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe fa72 	bl	8000534 <HAL_GetTick>
 8002050:	1bc0      	subs	r0, r0, r7
 8002052:	4540      	cmp	r0, r8
 8002054:	d9f5      	bls.n	8002042 <HAL_RCC_ClockConfig+0xe6>
 8002056:	e7e3      	b.n	8002020 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002058:	b973      	cbnz	r3, 8002078 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	f013 0f0c 	tst.w	r3, #12
 8002060:	d089      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7fe fa67 	bl	8000534 <HAL_GetTick>
 8002066:	1bc0      	subs	r0, r0, r7
 8002068:	4540      	cmp	r0, r8
 800206a:	d9f6      	bls.n	800205a <HAL_RCC_ClockConfig+0xfe>
 800206c:	e7d8      	b.n	8002020 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206e:	f7fe fa61 	bl	8000534 <HAL_GetTick>
 8002072:	1bc0      	subs	r0, r0, r7
 8002074:	4540      	cmp	r0, r8
 8002076:	d8d3      	bhi.n	8002020 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002078:	68a3      	ldr	r3, [r4, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d1f5      	bne.n	800206e <HAL_RCC_ClockConfig+0x112>
 8002082:	e778      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_RCC_ClockConfig+0x160>)
 8002086:	68a8      	ldr	r0, [r5, #8]
 8002088:	6893      	ldr	r3, [r2, #8]
 800208a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800208e:	4303      	orrs	r3, r0
 8002090:	6093      	str	r3, [r2, #8]
 8002092:	e774      	b.n	8001f7e <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	4333      	orrs	r3, r6
 800209c:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	429e      	cmp	r6, r3
 80020a6:	d199      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x80>
 80020a8:	e770      	b.n	8001f8c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020aa:	68a3      	ldr	r3, [r4, #8]
 80020ac:	68ea      	ldr	r2, [r5, #12]
 80020ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60a3      	str	r3, [r4, #8]
 80020b6:	e76e      	b.n	8001f96 <HAL_RCC_ClockConfig+0x3a>
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08006425 	.word	0x08006425
 80020c4:	20000118 	.word	0x20000118

080020c8 <HAL_RCC_GetHCLKFreq>:
}
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000118 	.word	0x20000118

080020d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020e2:	6810      	ldr	r0, [r2, #0]
}
 80020e4:	40d8      	lsrs	r0, r3
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08006435 	.word	0x08006435
 80020f0:	20000118 	.word	0x20000118

080020f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <HAL_RCC_GetPCLK2Freq+0x18>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002102:	6810      	ldr	r0, [r2, #0]
}
 8002104:	40d8      	lsrs	r0, r3
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	08006435 	.word	0x08006435
 8002110:	20000118 	.word	0x20000118

08002114 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002114:	230f      	movs	r3, #15
 8002116:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_GetClockConfig+0x34>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002128:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002130:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800213a:	6103      	str	r3, [r0, #16]
  *pFLatency = READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY);
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetClockConfig+0x38>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	600b      	str	r3, [r1, #0]
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000
 800214c:	40022000 	.word	0x40022000

08002150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002152:	4b44      	ldr	r3, [pc, #272]	; (8002264 <RCCEx_PLLSAI1_Config+0x114>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	f012 0f03 	tst.w	r2, #3
{
 800215a:	4605      	mov	r5, r0
 800215c:	460e      	mov	r6, r1
 800215e:	461c      	mov	r4, r3
 8002160:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002162:	d039      	beq.n	80021d8 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	4282      	cmp	r2, r0
 800216c:	d14b      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800216e:	2a00      	cmp	r2, #0
 8002170:	d049      	beq.n	8002206 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002172:	68db      	ldr	r3, [r3, #12]
       ||
 8002174:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002176:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800217a:	3301      	adds	r3, #1
       ||
 800217c:	4293      	cmp	r3, r2
 800217e:	d142      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002186:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe f9d4 	bl	8000534 <HAL_GetTick>
 800218c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	011a      	lsls	r2, r3, #4
 8002192:	d441      	bmi.n	8002218 <RCCEx_PLLSAI1_Config+0xc8>
 8002194:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002196:	2e00      	cmp	r6, #0
 8002198:	d045      	beq.n	8002226 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800219a:	2e01      	cmp	r6, #1
 800219c:	d14f      	bne.n	800223e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800219e:	6922      	ldr	r2, [r4, #16]
 80021a0:	6928      	ldr	r0, [r5, #16]
 80021a2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021a6:	0840      	lsrs	r0, r0, #1
 80021a8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021ac:	3801      	subs	r0, #1
 80021ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80021b2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80021b6:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021be:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe f9b8 	bl	8000534 <HAL_GetTick>
 80021c4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	d545      	bpl.n	8002258 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	69aa      	ldr	r2, [r5, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	6123      	str	r3, [r4, #16]
 80021d4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80021d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80021d8:	2802      	cmp	r0, #2
 80021da:	d010      	beq.n	80021fe <RCCEx_PLLSAI1_Config+0xae>
 80021dc:	2803      	cmp	r0, #3
 80021de:	d014      	beq.n	800220a <RCCEx_PLLSAI1_Config+0xba>
 80021e0:	2801      	cmp	r0, #1
 80021e2:	d110      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	079f      	lsls	r7, r3, #30
 80021e8:	d5f5      	bpl.n	80021d6 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021ea:	68e3      	ldr	r3, [r4, #12]
 80021ec:	686a      	ldr	r2, [r5, #4]
 80021ee:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80021f2:	3a01      	subs	r2, #1
 80021f4:	4318      	orrs	r0, r3
 80021f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80021fa:	60e0      	str	r0, [r4, #12]
 80021fc:	e7c0      	b.n	8002180 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002204:	d1f1      	bne.n	80021ea <RCCEx_PLLSAI1_Config+0x9a>
 8002206:	2001      	movs	r0, #1
 8002208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	0391      	lsls	r1, r2, #14
 800220e:	d4ec      	bmi.n	80021ea <RCCEx_PLLSAI1_Config+0x9a>
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002216:	e7f5      	b.n	8002204 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002218:	f7fe f98c 	bl	8000534 <HAL_GetTick>
 800221c:	1bc0      	subs	r0, r0, r7
 800221e:	2802      	cmp	r0, #2
 8002220:	d9b5      	bls.n	800218e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002222:	2003      	movs	r0, #3
 8002224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002226:	6922      	ldr	r2, [r4, #16]
 8002228:	68e9      	ldr	r1, [r5, #12]
 800222a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800222e:	06c9      	lsls	r1, r1, #27
 8002230:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8002234:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002238:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800223a:	6123      	str	r3, [r4, #16]
 800223c:	e7bc      	b.n	80021b8 <RCCEx_PLLSAI1_Config+0x68>
 800223e:	6923      	ldr	r3, [r4, #16]
 8002240:	6968      	ldr	r0, [r5, #20]
 8002242:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002246:	0840      	lsrs	r0, r0, #1
 8002248:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800224c:	3801      	subs	r0, #1
 800224e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002252:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002256:	e7f0      	b.n	800223a <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002258:	f7fe f96c 	bl	8000534 <HAL_GetTick>
 800225c:	1b80      	subs	r0, r0, r6
 800225e:	2802      	cmp	r0, #2
 8002260:	d9b1      	bls.n	80021c6 <RCCEx_PLLSAI1_Config+0x76>
 8002262:	e7de      	b.n	8002222 <RCCEx_PLLSAI1_Config+0xd2>
 8002264:	40021000 	.word	0x40021000

08002268 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <RCCEx_PLLSAI2_Config+0xf4>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	f012 0f03 	tst.w	r2, #3
{
 8002272:	4605      	mov	r5, r0
 8002274:	460e      	mov	r6, r1
 8002276:	461c      	mov	r4, r3
 8002278:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800227a:	d027      	beq.n	80022cc <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	4282      	cmp	r2, r0
 8002284:	d139      	bne.n	80022fa <RCCEx_PLLSAI2_Config+0x92>
       ||
 8002286:	2a00      	cmp	r2, #0
 8002288:	d037      	beq.n	80022fa <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800228a:	68db      	ldr	r3, [r3, #12]
       ||
 800228c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800228e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002292:	3301      	adds	r3, #1
       ||
 8002294:	4293      	cmp	r3, r2
 8002296:	d130      	bne.n	80022fa <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a0:	f7fe f948 	bl	8000534 <HAL_GetTick>
 80022a4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	009a      	lsls	r2, r3, #2
 80022aa:	d42f      	bmi.n	800230c <RCCEx_PLLSAI2_Config+0xa4>
 80022ac:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	d033      	beq.n	800231a <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022b2:	6963      	ldr	r3, [r4, #20]
 80022b4:	6929      	ldr	r1, [r5, #16]
 80022b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022ba:	0849      	lsrs	r1, r1, #1
 80022bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022c0:	3901      	subs	r1, #1
 80022c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80022c6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80022ca:	e030      	b.n	800232e <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 80022cc:	2802      	cmp	r0, #2
 80022ce:	d010      	beq.n	80022f2 <RCCEx_PLLSAI2_Config+0x8a>
 80022d0:	2803      	cmp	r0, #3
 80022d2:	d014      	beq.n	80022fe <RCCEx_PLLSAI2_Config+0x96>
 80022d4:	2801      	cmp	r0, #1
 80022d6:	d110      	bne.n	80022fa <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	079f      	lsls	r7, r3, #30
 80022dc:	d537      	bpl.n	800234e <RCCEx_PLLSAI2_Config+0xe6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022de:	68e3      	ldr	r3, [r4, #12]
 80022e0:	686a      	ldr	r2, [r5, #4]
 80022e2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80022e6:	3a01      	subs	r2, #1
 80022e8:	4318      	orrs	r0, r3
 80022ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80022ee:	60e0      	str	r0, [r4, #12]
 80022f0:	e7d2      	b.n	8002298 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022f8:	d1f1      	bne.n	80022de <RCCEx_PLLSAI2_Config+0x76>
 80022fa:	2001      	movs	r0, #1
 80022fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	0391      	lsls	r1, r2, #14
 8002302:	d4ec      	bmi.n	80022de <RCCEx_PLLSAI2_Config+0x76>
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800230a:	e7f5      	b.n	80022f8 <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800230c:	f7fe f912 	bl	8000534 <HAL_GetTick>
 8002310:	1bc0      	subs	r0, r0, r7
 8002312:	2802      	cmp	r0, #2
 8002314:	d9c7      	bls.n	80022a6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002316:	2003      	movs	r0, #3
 8002318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800231a:	68ea      	ldr	r2, [r5, #12]
 800231c:	6961      	ldr	r1, [r4, #20]
 800231e:	06d2      	lsls	r2, r2, #27
 8002320:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002324:	f021 4278 	bic.w	r2, r1, #4160749568	; 0xf8000000
 8002328:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800232c:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800232e:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe f8fc 	bl	8000534 <HAL_GetTick>
 800233c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	d505      	bpl.n	8002350 <RCCEx_PLLSAI2_Config+0xe8>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002344:	6963      	ldr	r3, [r4, #20]
 8002346:	696a      	ldr	r2, [r5, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	6163      	str	r3, [r4, #20]
 800234c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002350:	f7fe f8f0 	bl	8000534 <HAL_GetTick>
 8002354:	1b80      	subs	r0, r0, r6
 8002356:	2802      	cmp	r0, #2
 8002358:	d9f1      	bls.n	800233e <RCCEx_PLLSAI2_Config+0xd6>
 800235a:	e7dc      	b.n	8002316 <RCCEx_PLLSAI2_Config+0xae>
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002360:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002364:	6806      	ldr	r6, [r0, #0]
 8002366:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800236a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800236c:	d024      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800236e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8002370:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002374:	d02c      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002376:	d802      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002378:	b1c1      	cbz	r1, 80023ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800237a:	2601      	movs	r6, #1
 800237c:	e01c      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800237e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002382:	d00d      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002384:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002388:	d1f7      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800238a:	4a53      	ldr	r2, [pc, #332]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800238c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800238e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002392:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002396:	430b      	orrs	r3, r1
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800239c:	2600      	movs	r6, #0
 800239e:	e00b      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a0:	4a4d      	ldr	r2, [pc, #308]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80023a2:	68d3      	ldr	r3, [r2, #12]
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	60d3      	str	r3, [r2, #12]
      break;
 80023aa:	e7ee      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ac:	3004      	adds	r0, #4
 80023ae:	f7ff fecf 	bl	8002150 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d0e8      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	04d8      	lsls	r0, r3, #19
 80023bc:	d506      	bpl.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023be:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80023c0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80023c4:	d07c      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80023c6:	d808      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023c8:	b1a9      	cbz	r1, 80023f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80023ca:	2601      	movs	r6, #1
 80023cc:	4635      	mov	r5, r6
 80023ce:	e021      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d0:	2100      	movs	r1, #0
 80023d2:	3020      	adds	r0, #32
 80023d4:	f7ff ff48 	bl	8002268 <RCCEx_PLLSAI2_Config>
 80023d8:	e7eb      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023da:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80023de:	d004      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80023e0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80023e4:	d1f1      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023e6:	4635      	mov	r5, r6
 80023e8:	e009      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ea:	4a3b      	ldr	r2, [pc, #236]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80023ec:	68d3      	ldr	r3, [r2, #12]
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	60d3      	str	r3, [r2, #12]
 80023f4:	e7f7      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023f6:	1d20      	adds	r0, r4, #4
 80023f8:	f7ff feaa 	bl	8002150 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023fe:	2d00      	cmp	r5, #0
 8002400:	d164      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002402:	4a35      	ldr	r2, [pc, #212]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002404:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002406:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800240a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800240e:	430b      	orrs	r3, r1
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	0399      	lsls	r1, r3, #14
 8002418:	f140 8167 	bpl.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241c:	4f2e      	ldr	r7, [pc, #184]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800241e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002420:	00da      	lsls	r2, r3, #3
 8002422:	d455      	bmi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	65bb      	str	r3, [r7, #88]	; 0x58
 800242c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002436:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80024dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800243e:	f8d9 3000 	ldr.w	r3, [r9]
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800244a:	f7fe f873 	bl	8000534 <HAL_GetTick>
 800244e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002450:	f8d9 3000 	ldr.w	r3, [r9]
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	d543      	bpl.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8002458:	2d00      	cmp	r5, #0
 800245a:	d148      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002460:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002464:	d015      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002466:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800246a:	4293      	cmp	r3, r2
 800246c:	d011      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800246e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002472:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800247a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800247e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002486:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800248a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800248e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002492:	07dd      	lsls	r5, r3, #31
 8002494:	d509      	bpl.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8002496:	f7fe f84d 	bl	8000534 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800249e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80024a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a4:	0798      	lsls	r0, r3, #30
 80024a6:	f140 8119 	bpl.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ae:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80024b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024bc:	4635      	mov	r5, r6
 80024be:	e016      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c0:	2100      	movs	r1, #0
 80024c2:	f104 0020 	add.w	r0, r4, #32
 80024c6:	f7ff fecf 	bl	8002268 <RCCEx_PLLSAI2_Config>
 80024ca:	e797      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80024cc:	462e      	mov	r6, r5
 80024ce:	e7a1      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80024d0:	f04f 0800 	mov.w	r8, #0
 80024d4:	e7b1      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe f828 	bl	8000534 <HAL_GetTick>
 80024e4:	eba0 000a 	sub.w	r0, r0, sl
 80024e8:	2802      	cmp	r0, #2
 80024ea:	d9b1      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80024ec:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80024ee:	f1b8 0f00 	cmp.w	r8, #0
 80024f2:	d003      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	07d9      	lsls	r1, r3, #31
 8002500:	d508      	bpl.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002502:	4990      	ldr	r1, [pc, #576]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002504:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002506:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800250a:	f022 0203 	bic.w	r2, r2, #3
 800250e:	4302      	orrs	r2, r0
 8002510:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002514:	079a      	lsls	r2, r3, #30
 8002516:	d508      	bpl.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002518:	498a      	ldr	r1, [pc, #552]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800251c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002520:	f022 020c 	bic.w	r2, r2, #12
 8002524:	4302      	orrs	r2, r0
 8002526:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252a:	075f      	lsls	r7, r3, #29
 800252c:	d508      	bpl.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800252e:	4985      	ldr	r1, [pc, #532]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002530:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002532:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002536:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800253a:	4302      	orrs	r2, r0
 800253c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002540:	071e      	lsls	r6, r3, #28
 8002542:	d508      	bpl.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002544:	497f      	ldr	r1, [pc, #508]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002546:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002548:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800254c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002550:	4302      	orrs	r2, r0
 8002552:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002556:	06d8      	lsls	r0, r3, #27
 8002558:	d508      	bpl.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255a:	497a      	ldr	r1, [pc, #488]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800255e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002562:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002566:	4302      	orrs	r2, r0
 8002568:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800256c:	0699      	lsls	r1, r3, #26
 800256e:	d508      	bpl.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002570:	4974      	ldr	r1, [pc, #464]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002572:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002574:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002578:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800257c:	4302      	orrs	r2, r0
 800257e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002582:	059a      	lsls	r2, r3, #22
 8002584:	d508      	bpl.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002586:	496f      	ldr	r1, [pc, #444]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002588:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800258a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800258e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002592:	4302      	orrs	r2, r0
 8002594:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002598:	055f      	lsls	r7, r3, #21
 800259a:	d508      	bpl.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800259c:	4969      	ldr	r1, [pc, #420]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80025a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025a8:	4302      	orrs	r2, r0
 80025aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ae:	065e      	lsls	r6, r3, #25
 80025b0:	d508      	bpl.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b2:	4964      	ldr	r1, [pc, #400]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025be:	4302      	orrs	r2, r0
 80025c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c4:	0618      	lsls	r0, r3, #24
 80025c6:	d508      	bpl.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c8:	495e      	ldr	r1, [pc, #376]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80025d4:	4302      	orrs	r2, r0
 80025d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	05d9      	lsls	r1, r3, #23
 80025dc:	d508      	bpl.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025de:	4959      	ldr	r1, [pc, #356]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025e6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025ea:	4302      	orrs	r2, r0
 80025ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025f0:	02da      	lsls	r2, r3, #11
 80025f2:	d508      	bpl.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025f4:	4953      	ldr	r1, [pc, #332]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025f8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80025fc:	f022 0203 	bic.w	r2, r2, #3
 8002600:	4302      	orrs	r2, r0
 8002602:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002606:	049b      	lsls	r3, r3, #18
 8002608:	d50f      	bpl.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800260a:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800260e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002612:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002616:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002618:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002620:	d165      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002622:	68d3      	ldr	r3, [r2, #12]
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	031f      	lsls	r7, r3, #12
 800262e:	d50f      	bpl.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002630:	4a44      	ldr	r2, [pc, #272]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002634:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002638:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800263c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800263e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002642:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002646:	d15d      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002648:	68d3      	ldr	r3, [r2, #12]
 800264a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	035e      	lsls	r6, r3, #13
 8002654:	d50f      	bpl.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x316>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002658:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800265a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800265e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002662:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002664:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800266c:	d155      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266e:	68d3      	ldr	r3, [r2, #12]
 8002670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002674:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	0458      	lsls	r0, r3, #17
 800267a:	d512      	bpl.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800267c:	4931      	ldr	r1, [pc, #196]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002680:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002684:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002688:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800268a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002692:	d14d      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002694:	2102      	movs	r1, #2
 8002696:	1d20      	adds	r0, r4, #4
 8002698:	f7ff fd5a 	bl	8002150 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800269c:	2800      	cmp	r0, #0
 800269e:	bf18      	it	ne
 80026a0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	0411      	lsls	r1, r2, #16
 80026a6:	d509      	bpl.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a8:	4926      	ldr	r1, [pc, #152]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80026ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026b6:	4303      	orrs	r3, r0
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026bc:	03d3      	lsls	r3, r2, #15
 80026be:	d509      	bpl.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80026c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ce:	430b      	orrs	r3, r1
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80026d4:	4628      	mov	r0, r5
 80026d6:	b002      	add	sp, #8
 80026d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fd ff2a 	bl	8000534 <HAL_GetTick>
 80026e0:	1b40      	subs	r0, r0, r5
 80026e2:	4548      	cmp	r0, r9
 80026e4:	f67f aedc 	bls.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80026e8:	e700      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026ea:	4635      	mov	r5, r6
 80026ec:	e706      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ee:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026f2:	d19a      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f4:	2101      	movs	r1, #1
 80026f6:	1d20      	adds	r0, r4, #4
 80026f8:	f7ff fd2a 	bl	8002150 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80026fc:	2800      	cmp	r0, #0
 80026fe:	bf18      	it	ne
 8002700:	4605      	movne	r5, r0
 8002702:	e792      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002704:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002708:	d1a2      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800270a:	2101      	movs	r1, #1
 800270c:	1d20      	adds	r0, r4, #4
 800270e:	f7ff fd1f 	bl	8002150 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002712:	2800      	cmp	r0, #0
 8002714:	bf18      	it	ne
 8002716:	4605      	movne	r5, r0
 8002718:	e79a      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800271a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800271e:	d1aa      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002720:	2101      	movs	r1, #1
 8002722:	1d20      	adds	r0, r4, #4
 8002724:	f7ff fd14 	bl	8002150 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002728:	2800      	cmp	r0, #0
 800272a:	bf18      	it	ne
 800272c:	4605      	movne	r5, r0
 800272e:	e7a2      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x316>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002730:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002734:	d1b5      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002736:	2102      	movs	r1, #2
 8002738:	f104 0020 	add.w	r0, r4, #32
 800273c:	f7ff fd94 	bl	8002268 <RCCEx_PLLSAI2_Config>
 8002740:	e7ac      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002748:	4770      	bx	lr
	...

0800274c <HAL_RTC_AlarmIRQHandler>:
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_RTC_AlarmIRQHandler+0x6c>)
 800274e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
{
 8002752:	b510      	push	{r4, lr}
 8002754:	4604      	mov	r4, r0
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002756:	615a      	str	r2, [r3, #20]
  while(((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)) ||
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	04d2      	lsls	r2, r2, #19
 800275e:	d502      	bpl.n	8002766 <HAL_RTC_AlarmIRQHandler+0x1a>
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	05d0      	lsls	r0, r2, #23
 8002764:	d409      	bmi.n	800277a <HAL_RTC_AlarmIRQHandler+0x2e>
        ((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)))
 8002766:	689a      	ldr	r2, [r3, #8]
  while(((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)) ||
 8002768:	0491      	lsls	r1, r2, #18
 800276a:	d502      	bpl.n	8002772 <HAL_RTC_AlarmIRQHandler+0x26>
        ((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)))
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	0592      	lsls	r2, r2, #22
 8002770:	d403      	bmi.n	800277a <HAL_RTC_AlarmIRQHandler+0x2e>
  hrtc->State = HAL_RTC_STATE_READY;
 8002772:	2301      	movs	r3, #1
 8002774:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002778:	bd10      	pop	{r4, pc}
    if((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET))
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	04d1      	lsls	r1, r2, #19
 800277e:	d50a      	bpl.n	8002796 <HAL_RTC_AlarmIRQHandler+0x4a>
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	05d2      	lsls	r2, r2, #23
 8002784:	d507      	bpl.n	8002796 <HAL_RTC_AlarmIRQHandler+0x4a>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800278e:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ffd9 	bl	8002748 <HAL_RTC_AlarmAEventCallback>
    if((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET))
 8002796:	6822      	ldr	r2, [r4, #0]
 8002798:	6893      	ldr	r3, [r2, #8]
 800279a:	0498      	lsls	r0, r3, #18
 800279c:	d5dc      	bpl.n	8002758 <HAL_RTC_AlarmIRQHandler+0xc>
 800279e:	68d3      	ldr	r3, [r2, #12]
 80027a0:	0599      	lsls	r1, r3, #22
 80027a2:	d5d9      	bpl.n	8002758 <HAL_RTC_AlarmIRQHandler+0xc>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80027a4:	68d3      	ldr	r3, [r2, #12]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f463 7320 	orn	r3, r3, #640	; 0x280
 80027ac:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80027ae:	4620      	mov	r0, r4
 80027b0:	f000 face 	bl	8002d50 <HAL_RTCEx_AlarmBEventCallback>
 80027b4:	e7d0      	b.n	8002758 <HAL_RTC_AlarmIRQHandler+0xc>
 80027b6:	bf00      	nop
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027bc:	6802      	ldr	r2, [r0, #0]
{
 80027be:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027c0:	68d3      	ldr	r3, [r2, #12]
 80027c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c6:	60d3      	str	r3, [r2, #12]
{
 80027c8:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80027ca:	f7fd feb3 	bl	8000534 <HAL_GetTick>
 80027ce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	069b      	lsls	r3, r3, #26
 80027d6:	d501      	bpl.n	80027dc <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80027d8:	2000      	movs	r0, #0
 80027da:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80027dc:	f7fd feaa 	bl	8000534 <HAL_GetTick>
 80027e0:	1b40      	subs	r0, r0, r5
 80027e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80027e6:	d9f3      	bls.n	80027d0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80027e8:	2003      	movs	r0, #3
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}

080027ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80027ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027ee:	6803      	ldr	r3, [r0, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	0652      	lsls	r2, r2, #25
{
 80027f4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027f6:	d501      	bpl.n	80027fc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002802:	f7fd fe97 	bl	8000534 <HAL_GetTick>
 8002806:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	065b      	lsls	r3, r3, #25
 800280e:	d4f3      	bmi.n	80027f8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002810:	f7fd fe90 	bl	8000534 <HAL_GetTick>
 8002814:	1b40      	subs	r0, r0, r5
 8002816:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800281a:	d9f5      	bls.n	8002808 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800281c:	2003      	movs	r0, #3
}
 800281e:	bd38      	pop	{r3, r4, r5, pc}

08002820 <HAL_RTC_Init>:
{
 8002820:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002822:	4604      	mov	r4, r0
 8002824:	b1d8      	cbz	r0, 800285e <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002826:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800282a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800282e:	b91b      	cbnz	r3, 8002838 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8002830:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8002834:	f003 f844 	bl	80058c0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	22ca      	movs	r2, #202	; 0xca
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
 8002844:	2253      	movs	r2, #83	; 0x53
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff ffcf 	bl	80027ec <RTC_EnterInitMode>
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	4605      	mov	r5, r0
 8002852:	b130      	cbz	r0, 8002862 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002858:	2304      	movs	r3, #4
 800285a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800285e:	2501      	movs	r5, #1
 8002860:	e031      	b.n	80028c6 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002862:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002864:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002866:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800286a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002870:	6862      	ldr	r2, [r4, #4]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	4302      	orrs	r2, r0
 8002876:	69a0      	ldr	r0, [r4, #24]
 8002878:	4302      	orrs	r2, r0
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800287e:	68e2      	ldr	r2, [r4, #12]
 8002880:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68a1      	ldr	r1, [r4, #8]
 8002886:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800288a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002892:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	d405      	bmi.n	80028a6 <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ff8e 	bl	80027bc <HAL_RTC_WaitForSynchro>
 80028a0:	b108      	cbz	r0, 80028a6 <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	e7d6      	b.n	8002854 <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80028a6:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80028a8:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80028aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ac:	f022 0203 	bic.w	r2, r2, #3
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80028b2:	69e2      	ldr	r2, [r4, #28]
 80028b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028b6:	4302      	orrs	r2, r0
 80028b8:	430a      	orrs	r2, r1
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80028c6:	4628      	mov	r0, r5
 80028c8:	bd38      	pop	{r3, r4, r5, pc}

080028ca <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80028ca:	2300      	movs	r3, #0

  while(Value >= 10)
 80028cc:	2809      	cmp	r0, #9
 80028ce:	d803      	bhi.n	80028d8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80028d0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80028d4:	b2c0      	uxtb	r0, r0
 80028d6:	4770      	bx	lr
    Value -= 10;
 80028d8:	380a      	subs	r0, #10
    bcdhigh++;
 80028da:	3301      	adds	r3, #1
    Value -= 10;
 80028dc:	b2c0      	uxtb	r0, r0
 80028de:	e7f5      	b.n	80028cc <RTC_ByteToBcd2+0x2>

080028e0 <HAL_RTC_SetTime>:
{
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80028e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80028e6:	2b01      	cmp	r3, #1
{
 80028e8:	4606      	mov	r6, r0
 80028ea:	460f      	mov	r7, r1
 80028ec:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80028f0:	d033      	beq.n	800295a <HAL_RTC_SetTime+0x7a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	f880 3020 	strb.w	r3, [r0, #32]
 80028f8:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028fa:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 80028fe:	7808      	ldrb	r0, [r1, #0]
 8002900:	784d      	ldrb	r5, [r1, #1]
 8002902:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002904:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002906:	bb52      	cbnz	r2, 800295e <HAL_RTC_SetTime+0x7e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002908:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800290c:	bf08      	it	eq
 800290e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002910:	f7ff ffdb 	bl	80028ca <RTC_ByteToBcd2>
 8002914:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002916:	4628      	mov	r0, r5
 8002918:	f7ff ffd7 	bl	80028ca <RTC_ByteToBcd2>
 800291c:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800291e:	4620      	mov	r0, r4
 8002920:	f7ff ffd3 	bl	80028ca <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002924:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002926:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800292a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800292e:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002932:	6833      	ldr	r3, [r6, #0]
 8002934:	22ca      	movs	r2, #202	; 0xca
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
 8002938:	2253      	movs	r2, #83	; 0x53
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800293c:	4630      	mov	r0, r6
 800293e:	f7ff ff55 	bl	80027ec <RTC_EnterInitMode>
 8002942:	6833      	ldr	r3, [r6, #0]
 8002944:	4605      	mov	r5, r0
 8002946:	b1b8      	cbz	r0, 8002978 <HAL_RTC_SetTime+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002948:	22ff      	movs	r2, #255	; 0xff
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800294c:	2304      	movs	r3, #4
 800294e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002952:	2300      	movs	r3, #0
 8002954:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 8002958:	2501      	movs	r5, #1
}
 800295a:	4628      	mov	r0, r5
 800295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800295e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002962:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 8002966:	bf08      	it	eq
 8002968:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800296a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800296e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002970:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002972:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002976:	e7dc      	b.n	8002932 <HAL_RTC_SetTime+0x52>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002978:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800297c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002980:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002982:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002984:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800298a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	4302      	orrs	r2, r0
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	d40c      	bmi.n	80029be <HAL_RTC_SetTime+0xde>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029a4:	4630      	mov	r0, r6
 80029a6:	f7ff ff09 	bl	80027bc <HAL_RTC_WaitForSynchro>
 80029aa:	b140      	cbz	r0, 80029be <HAL_RTC_SetTime+0xde>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ac:	6833      	ldr	r3, [r6, #0]
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029b2:	2304      	movs	r3, #4
 80029b4:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80029b8:	f886 5020 	strb.w	r5, [r6, #32]
 80029bc:	e7cc      	b.n	8002958 <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029be:	6833      	ldr	r3, [r6, #0]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 80029ca:	2300      	movs	r3, #0
 80029cc:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 80029d0:	e7c3      	b.n	800295a <HAL_RTC_SetTime+0x7a>

080029d2 <HAL_RTC_SetDate>:
{
 80029d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80029d4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80029d8:	2b01      	cmp	r3, #1
{
 80029da:	4605      	mov	r5, r0
 80029dc:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 80029e0:	d034      	beq.n	8002a4c <HAL_RTC_SetDate+0x7a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029e8:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 80029ec:	784b      	ldrb	r3, [r1, #1]
 80029ee:	78c8      	ldrb	r0, [r1, #3]
 80029f0:	788e      	ldrb	r6, [r1, #2]
 80029f2:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d14e      	bne.n	8002a96 <HAL_RTC_SetDate+0xc4>
 80029f8:	06da      	lsls	r2, r3, #27
 80029fa:	d503      	bpl.n	8002a04 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029fc:	f023 0310 	bic.w	r3, r3, #16
 8002a00:	330a      	adds	r3, #10
 8002a02:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002a04:	f7ff ff61 	bl	80028ca <RTC_ByteToBcd2>
 8002a08:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002a0a:	7848      	ldrb	r0, [r1, #1]
 8002a0c:	f7ff ff5d 	bl	80028ca <RTC_ByteToBcd2>
 8002a10:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a12:	4630      	mov	r0, r6
 8002a14:	f7ff ff59 	bl	80028ca <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002a18:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002a1c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002a20:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	22ca      	movs	r2, #202	; 0xca
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
 8002a2a:	2253      	movs	r2, #83	; 0x53
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f7ff fedc 	bl	80027ec <RTC_EnterInitMode>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	4606      	mov	r6, r0
 8002a38:	b150      	cbz	r0, 8002a50 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002a44:	2300      	movs	r3, #0
 8002a46:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002a4a:	2601      	movs	r6, #1
}
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a50:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002a54:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002a58:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a60:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	069b      	lsls	r3, r3, #26
 8002a66:	d40c      	bmi.n	8002a82 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff fea7 	bl	80027bc <HAL_RTC_WaitForSynchro>
 8002a6e:	b140      	cbz	r0, 8002a82 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	22ff      	movs	r2, #255	; 0xff
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a76:	2304      	movs	r3, #4
 8002a78:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002a7c:	f885 6020 	strb.w	r6, [r5, #32]
 8002a80:	e7e3      	b.n	8002a4a <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	22ff      	movs	r2, #255	; 0xff
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 8002a94:	e7da      	b.n	8002a4c <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << 8) | \
 8002a96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002a98:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002a9c:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002a9e:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002aa2:	e7bf      	b.n	8002a24 <HAL_RTC_SetDate+0x52>

08002aa4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8002aa4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002aa8:	2b01      	cmp	r3, #1
{
 8002aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aae:	4604      	mov	r4, r0
 8002ab0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002ab4:	d067      	beq.n	8002b86 <HAL_RTC_SetAlarm_IT+0xe2>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f884 3020 	strb.w	r3, [r4, #32]
 8002abc:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002abe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8002ac2:	7808      	ldrb	r0, [r1, #0]
 8002ac4:	f891 9001 	ldrb.w	r9, [r1, #1]
 8002ac8:	788d      	ldrb	r5, [r1, #2]
 8002aca:	f891 8020 	ldrb.w	r8, [r1, #32]
 8002ace:	69ce      	ldr	r6, [r1, #28]
 8002ad0:	694f      	ldr	r7, [r1, #20]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ad2:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d158      	bne.n	8002b8a <HAL_RTC_SetAlarm_IT+0xe6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ad8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002adc:	bf08      	it	eq
 8002ade:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002ae0:	f7ff fef3 	bl	80028ca <RTC_ByteToBcd2>
 8002ae4:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8002ae6:	4648      	mov	r0, r9
 8002ae8:	f7ff feef 	bl	80028ca <RTC_ByteToBcd2>
 8002aec:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002aee:	4628      	mov	r0, r5
 8002af0:	f7ff feeb 	bl	80028ca <RTC_ByteToBcd2>
 8002af4:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8002af6:	4640      	mov	r0, r8
 8002af8:	f7ff fee7 	bl	80028ca <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002afc:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002afe:	433e      	orrs	r6, r7
 8002b00:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8002b04:	ea45 0509 	orr.w	r5, r5, r9
 8002b08:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8002b0c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8002b10:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b14:	698b      	ldr	r3, [r1, #24]
 8002b16:	684e      	ldr	r6, [r1, #4]
 8002b18:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	22ca      	movs	r2, #202	; 0xca
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b20:	2253      	movs	r2, #83	; 0x53
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002b24:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002b26:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b2a:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002b2c:	d14f      	bne.n	8002bce <HAL_RTC_SetAlarm_IT+0x12a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b32:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b3c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002b3e:	f7fd fcf9 	bl	8000534 <HAL_GetTick>
 8002b42:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	68df      	ldr	r7, [r3, #12]
 8002b48:	f017 0701 	ands.w	r7, r7, #1
 8002b4c:	d02e      	beq.n	8002bac <HAL_RTC_SetAlarm_IT+0x108>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b4e:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b50:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b58:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b60:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RTC_SetAlarm_IT+0x170>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b6a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b72:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002b7a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8002b82:	f884 0020 	strb.w	r0, [r4, #32]
}
 8002b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b8a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002b8e:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002b92:	bf08      	it	eq
 8002b94:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002b96:	4335      	orrs	r5, r6
 8002b98:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002b9c:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002b9e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8002ba2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002ba6:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 8002baa:	e7b3      	b.n	8002b14 <HAL_RTC_SetAlarm_IT+0x70>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bac:	f7fd fcc2 	bl	8000534 <HAL_GetTick>
 8002bb0:	eba0 0008 	sub.w	r0, r0, r8
 8002bb4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bb8:	d9c4      	bls.n	8002b44 <HAL_RTC_SetAlarm_IT+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bbe:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002bc6:	f884 7020 	strb.w	r7, [r4, #32]
        return HAL_TIMEOUT;
 8002bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002bce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002bdc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002bde:	f7fd fca9 	bl	8000534 <HAL_GetTick>
 8002be2:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	68df      	ldr	r7, [r3, #12]
 8002be8:	f017 0702 	ands.w	r7, r7, #2
 8002bec:	d009      	beq.n	8002c02 <HAL_RTC_SetAlarm_IT+0x15e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002bee:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002bf0:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c00:	e7ae      	b.n	8002b60 <HAL_RTC_SetAlarm_IT+0xbc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c02:	f7fd fc97 	bl	8000534 <HAL_GetTick>
 8002c06:	eba0 0008 	sub.w	r0, r0, r8
 8002c0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c0e:	d9e9      	bls.n	8002be4 <HAL_RTC_SetAlarm_IT+0x140>
 8002c10:	e7d3      	b.n	8002bba <HAL_RTC_SetAlarm_IT+0x116>
 8002c12:	bf00      	nop
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002c18:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c1c:	2b01      	cmp	r3, #1
{
 8002c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	460e      	mov	r6, r1
 8002c26:	4615      	mov	r5, r2
 8002c28:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002c2c:	d03f      	beq.n	8002cae <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c34:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c36:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3a:	22ca      	movs	r2, #202	; 0xca
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c3e:	2253      	movs	r2, #83	; 0x53
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	055a      	lsls	r2, r3, #21
 8002c46:	d434      	bmi.n	8002cb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	6893      	ldr	r3, [r2, #8]
 8002c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c50:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c52:	68d3      	ldr	r3, [r2, #12]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002c5a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002c5c:	f7fd fc6a 	bl	8000534 <HAL_GetTick>
 8002c60:	4680      	mov	r8, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	68df      	ldr	r7, [r3, #12]
 8002c66:	f017 0704 	ands.w	r7, r7, #4
 8002c6a:	d03a      	beq.n	8002ce2 <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c6c:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	f022 0207 	bic.w	r2, r2, #7
 8002c74:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4315      	orrs	r5, r2

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c7a:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c7c:	609d      	str	r5, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c7e:	6811      	ldr	r1, [r2, #0]
 8002c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c84:	6011      	str	r1, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002c86:	6891      	ldr	r1, [r2, #8]
 8002c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c8c:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c94:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c9e:	22ff      	movs	r2, #255	; 0xff
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ca2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8002caa:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8002cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8002cb2:	f7fd fc3f 	bl	8000534 <HAL_GetTick>
 8002cb6:	4607      	mov	r7, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	075b      	lsls	r3, r3, #29
 8002cbe:	d5c3      	bpl.n	8002c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cc0:	f7fd fc38 	bl	8000534 <HAL_GetTick>
 8002cc4:	1bc0      	subs	r0, r0, r7
 8002cc6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cca:	d9f5      	bls.n	8002cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cd2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hrtc);
 8002cd4:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cd6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002cda:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ce2:	f7fd fc27 	bl	8000534 <HAL_GetTick>
 8002ce6:	eba0 0008 	sub.w	r0, r0, r8
 8002cea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cee:	d9b8      	bls.n	8002c62 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002cf4:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002cf8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8002cfc:	f884 7020 	strb.w	r7, [r4, #32]
      return HAL_TIMEOUT;
 8002d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8002d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 8002d12:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d14:	615a      	str	r2, [r3, #20]
  
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002d16:	6802      	ldr	r2, [r0, #0]
 8002d18:	68d3      	ldr	r3, [r2, #12]
 8002d1a:	055b      	lsls	r3, r3, #21
{
 8002d1c:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002d1e:	d506      	bpl.n	8002d2e <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {   
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d20:	68d3      	ldr	r3, [r2, #12]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002d28:	60d3      	str	r3, [r2, #12]

    /* WAKEUPTIMER callback */ 
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d2a:	f7ff ffed 	bl	8002d08 <HAL_RTCEx_WakeUpTimerEventCallback>
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	bf00      	nop
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002d40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002d44:	4770      	bx	lr

08002d46 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002d46:	6803      	ldr	r3, [r0, #0]
 8002d48:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002d4a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d50:	4770      	bx	lr

08002d52 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d52:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d54:	4604      	mov	r4, r0
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d04a      	beq.n	8002df0 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d66:	b91b      	cbnz	r3, 8002d70 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d68:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d6c:	f002 fe1c 	bl	80059a8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d70:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d72:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002d78:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d7a:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d80:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d8a:	d92e      	bls.n	8002dea <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d8c:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d8e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d92:	bf18      	it	ne
 8002d94:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d98:	b92b      	cbnz	r3, 8002da6 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d9a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002d9e:	bf8c      	ite	hi
 8002da0:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002da2:	2301      	movls	r3, #1
 8002da4:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002da6:	68a6      	ldr	r6, [r4, #8]
 8002da8:	6863      	ldr	r3, [r4, #4]
 8002daa:	69a5      	ldr	r5, [r4, #24]
 8002dac:	4333      	orrs	r3, r6
 8002dae:	6926      	ldr	r6, [r4, #16]
 8002db0:	4333      	orrs	r3, r6
 8002db2:	6966      	ldr	r6, [r4, #20]
 8002db4:	4333      	orrs	r3, r6
 8002db6:	69e6      	ldr	r6, [r4, #28]
 8002db8:	4333      	orrs	r3, r6
 8002dba:	6a26      	ldr	r6, [r4, #32]
 8002dbc:	4333      	orrs	r3, r6
 8002dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dc0:	4333      	orrs	r3, r6
 8002dc2:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002dc6:	4333      	orrs	r3, r6
 8002dc8:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dd0:	0c2d      	lsrs	r5, r5, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	f005 0504 	and.w	r5, r5, #4
 8002dd8:	432a      	orrs	r2, r5
 8002dda:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8002ddc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dde:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002de0:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002de4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002dee:	e7d0      	b.n	8002d92 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
}
 8002df2:	bd70      	pop	{r4, r5, r6, pc}

08002df4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002e06:	2000      	movs	r0, #0
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_IC_MspInit>:
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_OC_DelayElapsedCallback>:
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIM_IC_CaptureCallback>:
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_TriggerCallback>:
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	0791      	lsls	r1, r2, #30
{
 8002e1a:	b510      	push	{r4, lr}
 8002e1c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e1e:	d50e      	bpl.n	8002e3e <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	0792      	lsls	r2, r2, #30
 8002e24:	d50b      	bpl.n	8002e3e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e26:	f06f 0202 	mvn.w	r2, #2
 8002e2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002e2c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002e30:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002e34:	d077      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	f7ff ffea 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	0750      	lsls	r0, r2, #29
 8002e44:	d510      	bpl.n	8002e68 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	0751      	lsls	r1, r2, #29
 8002e4a:	d50d      	bpl.n	8002e68 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002e52:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e54:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002e56:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5a:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002e5e:	d068      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e60:	f7ff ffd5 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e64:	2300      	movs	r3, #0
 8002e66:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	0712      	lsls	r2, r2, #28
 8002e6e:	d50f      	bpl.n	8002e90 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	0710      	lsls	r0, r2, #28
 8002e74:	d50c      	bpl.n	8002e90 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e76:	f06f 0208 	mvn.w	r2, #8
 8002e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002e7c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002e80:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e82:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002e86:	d05a      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e88:	f7ff ffc1 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	06d2      	lsls	r2, r2, #27
 8002e96:	d510      	bpl.n	8002eba <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	06d0      	lsls	r0, r2, #27
 8002e9c:	d50d      	bpl.n	8002eba <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e9e:	f06f 0210 	mvn.w	r2, #16
 8002ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002ea4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002ea8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eac:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002eb0:	d04b      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	f7ff ffac 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	07d1      	lsls	r1, r2, #31
 8002ec0:	d508      	bpl.n	8002ed4 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	07d2      	lsls	r2, r2, #31
 8002ec6:	d505      	bpl.n	8002ed4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ec8:	f06f 0201 	mvn.w	r2, #1
 8002ecc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f002 fc76 	bl	80057c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	0610      	lsls	r0, r2, #24
 8002eda:	d508      	bpl.n	8002eee <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	0611      	lsls	r1, r2, #24
 8002ee0:	d505      	bpl.n	8002eee <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ee6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f000 fa74 	bl	80033d6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	0652      	lsls	r2, r2, #25
 8002ef4:	d508      	bpl.n	8002f08 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	0650      	lsls	r0, r2, #25
 8002efa:	d505      	bpl.n	8002f08 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff ff85 	bl	8002e12 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	0691      	lsls	r1, r2, #26
 8002f0e:	d522      	bpl.n	8002f56 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	0692      	lsls	r2, r2, #26
 8002f14:	d51f      	bpl.n	8002f56 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002f1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f1c:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002f22:	f000 ba57 	b.w	80033d4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	f7ff ff71 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff ff70 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f30:	e783      	b.n	8002e3a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	f7ff ff6b 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff6a 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f3c:	e792      	b.n	8002e64 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	f7ff ff65 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ff64 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f48:	e7a0      	b.n	8002e8c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	f7ff ff5f 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff ff5e 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f54:	e7af      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xa2>
 8002f56:	bd10      	pop	{r4, pc}

08002f58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002f5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	4290      	cmp	r0, r2
 8002f5e:	d012      	beq.n	8002f86 <TIM_Base_SetConfig+0x2e>
 8002f60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0x2e>
 8002f66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0x2e>
 8002f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f72:	4290      	cmp	r0, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0x2e>
 8002f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f7a:	4290      	cmp	r0, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0x2e>
 8002f7e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002f82:	4290      	cmp	r0, r2
 8002f84:	d119      	bne.n	8002fba <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002f86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8e:	4a23      	ldr	r2, [pc, #140]	; (800301c <TIM_Base_SetConfig+0xc4>)
 8002f90:	4290      	cmp	r0, r2
 8002f92:	d01d      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002f94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f98:	d01a      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002f9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f9e:	4290      	cmp	r0, r2
 8002fa0:	d016      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d012      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fae:	4290      	cmp	r0, r2
 8002fb0:	d00e      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002fb2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002fb6:	4290      	cmp	r0, r2
 8002fb8:	d00a      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002fba:	4a19      	ldr	r2, [pc, #100]	; (8003020 <TIM_Base_SetConfig+0xc8>)
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	d007      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fc4:	4290      	cmp	r0, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0x78>
 8002fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fcc:	4290      	cmp	r0, r2
 8002fce:	d103      	bne.n	8002fd8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002fd8:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002fde:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002fe0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe2:	688b      	ldr	r3, [r1, #8]
 8002fe4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002fe6:	680b      	ldr	r3, [r1, #0]
 8002fe8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <TIM_Base_SetConfig+0xc4>)
 8002fec:	4298      	cmp	r0, r3
 8002fee:	d00f      	beq.n	8003010 <TIM_Base_SetConfig+0xb8>
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	d00b      	beq.n	8003010 <TIM_Base_SetConfig+0xb8>
 8002ff8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002ffc:	4298      	cmp	r0, r3
 8002ffe:	d007      	beq.n	8003010 <TIM_Base_SetConfig+0xb8>
 8003000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003004:	4298      	cmp	r0, r3
 8003006:	d003      	beq.n	8003010 <TIM_Base_SetConfig+0xb8>
 8003008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300c:	4298      	cmp	r0, r3
 800300e:	d101      	bne.n	8003014 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003010:	690b      	ldr	r3, [r1, #16]
 8003012:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003014:	2301      	movs	r3, #1
 8003016:	6143      	str	r3, [r0, #20]
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40014000 	.word	0x40014000

08003024 <HAL_TIM_Base_Init>:
{
 8003024:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003026:	4604      	mov	r4, r0
 8003028:	b1a0      	cbz	r0, 8003054 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800302a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800302e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003032:	b91b      	cbnz	r3, 800303c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003034:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003038:	f002 fe48 	bl	8005ccc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	1d21      	adds	r1, r4, #4
 8003046:	f7ff ff87 	bl	8002f58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800304a:	2301      	movs	r3, #1
 800304c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003050:	2000      	movs	r0, #0
 8003052:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003054:	2001      	movs	r0, #1
}
 8003056:	bd10      	pop	{r4, pc}

08003058 <HAL_TIM_IC_Init>:
{
 8003058:	b510      	push	{r4, lr}
  if(htim == NULL)
 800305a:	4604      	mov	r4, r0
 800305c:	b1a0      	cbz	r0, 8003088 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800305e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003066:	b91b      	cbnz	r3, 8003070 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003068:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800306c:	f7ff fecd 	bl	8002e0a <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003070:	2302      	movs	r3, #2
 8003072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	1d21      	adds	r1, r4, #4
 800307a:	f7ff ff6d 	bl	8002f58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800307e:	2301      	movs	r3, #1
 8003080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
}
 800308a:	bd10      	pop	{r4, pc}

0800308c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800308c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003090:	4e18      	ldr	r6, [pc, #96]	; (80030f4 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003092:	f024 0401 	bic.w	r4, r4, #1
 8003096:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003098:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800309a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800309c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800309e:	d016      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030a4:	d013      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030a6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80030aa:	42b0      	cmp	r0, r6
 80030ac:	d00f      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80030b2:	42b0      	cmp	r0, r6
 80030b4:	d00b      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80030ba:	42b0      	cmp	r0, r6
 80030bc:	d007      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030be:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 80030c2:	42b0      	cmp	r0, r6
 80030c4:	d003      	beq.n	80030ce <TIM_TI1_SetConfig+0x42>
 80030c6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80030ca:	42b0      	cmp	r0, r6
 80030cc:	d10f      	bne.n	80030ee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030ce:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80030d2:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80030d4:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80030da:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030dc:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030e0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80030e4:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030e6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030ea:	6201      	str	r1, [r0, #32]
}
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030ee:	f044 0201 	orr.w	r2, r4, #1
 80030f2:	e7ef      	b.n	80030d4 <TIM_TI1_SetConfig+0x48>
 80030f4:	40012c00 	.word	0x40012c00

080030f8 <HAL_TIM_IC_ConfigChannel>:
{
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80030fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
{
 8003100:	4604      	mov	r4, r0
 8003102:	460d      	mov	r5, r1
 8003104:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003108:	d019      	beq.n	800313e <HAL_TIM_IC_ConfigChannel+0x46>
 800310a:	2301      	movs	r3, #1
 800310c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8003114:	b9a2      	cbnz	r2, 8003140 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8003116:	68cb      	ldr	r3, [r1, #12]
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	c906      	ldmia	r1, {r1, r2}
 800311c:	f7ff ffb6 	bl	800308c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003120:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003122:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	f022 020c 	bic.w	r2, r2, #12
 800312a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	430a      	orrs	r2, r1
 8003130:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003132:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003134:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003136:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800313a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003140:	2a04      	cmp	r2, #4
 8003142:	688e      	ldr	r6, [r1, #8]
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	68e8      	ldr	r0, [r5, #12]
 8003148:	c982      	ldmia	r1, {r1, r7}
 800314a:	d11f      	bne.n	800318c <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314c:	6a1a      	ldr	r2, [r3, #32]
 800314e:	f022 0210 	bic.w	r2, r2, #16
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8003156:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003158:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 800315c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8003160:	0300      	lsls	r0, r0, #12
 8003162:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003164:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003168:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 800316a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800316c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003170:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003174:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003178:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003180:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003188:	619e      	str	r6, [r3, #24]
 800318a:	e7d2      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 800318c:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800318e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003190:	d11c      	bne.n	80031cc <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003196:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003198:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 800319a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800319c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 80031a0:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 80031a2:	0100      	lsls	r0, r0, #4
 80031a4:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031aa:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 80031ac:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031ae:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031b2:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031b6:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031ba:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	f022 020c 	bic.w	r2, r2, #12
 80031c2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 80031c8:	61de      	str	r6, [r3, #28]
 80031ca:	e7b2      	b.n	8003132 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031d2:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80031d4:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80031d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
 80031da:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80031de:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031e0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80031e4:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031e6:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80031e8:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031ea:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031ee:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031f2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031f4:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031f6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031fe:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003206:	e7df      	b.n	80031c8 <HAL_TIM_IC_ConfigChannel+0xd0>

08003208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003208:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800320a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800320c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003212:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003216:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003218:	6083      	str	r3, [r0, #8]
 800321a:	bd10      	pop	{r4, pc}

0800321c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800321c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
{
 8003222:	b570      	push	{r4, r5, r6, lr}
 8003224:	4604      	mov	r4, r0
 8003226:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800322a:	d01a      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003230:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003232:	2301      	movs	r3, #1
 8003234:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003238:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800323a:	4b52      	ldr	r3, [pc, #328]	; (8003384 <HAL_TIM_ConfigClockSource+0x168>)
 800323c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800323e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003240:	680b      	ldr	r3, [r1, #0]
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d075      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x116>
 8003246:	d818      	bhi.n	800327a <HAL_TIM_ConfigClockSource+0x5e>
 8003248:	2b10      	cmp	r3, #16
 800324a:	f000 808f 	beq.w	800336c <HAL_TIM_ConfigClockSource+0x150>
 800324e:	d809      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x48>
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8085 	beq.w	8003360 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8003256:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003258:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800325a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800325e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003264:	2b20      	cmp	r3, #32
 8003266:	f000 8087 	beq.w	8003378 <HAL_TIM_ConfigClockSource+0x15c>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d1f3      	bne.n	8003256 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800326e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003274:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003278:	e033      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800327a:	2b70      	cmp	r3, #112	; 0x70
 800327c:	d033      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xca>
 800327e:	d81b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x9c>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d03f      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0xe8>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d1e6      	bne.n	8003256 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003288:	684d      	ldr	r5, [r1, #4]
 800328a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328c:	6a01      	ldr	r1, [r0, #32]
 800328e:	f021 0110 	bic.w	r1, r1, #16
 8003292:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003294:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003296:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003298:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80032a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 80032a4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80032a8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80032aa:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80032ac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80032b2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80032b6:	e014      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d00c      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xbc>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d1c8      	bne.n	8003256 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 80032c4:	68cb      	ldr	r3, [r1, #12]
 80032c6:	684a      	ldr	r2, [r1, #4]
 80032c8:	6889      	ldr	r1, [r1, #8]
 80032ca:	f7ff ff9d 	bl	8003208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	6893      	ldr	r3, [r2, #8]
 80032d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d6:	e013      	b.n	8003300 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80032d8:	6883      	ldr	r3, [r0, #8]
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80032e2:	6083      	str	r3, [r0, #8]
 80032e4:	e7b7      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	68cb      	ldr	r3, [r1, #12]
 80032e8:	684a      	ldr	r2, [r1, #4]
 80032ea:	6889      	ldr	r1, [r1, #8]
 80032ec:	f7ff ff8c 	bl	8003208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003300:	6093      	str	r3, [r2, #8]
    break;
 8003302:	e7a8      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003304:	684a      	ldr	r2, [r1, #4]
 8003306:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003308:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	6a05      	ldr	r5, [r0, #32]
 800330c:	f025 0501 	bic.w	r5, r5, #1
 8003310:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003312:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003314:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800331c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003320:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003322:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003324:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8003326:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800332c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003330:	e7d7      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	684a      	ldr	r2, [r1, #4]
 8003334:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003336:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003338:	6a05      	ldr	r5, [r0, #32]
 800333a:	f025 0501 	bic.w	r5, r5, #1
 800333e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003340:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003342:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800334a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800334e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003350:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003352:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8003354:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800335a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800335e:	e7c0      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8003360:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003366:	f043 0307 	orr.w	r3, r3, #7
 800336a:	e7ba      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800336c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003372:	f043 0317 	orr.w	r3, r3, #23
 8003376:	e7b4      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8003378:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800337e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8003382:	e7ae      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0xc6>
 8003384:	fffe0088 	.word	0xfffe0088

08003388 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003388:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
{
 800338e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003390:	d01c      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003392:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003394:	4d0e      	ldr	r5, [pc, #56]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003396:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003398:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800339a:	42aa      	cmp	r2, r5
 800339c:	d003      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800339e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80033a2:	42aa      	cmp	r2, r5
 80033a4:	d103      	bne.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033a6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ac:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ae:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033b8:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033bc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033be:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80033c0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80033c2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80033c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80033cc:	2002      	movs	r0, #2
}
 80033ce:	bd30      	pop	{r4, r5, pc}
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <HAL_TIMEx_CommutationCallback>:
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	4770      	bx	lr

080033d8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80033d8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033da:	69c1      	ldr	r1, [r0, #28]
{
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e0:	6883      	ldr	r3, [r0, #8]
 80033e2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e6:	4303      	orrs	r3, r0
 80033e8:	6960      	ldr	r0, [r4, #20]
 80033ea:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ec:	48ba      	ldr	r0, [pc, #744]	; (80036d8 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ee:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f0:	4028      	ands	r0, r5
 80033f2:	4303      	orrs	r3, r0
 80033f4:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f6:	6853      	ldr	r3, [r2, #4]
 80033f8:	68e0      	ldr	r0, [r4, #12]
 80033fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033fe:	4303      	orrs	r3, r0
 8003400:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003402:	4bb6      	ldr	r3, [pc, #728]	; (80036dc <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003404:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003406:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003408:	bf1c      	itt	ne
 800340a:	6a23      	ldrne	r3, [r4, #32]
 800340c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800340e:	6893      	ldr	r3, [r2, #8]
 8003410:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003414:	4303      	orrs	r3, r0
 8003416:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003418:	4bb1      	ldr	r3, [pc, #708]	; (80036e0 <UART_SetConfig+0x308>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d119      	bne.n	8003452 <UART_SetConfig+0x7a>
 800341e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003422:	4ab0      	ldr	r2, [pc, #704]	; (80036e4 <UART_SetConfig+0x30c>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	f040 8138 	bne.w	80036a6 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8003436:	2b08      	cmp	r3, #8
 8003438:	f200 808f 	bhi.w	800355a <UART_SetConfig+0x182>
 800343c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003440:	00ca011a 	.word	0x00ca011a
 8003444:	008d00f9 	.word	0x008d00f9
 8003448:	008d0114 	.word	0x008d0114
 800344c:	008d008d 	.word	0x008d008d
 8003450:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003452:	4ba5      	ldr	r3, [pc, #660]	; (80036e8 <UART_SetConfig+0x310>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d107      	bne.n	8003468 <UART_SetConfig+0x90>
 8003458:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800345c:	4aa3      	ldr	r2, [pc, #652]	; (80036ec <UART_SetConfig+0x314>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	e7e1      	b.n	800342c <UART_SetConfig+0x54>
 8003468:	4ba1      	ldr	r3, [pc, #644]	; (80036f0 <UART_SetConfig+0x318>)
 800346a:	429a      	cmp	r2, r3
 800346c:	d123      	bne.n	80034b6 <UART_SetConfig+0xde>
 800346e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800347a:	2b10      	cmp	r3, #16
 800347c:	f000 80f1 	beq.w	8003662 <UART_SetConfig+0x28a>
 8003480:	d80b      	bhi.n	800349a <UART_SetConfig+0xc2>
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80f3 	beq.w	800366e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 800348c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003490:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003494:	f000 80f8 	beq.w	8003688 <UART_SetConfig+0x2b0>
 8003498:	e0a8      	b.n	80035ec <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349a:	2b20      	cmp	r3, #32
 800349c:	f000 80c6 	beq.w	800362c <UART_SetConfig+0x254>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d1f1      	bne.n	8003488 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034a8:	f040 80b8 	bne.w	800361c <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034ac:	6860      	ldr	r0, [r4, #4]
 80034ae:	0843      	lsrs	r3, r0, #1
 80034b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80034b4:	e0c3      	b.n	800363e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b6:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <UART_SetConfig+0x31c>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d11e      	bne.n	80034fa <UART_SetConfig+0x122>
 80034bc:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	f000 80bb 	beq.w	8003644 <UART_SetConfig+0x26c>
 80034ce:	d80a      	bhi.n	80034e6 <UART_SetConfig+0x10e>
 80034d0:	b97b      	cbnz	r3, 80034f2 <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80034d2:	4b82      	ldr	r3, [pc, #520]	; (80036dc <UART_SetConfig+0x304>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 80ca 	bne.w	800366e <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80034da:	f7fe fdfb 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
      break;
 80034de:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80034e0:	bbb0      	cbnz	r0, 8003550 <UART_SetConfig+0x178>
 80034e2:	4602      	mov	r2, r0
 80034e4:	e03a      	b.n	800355c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	f000 809d 	beq.w	8003626 <UART_SetConfig+0x24e>
 80034ec:	2bc0      	cmp	r3, #192	; 0xc0
 80034ee:	f000 80b0 	beq.w	8003652 <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80034f2:	4b7a      	ldr	r3, [pc, #488]	; (80036dc <UART_SetConfig+0x304>)
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1c7      	bne.n	8003488 <UART_SetConfig+0xb0>
 80034f8:	e02f      	b.n	800355a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <UART_SetConfig+0x320>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d111      	bne.n	8003524 <UART_SetConfig+0x14c>
 8003500:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	f000 8098 	beq.w	8003644 <UART_SetConfig+0x26c>
 8003514:	d9dc      	bls.n	80034d0 <UART_SetConfig+0xf8>
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	f000 8084 	beq.w	8003626 <UART_SetConfig+0x24e>
 800351e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003522:	e7e4      	b.n	80034ee <UART_SetConfig+0x116>
 8003524:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <UART_SetConfig+0x304>)
 8003526:	429a      	cmp	r2, r3
 8003528:	d1ae      	bne.n	8003488 <UART_SetConfig+0xb0>
 800352a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	f000 8083 	beq.w	8003644 <UART_SetConfig+0x26c>
 800353e:	d9c7      	bls.n	80034d0 <UART_SetConfig+0xf8>
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d06f      	beq.n	8003626 <UART_SetConfig+0x24e>
 8003546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354a:	e7d0      	b.n	80034ee <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800354c:	486b      	ldr	r0, [pc, #428]	; (80036fc <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 800354e:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8003550:	6862      	ldr	r2, [r4, #4]
 8003552:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003556:	4281      	cmp	r1, r0
 8003558:	d905      	bls.n	8003566 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800355a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003560:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8003562:	4610      	mov	r0, r2
 8003564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8003566:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800356a:	d8f6      	bhi.n	800355a <UART_SetConfig+0x182>
        switch (clocksource)
 800356c:	2b08      	cmp	r3, #8
 800356e:	d82e      	bhi.n	80035ce <UART_SetConfig+0x1f6>
 8003570:	e8df f003 	tbb	[pc, r3]
 8003574:	2d1c2d05 	.word	0x2d1c2d05
 8003578:	2d2d2d24 	.word	0x2d2d2d24
 800357c:	27          	.byte	0x27
 800357d:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800357e:	f7fe fda9 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003582:	6862      	ldr	r2, [r4, #4]
 8003584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003588:	0856      	lsrs	r6, r2, #1
 800358a:	2700      	movs	r7, #0
 800358c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003590:	2300      	movs	r3, #0
 8003592:	4630      	mov	r0, r6
 8003594:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003596:	f7fc fe2b 	bl	80001f0 <__aeabi_uldivmod>
          break;
 800359a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800359c:	4b58      	ldr	r3, [pc, #352]	; (8003700 <UART_SetConfig+0x328>)
 800359e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80035a2:	4299      	cmp	r1, r3
 80035a4:	d8d9      	bhi.n	800355a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	60d8      	str	r0, [r3, #12]
 80035aa:	e7d7      	b.n	800355c <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80035ac:	4855      	ldr	r0, [pc, #340]	; (8003704 <UART_SetConfig+0x32c>)
 80035ae:	0855      	lsrs	r5, r2, #1
 80035b0:	2300      	movs	r3, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035b6:	f141 0100 	adc.w	r1, r1, #0
 80035ba:	e7ec      	b.n	8003596 <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035bc:	f7fe fa06 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 80035c0:	e7df      	b.n	8003582 <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035c2:	0850      	lsrs	r0, r2, #1
 80035c4:	2100      	movs	r1, #0
 80035c6:	2300      	movs	r3, #0
 80035c8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80035cc:	e7f3      	b.n	80035b6 <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 80035ce:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80035d0:	2000      	movs	r0, #0
 80035d2:	e7e3      	b.n	800359c <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035d4:	f7fe fd8e 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 80035d8:	e04e      	b.n	8003678 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035da:	f7fe fd7b 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035de:	6862      	ldr	r2, [r4, #4]
 80035e0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80035e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ea:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ec:	f1a3 0010 	sub.w	r0, r3, #16
 80035f0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80035f4:	4288      	cmp	r0, r1
 80035f6:	d8b0      	bhi.n	800355a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80035f8:	6821      	ldr	r1, [r4, #0]
 80035fa:	60cb      	str	r3, [r1, #12]
 80035fc:	e7ae      	b.n	800355c <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035fe:	f7fe fd79 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8003602:	e7ec      	b.n	80035de <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003604:	6860      	ldr	r0, [r4, #4]
 8003606:	0843      	lsrs	r3, r0, #1
 8003608:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800360c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003610:	fbb3 f3f0 	udiv	r3, r3, r0
 8003614:	e7e8      	b.n	80035e8 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003616:	f7fe f9d9 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800361a:	e7e0      	b.n	80035de <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800361c:	6860      	ldr	r0, [r4, #4]
 800361e:	0843      	lsrs	r3, r0, #1
 8003620:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003624:	e7f4      	b.n	8003610 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8003626:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <UART_SetConfig+0x304>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d08f      	beq.n	800354c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003630:	d1e8      	bne.n	8003604 <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003632:	6860      	ldr	r0, [r4, #4]
 8003634:	0843      	lsrs	r3, r0, #1
 8003636:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800363a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800363e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003642:	e01f      	b.n	8003684 <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <UART_SetConfig+0x304>)
 8003646:	429a      	cmp	r2, r3
 8003648:	d10b      	bne.n	8003662 <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800364a:	f7fe f9bf 	bl	80019cc <HAL_RCC_GetSysClockFreq>
      break;
 800364e:	2304      	movs	r3, #4
 8003650:	e746      	b.n	80034e0 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <UART_SetConfig+0x304>)
 8003654:	429a      	cmp	r2, r3
 8003656:	f47f af25 	bne.w	80034a4 <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800365a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 800365e:	2308      	movs	r3, #8
 8003660:	e776      	b.n	8003550 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003666:	d1d6      	bne.n	8003616 <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003668:	f7fe f9b0 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800366c:	e004      	b.n	8003678 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003672:	d1b2      	bne.n	80035da <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003674:	f7fe fd2e 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003678:	6861      	ldr	r1, [r4, #4]
 800367a:	084a      	lsrs	r2, r1, #1
 800367c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003680:	fbb3 f3f1 	udiv	r3, r3, r1
 8003684:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003686:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003688:	f1a3 0010 	sub.w	r0, r3, #16
 800368c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003690:	4288      	cmp	r0, r1
 8003692:	f63f af62 	bhi.w	800355a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003696:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800369a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800369c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60c3      	str	r3, [r0, #12]
 80036a4:	e75a      	b.n	800355c <UART_SetConfig+0x184>
    switch (clocksource)
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	f63f af57 	bhi.w	800355a <UART_SetConfig+0x182>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x2dc>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080035db 	.word	0x080035db
 80036b8:	080035ff 	.word	0x080035ff
 80036bc:	08003605 	.word	0x08003605
 80036c0:	0800355b 	.word	0x0800355b
 80036c4:	08003617 	.word	0x08003617
 80036c8:	0800355b 	.word	0x0800355b
 80036cc:	0800355b 	.word	0x0800355b
 80036d0:	0800355b 	.word	0x0800355b
 80036d4:	0800361d 	.word	0x0800361d
 80036d8:	efff69f3 	.word	0xefff69f3
 80036dc:	40008000 	.word	0x40008000
 80036e0:	40013800 	.word	0x40013800
 80036e4:	080063dc 	.word	0x080063dc
 80036e8:	40004400 	.word	0x40004400
 80036ec:	080063e0 	.word	0x080063e0
 80036f0:	40004800 	.word	0x40004800
 80036f4:	40004c00 	.word	0x40004c00
 80036f8:	40005000 	.word	0x40005000
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	000ffcff 	.word	0x000ffcff
 8003704:	f4240000 	.word	0xf4240000

08003708 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003708:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800370a:	07da      	lsls	r2, r3, #31
{
 800370c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800370e:	d506      	bpl.n	800371e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003710:	6801      	ldr	r1, [r0, #0]
 8003712:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003714:	684a      	ldr	r2, [r1, #4]
 8003716:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800371a:	4322      	orrs	r2, r4
 800371c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371e:	079c      	lsls	r4, r3, #30
 8003720:	d506      	bpl.n	8003730 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003722:	6801      	ldr	r1, [r0, #0]
 8003724:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003726:	684a      	ldr	r2, [r1, #4]
 8003728:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800372c:	4322      	orrs	r2, r4
 800372e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003730:	0759      	lsls	r1, r3, #29
 8003732:	d506      	bpl.n	8003742 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003734:	6801      	ldr	r1, [r0, #0]
 8003736:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003738:	684a      	ldr	r2, [r1, #4]
 800373a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800373e:	4322      	orrs	r2, r4
 8003740:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003742:	071a      	lsls	r2, r3, #28
 8003744:	d506      	bpl.n	8003754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003746:	6801      	ldr	r1, [r0, #0]
 8003748:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800374a:	684a      	ldr	r2, [r1, #4]
 800374c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003750:	4322      	orrs	r2, r4
 8003752:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003754:	06dc      	lsls	r4, r3, #27
 8003756:	d506      	bpl.n	8003766 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003758:	6801      	ldr	r1, [r0, #0]
 800375a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800375c:	688a      	ldr	r2, [r1, #8]
 800375e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003762:	4322      	orrs	r2, r4
 8003764:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003766:	0699      	lsls	r1, r3, #26
 8003768:	d506      	bpl.n	8003778 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376a:	6801      	ldr	r1, [r0, #0]
 800376c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800376e:	688a      	ldr	r2, [r1, #8]
 8003770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003774:	4322      	orrs	r2, r4
 8003776:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003778:	065a      	lsls	r2, r3, #25
 800377a:	d50f      	bpl.n	800379c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800377c:	6801      	ldr	r1, [r0, #0]
 800377e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003780:	684a      	ldr	r2, [r1, #4]
 8003782:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003786:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003788:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378e:	d105      	bne.n	800379c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003790:	684a      	ldr	r2, [r1, #4]
 8003792:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003794:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003798:	4322      	orrs	r2, r4
 800379a:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	d506      	bpl.n	80037ae <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a0:	6802      	ldr	r2, [r0, #0]
 80037a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80037a4:	6853      	ldr	r3, [r2, #4]
 80037a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80037aa:	430b      	orrs	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b4:	9d06      	ldr	r5, [sp, #24]
 80037b6:	4604      	mov	r4, r0
 80037b8:	460f      	mov	r7, r1
 80037ba:	4616      	mov	r6, r2
 80037bc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037be:	6821      	ldr	r1, [r4, #0]
 80037c0:	69ca      	ldr	r2, [r1, #28]
 80037c2:	ea37 0302 	bics.w	r3, r7, r2
 80037c6:	bf0c      	ite	eq
 80037c8:	2201      	moveq	r2, #1
 80037ca:	2200      	movne	r2, #0
 80037cc:	42b2      	cmp	r2, r6
 80037ce:	d002      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80037d0:	2000      	movs	r0, #0
}
 80037d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80037d6:	1c6b      	adds	r3, r5, #1
 80037d8:	d0f2      	beq.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80037da:	b99d      	cbnz	r5, 8003804 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037ee:	2320      	movs	r3, #32
 80037f0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80037f4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80037f8:	2300      	movs	r3, #0
 80037fa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80037fe:	2003      	movs	r0, #3
 8003800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003804:	f7fc fe96 	bl	8000534 <HAL_GetTick>
 8003808:	eba0 0008 	sub.w	r0, r0, r8
 800380c:	4285      	cmp	r5, r0
 800380e:	d2d6      	bcs.n	80037be <UART_WaitOnFlagUntilTimeout+0xe>
 8003810:	e7e4      	b.n	80037dc <UART_WaitOnFlagUntilTimeout+0x2c>

08003812 <UART_CheckIdleState>:
{
 8003812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003814:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	2600      	movs	r6, #0
 8003818:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800381a:	f7fc fe8b 	bl	8000534 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003824:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003826:	d417      	bmi.n	8003858 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	075b      	lsls	r3, r3, #29
 800382e:	d50a      	bpl.n	8003846 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	462b      	mov	r3, r5
 800383a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff ffb6 	bl	80037b0 <UART_WaitOnFlagUntilTimeout>
 8003844:	b9a0      	cbnz	r0, 8003870 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8003846:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003848:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800384a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800384e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8003852:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003856:	e00c      	b.n	8003872 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4632      	mov	r2, r6
 8003860:	4603      	mov	r3, r0
 8003862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff ffa2 	bl	80037b0 <UART_WaitOnFlagUntilTimeout>
 800386c:	2800      	cmp	r0, #0
 800386e:	d0db      	beq.n	8003828 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003870:	2003      	movs	r0, #3
}
 8003872:	b002      	add	sp, #8
 8003874:	bd70      	pop	{r4, r5, r6, pc}

08003876 <HAL_UART_Init>:
{
 8003876:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003878:	4604      	mov	r4, r0
 800387a:	b360      	cbz	r0, 80038d6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800387c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003880:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003884:	b91b      	cbnz	r3, 800388e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003886:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800388a:	f002 fa91 	bl	8005db0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800388e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	2324      	movs	r3, #36	; 0x24
 8003892:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fd9a 	bl	80033d8 <UART_SetConfig>
 80038a4:	2801      	cmp	r0, #1
 80038a6:	d016      	beq.n	80038d6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038aa:	b113      	cbz	r3, 80038b2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff ff2b 	bl	8003708 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80038ca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80038cc:	601a      	str	r2, [r3, #0]
}
 80038ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80038d2:	f7ff bf9e 	b.w	8003812 <UART_CheckIdleState>
}
 80038d6:	2001      	movs	r0, #1
 80038d8:	bd10      	pop	{r4, pc}

080038da <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038da:	b084      	sub	sp, #16
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	ad05      	add	r5, sp, #20
 80038e0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038e4:	68c3      	ldr	r3, [r0, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 80038ea:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ec:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80038ee:	f000 fb55 	bl	8003f9c <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80038f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f6:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80038f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038fc:	2000      	movs	r0, #0
 80038fe:	b004      	add	sp, #16
 8003900:	4770      	bx	lr

08003902 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003902:	6883      	ldr	r3, [r0, #8]
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr

0800390e <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800390e:	6883      	ldr	r3, [r0, #8]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003916:	2000      	movs	r0, #0
 8003918:	4770      	bx	lr

0800391a <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800391a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800391c:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 800391e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003920:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003924:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8003926:	d108      	bne.n	800393a <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003928:	68c3      	ldr	r3, [r0, #12]
 800392a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800392e:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8003930:	2032      	movs	r0, #50	; 0x32
 8003932:	f7fc fe05 	bl	8000540 <HAL_Delay>
  
  return HAL_OK;
}
 8003936:	2000      	movs	r0, #0
 8003938:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 800393a:	2900      	cmp	r1, #0
 800393c:	d1f8      	bne.n	8003930 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800393e:	68c3      	ldr	r3, [r0, #12]
 8003940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003944:	60c3      	str	r3, [r0, #12]
 8003946:	e7f3      	b.n	8003930 <USB_SetCurrentMode+0x16>

08003948 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003948:	b084      	sub	sp, #16
 800394a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	a809      	add	r0, sp, #36	; 0x24
 8003952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003958:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800395a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800395e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003962:	4689      	mov	r9, r1
 8003964:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8003966:	b95f      	cbnz	r7, 8003980 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8003968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800396a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800396e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003976:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8003980:	2500      	movs	r5, #0
 8003982:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003986:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800398a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800398e:	2103      	movs	r1, #3
 8003990:	4620      	mov	r0, r4
 8003992:	f000 f893 	bl	8003abc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8003996:	2110      	movs	r1, #16
 8003998:	4620      	mov	r0, r4
 800399a:	f000 f86d 	bl	8003a78 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80039a2:	4620      	mov	r0, r4
 80039a4:	f000 f87a 	bl	8003a9c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80039ac:	6135      	str	r5, [r6, #16]
 80039ae:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 80039b0:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80039b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80039b6:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80039b8:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 80039ba:	61f5      	str	r5, [r6, #28]
 80039bc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 80039c0:	454d      	cmp	r5, r9
 80039c2:	d13c      	bne.n	8003a3e <USB_DevInit+0xf6>
 80039c4:	2200      	movs	r2, #0
 80039c6:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 80039ca:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80039cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80039d0:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 80039d4:	4295      	cmp	r5, r2
 80039d6:	d13e      	bne.n	8003a56 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039d8:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 80039da:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e2:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80039e4:	d108      	bne.n	80039f8 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <USB_DevInit+0x128>)
 80039e8:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80039ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	f043 0303 	orr.w	r3, r3, #3
 80039f4:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80039f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80039fc:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003a00:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003a02:	f1b8 0f00 	cmp.w	r8, #0
 8003a06:	d103      	bne.n	8003a10 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003a08:	69a3      	ldr	r3, [r4, #24]
 8003a0a:	f043 0310 	orr.w	r3, r3, #16
 8003a0e:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003a10:	69a2      	ldr	r2, [r4, #24]
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <USB_DevInit+0x12c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8003a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a1a:	b11b      	cbz	r3, 8003a24 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a1c:	69a3      	ldr	r3, [r4, #24]
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
 8003a22:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8003a24:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003a26:	bf01      	itttt	eq
 8003a28:	69a3      	ldreq	r3, [r4, #24]
 8003a2a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003a2e:	f043 0304 	orreq.w	r3, r3, #4
 8003a32:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8003a34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	2000      	movs	r0, #0
 8003a3a:	b004      	add	sp, #16
 8003a3c:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a3e:	f8d3 e000 	ldr.w	lr, [r3]
 8003a42:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003a46:	bfb4      	ite	lt
 8003a48:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8003a4a:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8003a4c:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8003a4e:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8003a50:	6098      	str	r0, [r3, #8]
 8003a52:	3320      	adds	r3, #32
 8003a54:	e7b4      	b.n	80039c0 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a56:	f8d3 c000 	ldr.w	ip, [r3]
 8003a5a:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003a5e:	bfb4      	ite	lt
 8003a60:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8003a62:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8003a64:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8003a66:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8003a68:	f8c3 e008 	str.w	lr, [r3, #8]
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	e7b1      	b.n	80039d4 <USB_DevInit+0x8c>
 8003a70:	00800100 	.word	0x00800100
 8003a74:	803c3800 	.word	0x803c3800

08003a78 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003a78:	0189      	lsls	r1, r1, #6
 8003a7a:	f041 0120 	orr.w	r1, r1, #32
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <USB_FlushTxFifo+0x20>)
 8003a80:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8003a82:	3a01      	subs	r2, #1
 8003a84:	d005      	beq.n	8003a92 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a86:	6903      	ldr	r3, [r0, #16]
 8003a88:	f013 0320 	ands.w	r3, r3, #32
 8003a8c:	d1f9      	bne.n	8003a82 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003a92:	2003      	movs	r0, #3
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	00030d41 	.word	0x00030d41

08003a9c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	4a06      	ldr	r2, [pc, #24]	; (8003ab8 <USB_FlushRxFifo+0x1c>)
 8003aa0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	d005      	beq.n	8003ab2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aa6:	6903      	ldr	r3, [r0, #16]
 8003aa8:	f013 0310 	ands.w	r3, r3, #16
 8003aac:	d1f9      	bne.n	8003aa2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003ab2:	2003      	movs	r0, #3
}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	00030d41 	.word	0x00030d41

08003abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003abc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003ac0:	4319      	orrs	r1, r3
 8003ac2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	4770      	bx	lr

08003aca <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aca:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8003acc:	784b      	ldrb	r3, [r1, #1]
 8003ace:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003ad0:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003ad4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d11b      	bne.n	8003b14 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003adc:	40a3      	lsls	r3, r4
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8003ae2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003ae6:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8003ae8:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	0412      	lsls	r2, r2, #16
 8003af0:	d40e      	bmi.n	8003b10 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8003af2:	688a      	ldr	r2, [r1, #8]
 8003af4:	78c8      	ldrb	r0, [r1, #3]
 8003af6:	681d      	ldr	r5, [r3, #0]
 8003af8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003afc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b04:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8003b08:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8003b0c:	4328      	orrs	r0, r5
 8003b0e:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003b10:	2000      	movs	r0, #0
 8003b12:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8003b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b18:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8003b1a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8003b1e:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8003b20:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8003b24:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8003b26:	6803      	ldr	r3, [r0, #0]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	d4f1      	bmi.n	8003b10 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8003b2c:	688b      	ldr	r3, [r1, #8]
 8003b2e:	78c9      	ldrb	r1, [r1, #3]
 8003b30:	6802      	ldr	r2, [r0, #0]
 8003b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003b42:	4313      	orrs	r3, r2
 8003b44:	6003      	str	r3, [r0, #0]
 8003b46:	e7e3      	b.n	8003b10 <USB_ActivateEndpoint+0x46>

08003b48 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b48:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8003b4a:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8003b4c:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003b50:	7809      	ldrb	r1, [r1, #0]
 8003b52:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d111      	bne.n	8003b7e <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8003b5a:	408b      	lsls	r3, r1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	401c      	ands	r4, r3
 8003b62:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8003b64:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003b66:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8003b6a:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003b6c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8003b70:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003b72:	6803      	ldr	r3, [r0, #0]
 8003b74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b78:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8003b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b82:	408b      	lsls	r3, r1
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401c      	ands	r4, r3
 8003b88:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8003b8a:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003b8c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8003b90:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003b92:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8003b96:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b9e:	6003      	str	r3, [r0, #0]
 8003ba0:	e7eb      	b.n	8003b7a <USB_DeactivateEndpoint+0x32>
	...

08003ba4 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003ba6:	784b      	ldrb	r3, [r1, #1]
 8003ba8:	780c      	ldrb	r4, [r1, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	694b      	ldr	r3, [r1, #20]
 8003bae:	d163      	bne.n	8003c78 <USB_EPStartXfer+0xd4>
 8003bb0:	2520      	movs	r5, #32
 8003bb2:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003bb6:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003bba:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8003bbc:	bb73      	cbnz	r3, 8003c1c <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003bbe:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003bc2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003bc6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003bc8:	6925      	ldr	r5, [r4, #16]
 8003bca:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003bce:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003bd0:	6925      	ldr	r5, [r4, #16]
 8003bd2:	0ced      	lsrs	r5, r5, #19
 8003bd4:	04ed      	lsls	r5, r5, #19
 8003bd6:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8003bd8:	78cf      	ldrb	r7, [r1, #3]
 8003bda:	780d      	ldrb	r5, [r1, #0]
 8003bdc:	2f01      	cmp	r7, #1
 8003bde:	f000 8089 	beq.w	8003cf4 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8003be2:	b14b      	cbz	r3, 8003bf8 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8003be4:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8003be8:	2401      	movs	r4, #1
 8003bea:	40ac      	lsls	r4, r5
 8003bec:	ea44 040c 	orr.w	r4, r4, ip
 8003bf0:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8003bf4:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bf8:	780d      	ldrb	r5, [r1, #0]
 8003bfa:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8003bfe:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c00:	6834      	ldr	r4, [r6, #0]
 8003c02:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003c06:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8003c08:	d105      	bne.n	8003c16 <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003c0a:	9200      	str	r2, [sp, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	462a      	mov	r2, r5
 8003c10:	68c9      	ldr	r1, [r1, #12]
 8003c12:	f000 f8e3 	bl	8003ddc <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003c16:	2000      	movs	r0, #0
 8003c18:	b003      	add	sp, #12
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c1c:	0ced      	lsrs	r5, r5, #19
 8003c1e:	04ed      	lsls	r5, r5, #19
 8003c20:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003c22:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8003c24:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003c26:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003c2a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003c2e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8003c30:	19dd      	adds	r5, r3, r7
 8003c32:	3d01      	subs	r5, #1
 8003c34:	fbb5 f7f7 	udiv	r7, r5, r7
 8003c38:	4d35      	ldr	r5, [pc, #212]	; (8003d10 <USB_EPStartXfer+0x16c>)
 8003c3a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003c3e:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8003c42:	ea45 050e 	orr.w	r5, r5, lr
 8003c46:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003c48:	6927      	ldr	r7, [r4, #16]
 8003c4a:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8003c4e:	433d      	orrs	r5, r7
 8003c50:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003c52:	78cd      	ldrb	r5, [r1, #3]
 8003c54:	2d01      	cmp	r5, #1
 8003c56:	d1bf      	bne.n	8003bd8 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003c58:	6925      	ldr	r5, [r4, #16]
 8003c5a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8003c5e:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8003c60:	6925      	ldr	r5, [r4, #16]
 8003c62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003c66:	6125      	str	r5, [r4, #16]
 8003c68:	e7b6      	b.n	8003bd8 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c6a:	fb14 6405 	smlabb	r4, r4, r5, r6
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003c74:	6025      	str	r5, [r4, #0]
 8003c76:	e7bf      	b.n	8003bf8 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003c78:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8003c7c:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8003c80:	6914      	ldr	r4, [r2, #16]
 8003c82:	0ce4      	lsrs	r4, r4, #19
 8003c84:	04e4      	lsls	r4, r4, #19
 8003c86:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003c88:	6914      	ldr	r4, [r2, #16]
 8003c8a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003c8e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003c92:	6114      	str	r4, [r2, #16]
 8003c94:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8003c96:	b9db      	cbnz	r3, 8003cd0 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c98:	6913      	ldr	r3, [r2, #16]
 8003c9a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003c9e:	431c      	orrs	r4, r3
 8003ca0:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8003ca2:	6913      	ldr	r3, [r2, #16]
 8003ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ca8:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8003caa:	78cb      	ldrb	r3, [r1, #3]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10a      	bne.n	8003cc6 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8003cb0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003cb4:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	bf0c      	ite	eq
 8003cbc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003cc0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ccc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003cce:	e7a2      	b.n	8003c16 <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8003cd0:	4d0f      	ldr	r5, [pc, #60]	; (8003d10 <USB_EPStartXfer+0x16c>)
 8003cd2:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8003cd4:	4423      	add	r3, r4
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8003cdc:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8003ce0:	4335      	orrs	r5, r6
 8003ce2:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	6915      	ldr	r5, [r2, #16]
 8003ce8:	435c      	muls	r4, r3
 8003cea:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003cee:	432c      	orrs	r4, r5
 8003cf0:	6114      	str	r4, [r2, #16]
 8003cf2:	e7da      	b.n	8003caa <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8003cf4:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003cf8:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003cfc:	f04f 0420 	mov.w	r4, #32
 8003d00:	d0b3      	beq.n	8003c6a <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d02:	fb14 6405 	smlabb	r4, r4, r5, r6
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	e773      	b.n	8003bf8 <USB_EPStartXfer+0x54>
 8003d10:	1ff80000 	.word	0x1ff80000

08003d14 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003d14:	784b      	ldrb	r3, [r1, #1]
 8003d16:	2b01      	cmp	r3, #1
{
 8003d18:	b530      	push	{r4, r5, lr}
 8003d1a:	780b      	ldrb	r3, [r1, #0]
 8003d1c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8003d1e:	d13e      	bne.n	8003d9e <USB_EP0StartXfer+0x8a>
 8003d20:	2220      	movs	r2, #32
 8003d22:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d26:	fb12 4303 	smlabb	r3, r2, r3, r4
 8003d2a:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8003d2c:	b9fd      	cbnz	r5, 8003d6e <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d2e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8003d32:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8003d36:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d3e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	0cd2      	lsrs	r2, r2, #19
 8003d44:	04d2      	lsls	r2, r2, #19
 8003d46:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8003d48:	694b      	ldr	r3, [r1, #20]
 8003d4a:	b13b      	cbz	r3, 8003d5c <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8003d4c:	780d      	ldrb	r5, [r1, #0]
 8003d4e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003d52:	2301      	movs	r3, #1
 8003d54:	40ab      	lsls	r3, r5
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8003d5c:	780b      	ldrb	r3, [r1, #0]
 8003d5e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003d68:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d6e:	0cd2      	lsrs	r2, r2, #19
 8003d70:	04d2      	lsls	r2, r2, #19
 8003d72:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8003d7a:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8003d7e:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8003d80:	688a      	ldr	r2, [r1, #8]
 8003d82:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8003d84:	bf88      	it	hi
 8003d86:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d8e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003d90:	694a      	ldr	r2, [r1, #20]
 8003d92:	691d      	ldr	r5, [r3, #16]
 8003d94:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003d98:	432a      	orrs	r2, r5
 8003d9a:	611a      	str	r2, [r3, #16]
 8003d9c:	e7d4      	b.n	8003d48 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003d9e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003da2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003da6:	6903      	ldr	r3, [r0, #16]
 8003da8:	0cdb      	lsrs	r3, r3, #19
 8003daa:	04db      	lsls	r3, r3, #19
 8003dac:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003dae:	6903      	ldr	r3, [r0, #16]
 8003db0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003db4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003db8:	6103      	str	r3, [r0, #16]
 8003dba:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8003dbc:	b105      	cbz	r5, 8003dc0 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8003dbe:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8003dc0:	6902      	ldr	r2, [r0, #16]
 8003dc2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003dc6:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003dc8:	6902      	ldr	r2, [r0, #16]
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003dd2:	6803      	ldr	r3, [r0, #0]
 8003dd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dd8:	6003      	str	r3, [r0, #0]
 8003dda:	e7c6      	b.n	8003d6a <USB_EP0StartXfer+0x56>

08003ddc <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8003ddc:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003dde:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8003de2:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8003de4:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003de6:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8003dea:	2400      	movs	r4, #0
 8003dec:	429c      	cmp	r4, r3
 8003dee:	d101      	bne.n	8003df4 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8003df0:	2000      	movs	r0, #0
 8003df2:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003df4:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8003df8:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8003dfa:	3401      	adds	r4, #1
 8003dfc:	e7f6      	b.n	8003dec <USB_WritePacket+0x10>

08003dfe <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dfe:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8003e00:	3203      	adds	r2, #3
 8003e02:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8003e04:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8003e06:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d102      	bne.n	8003e14 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8003e0e:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003e12:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8003e14:	6804      	ldr	r4, [r0, #0]
 8003e16:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	e7f5      	b.n	8003e0a <USB_ReadPacket+0xc>

08003e1e <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8003e1e:	784b      	ldrb	r3, [r1, #1]
 8003e20:	780a      	ldrb	r2, [r1, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	f04f 0320 	mov.w	r3, #32
 8003e28:	d10b      	bne.n	8003e42 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8003e2a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003e2e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003e32:	6803      	ldr	r3, [r0, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0b      	blt.n	8003e50 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003e38:	6803      	ldr	r3, [r0, #0]
 8003e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e3e:	6003      	str	r3, [r0, #0]
 8003e40:	e006      	b.n	8003e50 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8003e42:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003e46:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003e4a:	6803      	ldr	r3, [r0, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	daf3      	bge.n	8003e38 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e50:	6803      	ldr	r3, [r0, #0]
 8003e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e56:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003e58:	2000      	movs	r0, #0
 8003e5a:	4770      	bx	lr

08003e5c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8003e5c:	784b      	ldrb	r3, [r1, #1]
 8003e5e:	780a      	ldrb	r2, [r1, #0]
 8003e60:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e62:	bf0c      	ite	eq
 8003e64:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e68:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003e72:	6803      	ldr	r3, [r0, #0]
 8003e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e78:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003e7a:	78cb      	ldrb	r3, [r1, #3]
 8003e7c:	3b02      	subs	r3, #2
 8003e7e:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e80:	bf9e      	ittt	ls
 8003e82:	6803      	ldrls	r3, [r0, #0]
 8003e84:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	4770      	bx	lr

08003e8e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003e8e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003e92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e96:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8003e9a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003e9e:	0109      	lsls	r1, r1, #4
 8003ea0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003ea4:	4319      	orrs	r1, r3
 8003ea6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8003eaa:	2000      	movs	r0, #0
 8003eac:	4770      	bx	lr

08003eae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003eae:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8003eb0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003eb4:	f023 0302 	bic.w	r3, r3, #2
 8003eb8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	f7fc fb3f 	bl	8000540 <HAL_Delay>
  
  return HAL_OK;  
}
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	bd08      	pop	{r3, pc}

08003ec6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ec6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8003ec8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003ed4:	2003      	movs	r0, #3
 8003ed6:	f7fc fb33 	bl	8000540 <HAL_Delay>
  
  return HAL_OK;  
}
 8003eda:	2000      	movs	r0, #0
 8003edc:	bd08      	pop	{r3, pc}

08003ede <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8003ede:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003ee0:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8003ee2:	4010      	ands	r0, r2
 8003ee4:	4770      	bx	lr

08003ee6 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8003ee6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003eea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eee:	69c0      	ldr	r0, [r0, #28]
 8003ef0:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8003ef2:	0c00      	lsrs	r0, r0, #16
 8003ef4:	4770      	bx	lr

08003ef6 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8003ef6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003efa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003efe:	69c0      	ldr	r0, [r0, #28]
 8003f00:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8003f02:	b280      	uxth	r0, r0
 8003f04:	4770      	bx	lr

08003f06 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8003f06:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003f0a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f0e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8003f12:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f14:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8003f16:	4010      	ands	r0, r2
 8003f18:	4770      	bx	lr

08003f1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003f1a:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003f1c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f20:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8003f24:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003f28:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8003f2a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003f2e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8003f30:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	4323      	orrs	r3, r4
  return tmpreg;
}
 8003f36:	4018      	ands	r0, r3
 8003f38:	bd10      	pop	{r4, pc}

08003f3a <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8003f3a:	6940      	ldr	r0, [r0, #20]
}
 8003f3c:	f000 0001 	and.w	r0, r0, #1
 8003f40:	4770      	bx	lr

08003f42 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003f46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003f52:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	f002 0206 	and.w	r2, r2, #6
 8003f5c:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8003f5e:	bf02      	ittt	eq
 8003f60:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8003f64:	f042 0203 	orreq.w	r2, r2, #3
 8003f68:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003f74:	2000      	movs	r0, #0
 8003f76:	4770      	bx	lr

08003f78 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8003f78:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f86:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	f042 0218 	orr.w	r2, r2, #24
 8003f8e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8003f96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8003f98:	4770      	bx	lr
	...

08003f9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3301      	adds	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <USB_CoreReset+0x64>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e01b      	b.n	8003ff2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	daf2      	bge.n	8003fa8 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <USB_CoreReset+0x64>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e006      	b.n	8003ff2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d0f0      	beq.n	8003fd2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	00030d40 	.word	0x00030d40

08004004 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004004:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004008:	b11b      	cbz	r3, 8004012 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800400a:	2000      	movs	r0, #0
 800400c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004010:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004012:	2002      	movs	r0, #2
  }
}
 8004014:	4770      	bx	lr

08004016 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004016:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800401a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800401c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004020:	b15b      	cbz	r3, 800403a <USBD_CDC_EP0_RxReady+0x24>
 8004022:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004026:	28ff      	cmp	r0, #255	; 0xff
 8004028:	d007      	beq.n	800403a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004030:	4621      	mov	r1, r4
 8004032:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004034:	23ff      	movs	r3, #255	; 0xff
 8004036:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800403a:	2000      	movs	r0, #0
 800403c:	bd10      	pop	{r4, pc}
	...

08004040 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004040:	2343      	movs	r3, #67	; 0x43
 8004042:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004044:	4800      	ldr	r0, [pc, #0]	; (8004048 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004046:	4770      	bx	lr
 8004048:	2000003c 	.word	0x2000003c

0800404c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800404c:	2343      	movs	r3, #67	; 0x43
 800404e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004050:	4800      	ldr	r0, [pc, #0]	; (8004054 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004052:	4770      	bx	lr
 8004054:	20000080 	.word	0x20000080

08004058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004058:	2343      	movs	r3, #67	; 0x43
 800405a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800405c:	4800      	ldr	r0, [pc, #0]	; (8004060 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800405e:	4770      	bx	lr
 8004060:	200000d0 	.word	0x200000d0

08004064 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004064:	230a      	movs	r3, #10
 8004066:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004068:	4800      	ldr	r0, [pc, #0]	; (800406c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800406a:	4770      	bx	lr
 800406c:	200000c4 	.word	0x200000c4

08004070 <USBD_CDC_DataOut>:
{      
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004074:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004078:	f002 f8ae 	bl	80061d8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800407c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004080:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004084:	b14b      	cbz	r3, 800409a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004086:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800408a:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004094:	4798      	blx	r3
    return USBD_OK;
 8004096:	2000      	movs	r0, #0
 8004098:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800409a:	2002      	movs	r0, #2
}
 800409c:	bd38      	pop	{r3, r4, r5, pc}
	...

080040a0 <USBD_CDC_Setup>:
{
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040a2:	780f      	ldrb	r7, [r1, #0]
 80040a4:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80040a8:	4606      	mov	r6, r0
 80040aa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040ac:	d023      	beq.n	80040f6 <USBD_CDC_Setup+0x56>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d119      	bne.n	80040e6 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80040b2:	88ca      	ldrh	r2, [r1, #6]
 80040b4:	784b      	ldrb	r3, [r1, #1]
 80040b6:	b1c2      	cbz	r2, 80040ea <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80040b8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040ba:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80040be:	d50b      	bpl.n	80040d8 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80040c0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80040c4:	4618      	mov	r0, r3
 80040c6:	688f      	ldr	r7, [r1, #8]
 80040c8:	4629      	mov	r1, r5
 80040ca:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80040cc:	88e2      	ldrh	r2, [r4, #6]
 80040ce:	4629      	mov	r1, r5
 80040d0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80040d2:	f000 fb94 	bl	80047fe <USBD_CtlSendData>
      break;
 80040d6:	e006      	b.n	80040e6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80040d8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80040dc:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80040e0:	4629      	mov	r1, r5
 80040e2:	f000 fba1 	bl	8004828 <USBD_CtlPrepareRx>
}
 80040e6:	2000      	movs	r0, #0
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80040ea:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80040ee:	6884      	ldr	r4, [r0, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	47a0      	blx	r4
 80040f4:	e7f7      	b.n	80040e6 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80040f6:	784b      	ldrb	r3, [r1, #1]
 80040f8:	2b0a      	cmp	r3, #10
 80040fa:	d1f4      	bne.n	80040e6 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80040fc:	2201      	movs	r2, #1
 80040fe:	4901      	ldr	r1, [pc, #4]	; (8004104 <USBD_CDC_Setup+0x64>)
 8004100:	e7e7      	b.n	80040d2 <USBD_CDC_Setup+0x32>
 8004102:	bf00      	nop
 8004104:	2000018c 	.word	0x2000018c

08004108 <USBD_CDC_DeInit>:
{
 8004108:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800410a:	2181      	movs	r1, #129	; 0x81
{
 800410c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800410e:	f001 fffb 	bl	8006108 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8004112:	2101      	movs	r1, #1
 8004114:	4620      	mov	r0, r4
 8004116:	f001 fff7 	bl	8006108 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800411a:	2182      	movs	r1, #130	; 0x82
 800411c:	4620      	mov	r0, r4
 800411e:	f001 fff3 	bl	8006108 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8004122:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004126:	b153      	cbz	r3, 800413e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004128:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004130:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004134:	f002 f88c 	bl	8006250 <USBD_static_free>
    pdev->pClassData = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800413e:	2000      	movs	r0, #0
 8004140:	bd10      	pop	{r4, pc}

08004142 <USBD_CDC_Init>:
{
 8004142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004144:	7c03      	ldrb	r3, [r0, #16]
{
 8004146:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004148:	bb7b      	cbnz	r3, 80041aa <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800414a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414e:	2202      	movs	r2, #2
 8004150:	2181      	movs	r1, #129	; 0x81
 8004152:	f001 ffc9 	bl	80060e8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004156:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800415a:	2202      	movs	r2, #2
 800415c:	2101      	movs	r1, #1
 800415e:	4620      	mov	r0, r4
 8004160:	f001 ffc2 	bl	80060e8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8004164:	2308      	movs	r3, #8
 8004166:	2203      	movs	r2, #3
 8004168:	2182      	movs	r1, #130	; 0x82
 800416a:	4620      	mov	r0, r4
 800416c:	f001 ffbc 	bl	80060e8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004170:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004174:	f002 f868 	bl	8006248 <USBD_static_malloc>
 8004178:	4606      	mov	r6, r0
 800417a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800417e:	b320      	cbz	r0, 80041ca <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004180:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004188:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800418a:	2500      	movs	r5, #0
 800418c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8004190:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004194:	b987      	cbnz	r7, 80041b8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8004196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800419e:	2101      	movs	r1, #1
 80041a0:	4620      	mov	r0, r4
 80041a2:	f002 f80b 	bl	80061bc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80041a6:	4638      	mov	r0, r7
 80041a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80041aa:	2340      	movs	r3, #64	; 0x40
 80041ac:	2202      	movs	r2, #2
 80041ae:	2181      	movs	r1, #129	; 0x81
 80041b0:	f001 ff9a 	bl	80060e8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	e7d0      	b.n	800415a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80041b8:	2340      	movs	r3, #64	; 0x40
 80041ba:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80041be:	2101      	movs	r1, #1
 80041c0:	4620      	mov	r0, r4
 80041c2:	f001 fffb 	bl	80061bc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80041c6:	4628      	mov	r0, r5
 80041c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80041ca:	2001      	movs	r0, #1
}
 80041cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041ce <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80041ce:	b119      	cbz	r1, 80041d8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80041d0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80041d4:	2000      	movs	r0, #0
 80041d6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80041d8:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80041da:	4770      	bx	lr

080041dc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041dc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80041e0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80041e2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80041e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80041ea:	4770      	bx	lr

080041ec <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80041ec:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80041f0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80041f2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80041f6:	4770      	bx	lr

080041f8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041f8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80041fc:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80041fe:	b162      	cbz	r2, 800421a <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004200:	7c04      	ldrb	r4, [r0, #16]
 8004202:	b944      	cbnz	r4, 8004216 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004204:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004208:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800420c:	2101      	movs	r1, #1
 800420e:	f001 ffd5 	bl	80061bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004212:	2000      	movs	r0, #0
 8004214:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004216:	2340      	movs	r3, #64	; 0x40
 8004218:	e7f6      	b.n	8004208 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800421a:	2002      	movs	r0, #2
  }
}
 800421c:	bd10      	pop	{r4, pc}

0800421e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800421e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004220:	b180      	cbz	r0, 8004244 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004222:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004226:	b113      	cbz	r3, 800422e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800422e:	b109      	cbz	r1, 8004234 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004230:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004234:	2301      	movs	r3, #1
 8004236:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800423a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800423c:	f001 ff12 	bl	8006064 <USBD_LL_Init>
  
  return USBD_OK; 
 8004240:	2000      	movs	r0, #0
 8004242:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8004244:	2002      	movs	r0, #2
}
 8004246:	bd08      	pop	{r3, pc}

08004248 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004248:	b119      	cbz	r1, 8004252 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800424a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800424e:	2000      	movs	r0, #0
 8004250:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004252:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004254:	4770      	bx	lr

08004256 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004256:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004258:	f001 ff38 	bl	80060cc <USBD_LL_Start>
  
  return USBD_OK;  
}
 800425c:	2000      	movs	r0, #0
 800425e:	bd08      	pop	{r3, pc}

08004260 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004260:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004262:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004266:	b90b      	cbnz	r3, 800426c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004268:	2002      	movs	r0, #2
 800426a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4798      	blx	r3
 8004270:	2800      	cmp	r0, #0
 8004272:	d1f9      	bne.n	8004268 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8004274:	bd08      	pop	{r3, pc}

08004276 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004276:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004278:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4798      	blx	r3
  return USBD_OK;
}
 8004280:	2000      	movs	r0, #0
 8004282:	bd08      	pop	{r3, pc}

08004284 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004288:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800428c:	4628      	mov	r0, r5
 800428e:	f000 fa86 	bl	800479e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004292:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004294:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8004298:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800429c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80042a0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80042a4:	f001 031f 	and.w	r3, r1, #31
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d00e      	beq.n	80042ca <USBD_LL_SetupStage+0x46>
 80042ac:	d307      	bcc.n	80042be <USBD_LL_SetupStage+0x3a>
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d010      	beq.n	80042d4 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80042b2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80042b6:	4620      	mov	r0, r4
 80042b8:	f001 ff34 	bl	8006124 <USBD_LL_StallEP>
    break;
 80042bc:	e003      	b.n	80042c6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80042be:	4629      	mov	r1, r5
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f8e7 	bl	8004494 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80042c6:	2000      	movs	r0, #0
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80042ca:	4629      	mov	r1, r5
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 f9eb 	bl	80046a8 <USBD_StdItfReq>
    break;
 80042d2:	e7f8      	b.n	80042c6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80042d4:	4629      	mov	r1, r5
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 f9fe 	bl	80046d8 <USBD_StdEPReq>
    break;
 80042dc:	e7f3      	b.n	80042c6 <USBD_LL_SetupStage+0x42>

080042de <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80042de:	b538      	push	{r3, r4, r5, lr}
 80042e0:	4604      	mov	r4, r0
 80042e2:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80042e4:	bb11      	cbnz	r1, 800432c <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80042e6:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d10f      	bne.n	800430e <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80042ee:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80042f2:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d90b      	bls.n	8004312 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80042fa:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf28      	it	cs
 8004300:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8004302:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8004306:	b292      	uxth	r2, r2
 8004308:	4629      	mov	r1, r5
 800430a:	f000 fa9c 	bl	8004846 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800430e:	2000      	movs	r0, #0
 8004310:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004312:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	b123      	cbz	r3, 8004324 <USBD_LL_DataOutStage+0x46>
 800431a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800431e:	2a03      	cmp	r2, #3
 8004320:	d100      	bne.n	8004324 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8004322:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fa96 	bl	8004856 <USBD_CtlSendStatus>
 800432a:	e7f0      	b.n	800430e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800432c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0eb      	beq.n	800430e <USBD_LL_DataOutStage+0x30>
 8004336:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800433a:	2a03      	cmp	r2, #3
 800433c:	d1e7      	bne.n	800430e <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800433e:	4798      	blx	r3
 8004340:	e7e5      	b.n	800430e <USBD_LL_DataOutStage+0x30>

08004342 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	4613      	mov	r3, r2
 8004346:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004348:	460e      	mov	r6, r1
 800434a:	2900      	cmp	r1, #0
 800434c:	d13d      	bne.n	80043ca <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800434e:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8004352:	2a02      	cmp	r2, #2
 8004354:	d10f      	bne.n	8004376 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8004356:	69c5      	ldr	r5, [r0, #28]
 8004358:	6a02      	ldr	r2, [r0, #32]
 800435a:	4295      	cmp	r5, r2
 800435c:	d914      	bls.n	8004388 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800435e:	1aaa      	subs	r2, r5, r2
 8004360:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004362:	4619      	mov	r1, r3
 8004364:	b292      	uxth	r2, r2
 8004366:	f000 fa57 	bl	8004818 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800436a:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800436c:	461a      	mov	r2, r3
 800436e:	4619      	mov	r1, r3
 8004370:	4620      	mov	r0, r4
 8004372:	f001 ff23 	bl	80061bc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004376:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8004384:	2000      	movs	r0, #0
 8004386:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8004388:	6983      	ldr	r3, [r0, #24]
 800438a:	fbb3 f5f2 	udiv	r5, r3, r2
 800438e:	fb02 3515 	mls	r5, r2, r5, r3
 8004392:	b965      	cbnz	r5, 80043ae <USBD_LL_DataInStage+0x6c>
 8004394:	429a      	cmp	r2, r3
 8004396:	d80a      	bhi.n	80043ae <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8004398:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800439c:	4293      	cmp	r3, r2
 800439e:	d206      	bcs.n	80043ae <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80043a0:	462a      	mov	r2, r5
 80043a2:	f000 fa39 	bl	8004818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80043a6:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80043aa:	462b      	mov	r3, r5
 80043ac:	e7de      	b.n	800436c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80043ae:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	b12b      	cbz	r3, 80043c2 <USBD_LL_DataInStage+0x80>
 80043b6:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80043ba:	2a03      	cmp	r2, #3
 80043bc:	d101      	bne.n	80043c2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80043be:	4620      	mov	r0, r4
 80043c0:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 fa52 	bl	800486c <USBD_CtlReceiveStatus>
 80043c8:	e7d5      	b.n	8004376 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80043ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0d7      	beq.n	8004384 <USBD_LL_DataInStage+0x42>
 80043d4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80043d8:	2a03      	cmp	r2, #3
 80043da:	d1d3      	bne.n	8004384 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80043dc:	4798      	blx	r3
 80043de:	e7d1      	b.n	8004384 <USBD_LL_DataInStage+0x42>

080043e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80043e0:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80043e2:	2200      	movs	r2, #0
{
 80043e4:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80043e6:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043e8:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	f001 fe7c 	bl	80060e8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80043f0:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80043f6:	2200      	movs	r2, #0
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	4620      	mov	r0, r4
 80043fc:	f001 fe74 	bl	80060e8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004400:	2301      	movs	r3, #1
 8004402:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004406:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800440a:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800440c:	b12b      	cbz	r3, 800441a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800440e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004412:	7921      	ldrb	r1, [r4, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4620      	mov	r0, r4
 8004418:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800441a:	2000      	movs	r0, #0
 800441c:	bd38      	pop	{r3, r4, r5, pc}

0800441e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800441e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004420:	2000      	movs	r0, #0
 8004422:	4770      	bx	lr

08004424 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004424:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004428:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800442c:	2304      	movs	r3, #4
 800442e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004432:	2000      	movs	r0, #0
 8004434:	4770      	bx	lr

08004436 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8004436:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800443a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800443e:	2000      	movs	r0, #0
 8004440:	4770      	bx	lr

08004442 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004442:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004444:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004448:	2a03      	cmp	r2, #3
 800444a:	d104      	bne.n	8004456 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800444c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	b103      	cbz	r3, 8004456 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004454:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004456:	2000      	movs	r0, #0
 8004458:	bd08      	pop	{r3, pc}

0800445a <USBD_LL_IsoINIncomplete>:
 800445a:	2000      	movs	r0, #0
 800445c:	4770      	bx	lr

0800445e <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800445e:	2000      	movs	r0, #0
 8004460:	4770      	bx	lr

08004462 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8004462:	2000      	movs	r0, #0
 8004464:	4770      	bx	lr

08004466 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004466:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004468:	2201      	movs	r2, #1
 800446a:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800446e:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8004472:	7901      	ldrb	r1, [r0, #4]
 8004474:	6852      	ldr	r2, [r2, #4]
 8004476:	4790      	blx	r2
   
  return USBD_OK;
}
 8004478:	2000      	movs	r0, #0
 800447a:	bd08      	pop	{r3, pc}

0800447c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800447c:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800447e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004480:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004482:	f001 fe4f 	bl	8006124 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004486:	4620      	mov	r0, r4
 8004488:	2100      	movs	r1, #0
}
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800448e:	f001 be49 	b.w	8006124 <USBD_LL_StallEP>
	...

08004494 <USBD_StdDevReq>:
{
 8004494:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8004496:	784b      	ldrb	r3, [r1, #1]
{
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800449c:	2b09      	cmp	r3, #9
 800449e:	f200 8089 	bhi.w	80045b4 <USBD_StdDevReq+0x120>
 80044a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044a6:	00d8      	.short	0x00d8
 80044a8:	008700f4 	.word	0x008700f4
 80044ac:	008700e8 	.word	0x008700e8
 80044b0:	000a007c 	.word	0x000a007c
 80044b4:	00c80087 	.word	0x00c80087
 80044b8:	009c      	.short	0x009c
  switch (req->wValue >> 8)
 80044ba:	8849      	ldrh	r1, [r1, #2]
 80044bc:	0a0b      	lsrs	r3, r1, #8
 80044be:	3b01      	subs	r3, #1
 80044c0:	2b0e      	cmp	r3, #14
 80044c2:	d877      	bhi.n	80045b4 <USBD_StdDevReq+0x120>
 80044c4:	e8df f003 	tbb	[pc, r3]
 80044c8:	76312420 	.word	0x76312420
 80044cc:	76615876 	.word	0x76615876
 80044d0:	76767676 	.word	0x76767676
 80044d4:	7676      	.short	0x7676
 80044d6:	08          	.byte	0x08
 80044d7:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80044d8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80044dc:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044de:	7c20      	ldrb	r0, [r4, #16]
 80044e0:	f10d 0106 	add.w	r1, sp, #6
 80044e4:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80044e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d072      	beq.n	80045d4 <USBD_StdDevReq+0x140>
 80044ee:	88eb      	ldrh	r3, [r5, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06f      	beq.n	80045d4 <USBD_StdDevReq+0x140>
    len = MIN(len , req->wLength);
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf28      	it	cs
 80044f8:	461a      	movcs	r2, r3
 80044fa:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80044fe:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f97c 	bl	80047fe <USBD_CtlSendData>
 8004506:	e065      	b.n	80045d4 <USBD_StdDevReq+0x140>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004508:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	e7e6      	b.n	80044de <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004510:	7c02      	ldrb	r2, [r0, #16]
 8004512:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004516:	b932      	cbnz	r2, 8004526 <USBD_StdDevReq+0x92>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800451a:	f10d 0006 	add.w	r0, sp, #6
 800451e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004520:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004522:	7043      	strb	r3, [r0, #1]
 8004524:	e7df      	b.n	80044e6 <USBD_StdDevReq+0x52>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	e7f7      	b.n	800451a <USBD_StdDevReq+0x86>
    switch ((uint8_t)(req->wValue))
 800452a:	b2c9      	uxtb	r1, r1
 800452c:	2905      	cmp	r1, #5
 800452e:	d81c      	bhi.n	800456a <USBD_StdDevReq+0xd6>
 8004530:	e8df f001 	tbb	[pc, r1]
 8004534:	0f0b0703 	.word	0x0f0b0703
 8004538:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800453a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	e7cd      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004542:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	e7c9      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800454a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	e7c5      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004552:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	e7c1      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800455a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	e7bd      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004562:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	e7b9      	b.n	80044de <USBD_StdDevReq+0x4a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 800456a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800456e:	f10d 0206 	add.w	r2, sp, #6
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	4798      	blx	r3
 8004576:	e7b6      	b.n	80044e6 <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004578:	7c03      	ldrb	r3, [r0, #16]
 800457a:	b9db      	cbnz	r3, 80045b4 <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800457c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004580:	f10d 0006 	add.w	r0, sp, #6
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	4798      	blx	r3
 8004588:	e7ad      	b.n	80044e6 <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800458a:	7c03      	ldrb	r3, [r0, #16]
 800458c:	b993      	cbnz	r3, 80045b4 <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800458e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004592:	f10d 0006 	add.w	r0, sp, #6
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800459a:	2307      	movs	r3, #7
 800459c:	e7c1      	b.n	8004522 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800459e:	888b      	ldrh	r3, [r1, #4]
 80045a0:	b943      	cbnz	r3, 80045b4 <USBD_StdDevReq+0x120>
 80045a2:	88cb      	ldrh	r3, [r1, #6]
 80045a4:	b933      	cbnz	r3, 80045b4 <USBD_StdDevReq+0x120>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80045a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80045aa:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80045ac:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80045ae:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80045b2:	d103      	bne.n	80045bc <USBD_StdDevReq+0x128>
    USBD_CtlError(pdev , req);
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff ff61 	bl	800447c <USBD_CtlError.constprop.0>
    break;
 80045ba:	e00b      	b.n	80045d4 <USBD_StdDevReq+0x140>
      pdev->dev_address = dev_addr;
 80045bc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80045c0:	4629      	mov	r1, r5
 80045c2:	f001 fddf 	bl	8006184 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 f945 	bl	8004856 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80045cc:	b12d      	cbz	r5, 80045da <USBD_StdDevReq+0x146>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80045ce:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80045d0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80045d4:	2000      	movs	r0, #0
 80045d6:	b003      	add	sp, #12
 80045d8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80045da:	2301      	movs	r3, #1
 80045dc:	e7f8      	b.n	80045d0 <USBD_StdDevReq+0x13c>
  cfgidx = (uint8_t)(req->wValue);                 
 80045de:	7889      	ldrb	r1, [r1, #2]
 80045e0:	4d30      	ldr	r5, [pc, #192]	; (80046a4 <USBD_StdDevReq+0x210>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80045e2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80045e4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80045e6:	d8e5      	bhi.n	80045b4 <USBD_StdDevReq+0x120>
    switch (pdev->dev_state) 
 80045e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d00c      	beq.n	800460a <USBD_StdDevReq+0x176>
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d1df      	bne.n	80045b4 <USBD_StdDevReq+0x120>
      if (cfgidx == 0) 
 80045f4:	b9b1      	cbnz	r1, 8004624 <USBD_StdDevReq+0x190>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80045f6:	2302      	movs	r3, #2
 80045f8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80045fc:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80045fe:	f7ff fe3a 	bl	8004276 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f927 	bl	8004856 <USBD_CtlSendStatus>
 8004608:	e7e4      	b.n	80045d4 <USBD_StdDevReq+0x140>
      if (cfgidx) 
 800460a:	2900      	cmp	r1, #0
 800460c:	d0f9      	beq.n	8004602 <USBD_StdDevReq+0x16e>
        pdev->dev_config = cfgidx;
 800460e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004610:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004612:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004614:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff fe21 	bl	8004260 <USBD_SetClassConfig>
 800461e:	2802      	cmp	r0, #2
 8004620:	d1ef      	bne.n	8004602 <USBD_StdDevReq+0x16e>
 8004622:	e7c7      	b.n	80045b4 <USBD_StdDevReq+0x120>
      else  if (cfgidx != pdev->dev_config) 
 8004624:	6841      	ldr	r1, [r0, #4]
 8004626:	2901      	cmp	r1, #1
 8004628:	d0eb      	beq.n	8004602 <USBD_StdDevReq+0x16e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800462a:	b2c9      	uxtb	r1, r1
 800462c:	f7ff fe23 	bl	8004276 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004630:	7829      	ldrb	r1, [r5, #0]
 8004632:	6061      	str	r1, [r4, #4]
 8004634:	e7f0      	b.n	8004618 <USBD_StdDevReq+0x184>
  if (req->wLength != 1) 
 8004636:	88ca      	ldrh	r2, [r1, #6]
 8004638:	2a01      	cmp	r2, #1
 800463a:	d1bb      	bne.n	80045b4 <USBD_StdDevReq+0x120>
    switch (pdev->dev_state )  
 800463c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004640:	2b02      	cmp	r3, #2
 8004642:	d003      	beq.n	800464c <USBD_StdDevReq+0x1b8>
 8004644:	2b03      	cmp	r3, #3
 8004646:	d1b5      	bne.n	80045b4 <USBD_StdDevReq+0x120>
      USBD_CtlSendData (pdev, 
 8004648:	1d01      	adds	r1, r0, #4
 800464a:	e759      	b.n	8004500 <USBD_StdDevReq+0x6c>
      pdev->dev_default_config = 0;
 800464c:	4601      	mov	r1, r0
 800464e:	2300      	movs	r3, #0
 8004650:	f841 3f08 	str.w	r3, [r1, #8]!
 8004654:	e754      	b.n	8004500 <USBD_StdDevReq+0x6c>
  switch (pdev->dev_state) 
 8004656:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800465a:	3b02      	subs	r3, #2
 800465c:	2b01      	cmp	r3, #1
 800465e:	d8a9      	bhi.n	80045b4 <USBD_StdDevReq+0x120>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004660:	2301      	movs	r3, #1
 8004662:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8004664:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004668:	b10b      	cbz	r3, 800466e <USBD_StdDevReq+0x1da>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800466a:	2303      	movs	r3, #3
 800466c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800466e:	2202      	movs	r2, #2
 8004670:	f104 010c 	add.w	r1, r4, #12
 8004674:	e744      	b.n	8004500 <USBD_StdDevReq+0x6c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004676:	884b      	ldrh	r3, [r1, #2]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d1ab      	bne.n	80045d4 <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 800467c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004680:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004684:	4629      	mov	r1, r5
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4620      	mov	r0, r4
 800468a:	4798      	blx	r3
 800468c:	e7b9      	b.n	8004602 <USBD_StdDevReq+0x16e>
  switch (pdev->dev_state)
 800468e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004692:	3b02      	subs	r3, #2
 8004694:	2b01      	cmp	r3, #1
 8004696:	d88d      	bhi.n	80045b4 <USBD_StdDevReq+0x120>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004698:	884b      	ldrh	r3, [r1, #2]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d19a      	bne.n	80045d4 <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 800469e:	2300      	movs	r3, #0
 80046a0:	e7ec      	b.n	800467c <USBD_StdDevReq+0x1e8>
 80046a2:	bf00      	nop
 80046a4:	2000018d 	.word	0x2000018d

080046a8 <USBD_StdItfReq>:
{
 80046a8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80046aa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80046ae:	2b03      	cmp	r3, #3
{
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80046b4:	d10d      	bne.n	80046d2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80046b6:	790b      	ldrb	r3, [r1, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d80a      	bhi.n	80046d2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80046bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80046c4:	88eb      	ldrh	r3, [r5, #6]
 80046c6:	b913      	cbnz	r3, 80046ce <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 f8c4 	bl	8004856 <USBD_CtlSendStatus>
}
 80046ce:	2000      	movs	r0, #0
 80046d0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80046d2:	f7ff fed3 	bl	800447c <USBD_CtlError.constprop.0>
    break;
 80046d6:	e7fa      	b.n	80046ce <USBD_StdItfReq+0x26>

080046d8 <USBD_StdEPReq>:
{
 80046d8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80046da:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80046dc:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80046de:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80046e2:	2a20      	cmp	r2, #32
{
 80046e4:	4604      	mov	r4, r0
 80046e6:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80046e8:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80046ea:	d105      	bne.n	80046f8 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80046ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4798      	blx	r3
}
 80046f4:	2000      	movs	r0, #0
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80046f8:	784a      	ldrb	r2, [r1, #1]
 80046fa:	2a01      	cmp	r2, #1
 80046fc:	d01c      	beq.n	8004738 <USBD_StdEPReq+0x60>
 80046fe:	d32a      	bcc.n	8004756 <USBD_StdEPReq+0x7e>
 8004700:	2a03      	cmp	r2, #3
 8004702:	d1f7      	bne.n	80046f4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8004704:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004708:	2a02      	cmp	r2, #2
 800470a:	d040      	beq.n	800478e <USBD_StdEPReq+0xb6>
 800470c:	2a03      	cmp	r2, #3
 800470e:	d002      	beq.n	8004716 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8004710:	f7ff feb4 	bl	800447c <USBD_CtlError.constprop.0>
      break;
 8004714:	e7ee      	b.n	80046f4 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004716:	884a      	ldrh	r2, [r1, #2]
 8004718:	b922      	cbnz	r2, 8004724 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800471a:	065e      	lsls	r6, r3, #25
 800471c:	d002      	beq.n	8004724 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800471e:	4619      	mov	r1, r3
 8004720:	f001 fd00 	bl	8006124 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8004724:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004728:	4629      	mov	r1, r5
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4620      	mov	r0, r4
 800472e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004730:	4620      	mov	r0, r4
 8004732:	f000 f890 	bl	8004856 <USBD_CtlSendStatus>
 8004736:	e7dd      	b.n	80046f4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8004738:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800473c:	2a02      	cmp	r2, #2
 800473e:	d026      	beq.n	800478e <USBD_StdEPReq+0xb6>
 8004740:	2a03      	cmp	r2, #3
 8004742:	d1e5      	bne.n	8004710 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004744:	884a      	ldrh	r2, [r1, #2]
 8004746:	2a00      	cmp	r2, #0
 8004748:	d1d4      	bne.n	80046f4 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800474a:	0659      	lsls	r1, r3, #25
 800474c:	d0f0      	beq.n	8004730 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800474e:	4619      	mov	r1, r3
 8004750:	f001 fcf6 	bl	8006140 <USBD_LL_ClearStallEP>
 8004754:	e7e6      	b.n	8004724 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8004756:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800475a:	2a02      	cmp	r2, #2
 800475c:	d017      	beq.n	800478e <USBD_StdEPReq+0xb6>
 800475e:	2a03      	cmp	r2, #3
 8004760:	d1d6      	bne.n	8004710 <USBD_StdEPReq+0x38>
 8004762:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004766:	f016 0f80 	tst.w	r6, #128	; 0x80
 800476a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800476e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004770:	bf14      	ite	ne
 8004772:	3514      	addne	r5, #20
 8004774:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004778:	f001 fcf0 	bl	800615c <USBD_LL_IsStallEP>
 800477c:	b168      	cbz	r0, 800479a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800477e:	2301      	movs	r3, #1
 8004780:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8004782:	2202      	movs	r2, #2
 8004784:	4629      	mov	r1, r5
 8004786:	4620      	mov	r0, r4
 8004788:	f000 f839 	bl	80047fe <USBD_CtlSendData>
      break;
 800478c:	e7b2      	b.n	80046f4 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800478e:	065a      	lsls	r2, r3, #25
 8004790:	d0b0      	beq.n	80046f4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8004792:	4619      	mov	r1, r3
 8004794:	f001 fcc6 	bl	8006124 <USBD_LL_StallEP>
 8004798:	e7ac      	b.n	80046f4 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800479a:	6028      	str	r0, [r5, #0]
 800479c:	e7f1      	b.n	8004782 <USBD_StdEPReq+0xaa>

0800479e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800479e:	780b      	ldrb	r3, [r1, #0]
 80047a0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80047a2:	784b      	ldrb	r3, [r1, #1]
 80047a4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80047a6:	78ca      	ldrb	r2, [r1, #3]
 80047a8:	788b      	ldrb	r3, [r1, #2]
 80047aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047ae:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80047b0:	794a      	ldrb	r2, [r1, #5]
 80047b2:	790b      	ldrb	r3, [r1, #4]
 80047b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047b8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80047ba:	79ca      	ldrb	r2, [r1, #7]
 80047bc:	798b      	ldrb	r3, [r1, #6]
 80047be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047c2:	80c3      	strh	r3, [r0, #6]
 80047c4:	4770      	bx	lr

080047c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80047c6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80047c8:	b188      	cbz	r0, 80047ee <USBD_GetString+0x28>
 80047ca:	4605      	mov	r5, r0
 80047cc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80047ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2c00      	cmp	r4, #0
 80047d6:	d1f9      	bne.n	80047cc <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	3302      	adds	r3, #2
 80047dc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80047de:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80047e0:	2303      	movs	r3, #3
 80047e2:	704b      	strb	r3, [r1, #1]
 80047e4:	3801      	subs	r0, #1
 80047e6:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80047e8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047ec:	b905      	cbnz	r5, 80047f0 <USBD_GetString+0x2a>
 80047ee:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80047f6:	3302      	adds	r3, #2
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	548c      	strb	r4, [r1, r2]
 80047fc:	e7f4      	b.n	80047e8 <USBD_GetString+0x22>

080047fe <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80047fe:	b510      	push	{r4, lr}
 8004800:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004802:	2202      	movs	r2, #2
 8004804:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004808:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800480a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800480c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800480e:	2100      	movs	r1, #0
 8004810:	f001 fcc6 	bl	80061a0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004814:	2000      	movs	r0, #0
 8004816:	bd10      	pop	{r4, pc}

08004818 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004818:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800481a:	4613      	mov	r3, r2
 800481c:	460a      	mov	r2, r1
 800481e:	2100      	movs	r1, #0
 8004820:	f001 fcbe 	bl	80061a0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004824:	2000      	movs	r0, #0
 8004826:	bd08      	pop	{r3, pc}

08004828 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004828:	b510      	push	{r4, lr}
 800482a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800482c:	2203      	movs	r2, #3
 800482e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004832:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004836:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004838:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800483c:	2100      	movs	r1, #0
 800483e:	f001 fcbd 	bl	80061bc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004842:	2000      	movs	r0, #0
 8004844:	bd10      	pop	{r4, pc}

08004846 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004846:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8004848:	4613      	mov	r3, r2
 800484a:	460a      	mov	r2, r1
 800484c:	2100      	movs	r1, #0
 800484e:	f001 fcb5 	bl	80061bc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004852:	2000      	movs	r0, #0
 8004854:	bd08      	pop	{r3, pc}

08004856 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004856:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004858:	2304      	movs	r3, #4
 800485a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800485e:	2300      	movs	r3, #0
 8004860:	461a      	mov	r2, r3
 8004862:	4619      	mov	r1, r3
 8004864:	f001 fc9c 	bl	80061a0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004868:	2000      	movs	r0, #0
 800486a:	bd08      	pop	{r3, pc}

0800486c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800486c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800486e:	2305      	movs	r3, #5
 8004870:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004874:	2300      	movs	r3, #0
 8004876:	461a      	mov	r2, r3
 8004878:	4619      	mov	r1, r3
 800487a:	f001 fc9f 	bl	80061bc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd08      	pop	{r3, pc}

08004882 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004882:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004884:	f000 fb82 	bl	8004f8c <vTaskStartScheduler>
  
  return osOK;
}
 8004888:	2000      	movs	r0, #0
 800488a:	bd08      	pop	{r3, pc}

0800488c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800488c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8004892:	8a02      	ldrh	r2, [r0, #16]
{
 8004894:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004896:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800489a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800489c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800489e:	bf14      	ite	ne
 80048a0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048a2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048a4:	a803      	add	r0, sp, #12
 80048a6:	9001      	str	r0, [sp, #4]
 80048a8:	9400      	str	r4, [sp, #0]
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 fa9e 	bl	8004dec <xTaskCreate>
 80048b0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048b2:	bf0c      	ite	eq
 80048b4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80048b6:	2000      	movne	r0, #0
}
 80048b8:	b005      	add	sp, #20
 80048ba:	bd30      	pop	{r4, r5, pc}

080048bc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80048bc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048be:	f000 fd27 	bl	8005310 <xTaskGetSchedulerState>
 80048c2:	2801      	cmp	r0, #1
 80048c4:	d003      	beq.n	80048ce <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80048c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80048ca:	f000 b8f3 	b.w	8004ab4 <xPortSysTickHandler>
 80048ce:	bd08      	pop	{r3, pc}

080048d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d0:	f100 0308 	add.w	r3, r0, #8
 80048d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048de:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048e0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048e2:	6003      	str	r3, [r0, #0]
 80048e4:	4770      	bx	lr

080048e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	6103      	str	r3, [r0, #16]
 80048ea:	4770      	bx	lr

080048ec <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80048fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048fe:	3301      	adds	r3, #1
 8004900:	6003      	str	r3, [r0, #0]
 8004902:	4770      	bx	lr

08004904 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004904:	6841      	ldr	r1, [r0, #4]
 8004906:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004908:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800490a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800490c:	6882      	ldr	r2, [r0, #8]
 800490e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004914:	bf08      	it	eq
 8004916:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004918:	2200      	movs	r2, #0
 800491a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	3801      	subs	r0, #1
 8004920:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004922:	4770      	bx	lr

08004924 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <prvTaskExitError+0x2c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	d008      	beq.n	800493e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	e7fe      	b.n	800493c <prvTaskExitError+0x18>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	e7fe      	b.n	800494e <prvTaskExitError+0x2a>
 8004950:	20000114 	.word	0x20000114

08004954 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004954:	4806      	ldr	r0, [pc, #24]	; (8004970 <prvPortStartFirstTask+0x1c>)
 8004956:	6800      	ldr	r0, [r0, #0]
 8004958:	6800      	ldr	r0, [r0, #0]
 800495a:	f380 8808 	msr	MSP, r0
 800495e:	b662      	cpsie	i
 8004960:	b661      	cpsie	f
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	df00      	svc	0
 800496c:	bf00      	nop
 800496e:	0000      	.short	0x0000
 8004970:	e000ed08 	.word	0xe000ed08

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
 8004982:	0000      	.short	0x0000
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800498c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxPortInitialiseStack+0x28>)
 8004992:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004996:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800499a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800499e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049a2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80049a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80049aa:	3844      	subs	r0, #68	; 0x44
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	08004925 	.word	0x08004925
	...

080049c0 <SVC_Handler>:
	__asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	20000d64 	.word	0x20000d64

080049e4 <vPortEnterCritical>:
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80049f4:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <vPortEnterCritical+0x3c>)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80049fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80049fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80049fe:	d10d      	bne.n	8004a1c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <vPortEnterCritical+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a08:	d008      	beq.n	8004a1c <vPortEnterCritical+0x38>
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	e7fe      	b.n	8004a1a <vPortEnterCritical+0x36>
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000114 	.word	0x20000114
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <vPortExitCritical+0x24>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	b943      	cbnz	r3, 8004a40 <vPortExitCritical+0x18>
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	e7fe      	b.n	8004a3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004a40:	3b01      	subs	r3, #1
 8004a42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a44:	b90b      	cbnz	r3, 8004a4a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	4770      	bx	lr
 8004a4c:	20000114 	.word	0x20000114

08004a50 <PendSV_Handler>:
	__asm volatile
 8004a50:	f3ef 8009 	mrs	r0, PSP
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <pxCurrentTCBConst>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f01e 0f10 	tst.w	lr, #16
 8004a60:	bf08      	it	eq
 8004a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a74:	f380 8811 	msr	BASEPRI, r0
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f000 fc0c 	bl	800529c <vTaskSwitchContext>
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f380 8811 	msr	BASEPRI, r0
 8004a8c:	bc08      	pop	{r3}
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a96:	f01e 0f10 	tst.w	lr, #16
 8004a9a:	bf08      	it	eq
 8004a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004aa0:	f380 8809 	msr	PSP, r0
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst>:
 8004ab0:	20000d64 	.word	0x20000d64

08004ab4 <xPortSysTickHandler>:
{
 8004ab4:	b508      	push	{r3, lr}
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004ac6:	f000 faa5 	bl	8005014 <xTaskIncrementTick>
 8004aca:	b118      	cbz	r0, 8004ad4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <xPortSysTickHandler+0x28>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	bd08      	pop	{r3, pc}
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <vPortSetupTimerInterrupt+0x1c>)
 8004ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aec:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <vPortSetupTimerInterrupt+0x20>)
 8004aee:	3b01      	subs	r3, #1
 8004af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <vPortSetupTimerInterrupt+0x24>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000118 	.word	0x20000118
 8004b00:	e000e014 	.word	0xe000e014
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xPortStartScheduler+0xc8>)
 8004b0a:	4a32      	ldr	r2, [pc, #200]	; (8004bd4 <xPortStartScheduler+0xcc>)
{
 8004b0c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	4291      	cmp	r1, r2
 8004b12:	d108      	bne.n	8004b26 <xPortStartScheduler+0x1e>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	e7fe      	b.n	8004b24 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <xPortStartScheduler+0xd0>)
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d108      	bne.n	8004b40 <xPortStartScheduler+0x38>
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	e7fe      	b.n	8004b3e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b42:	781a      	ldrb	r2, [r3, #0]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b4c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b5e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004b62:	2207      	movs	r2, #7
 8004b64:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b66:	2100      	movs	r1, #0
 8004b68:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004b6c:	0600      	lsls	r0, r0, #24
 8004b6e:	f102 34ff 	add.w	r4, r2, #4294967295
 8004b72:	d423      	bmi.n	8004bbc <xPortStartScheduler+0xb4>
 8004b74:	b101      	cbz	r1, 8004b78 <xPortStartScheduler+0x70>
 8004b76:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004b80:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b82:	9b01      	ldr	r3, [sp, #4]
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <xPortStartScheduler+0xe0>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004b9a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004b9c:	f7ff ffa0 	bl	8004ae0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <xPortStartScheduler+0xe4>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004ba6:	f7ff fee5 	bl	8004974 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <xPortStartScheduler+0xe8>)
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bb2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004bb4:	f7ff fece 	bl	8004954 <prvPortStartFirstTask>
	prvTaskExitError();
 8004bb8:	f7ff feb4 	bl	8004924 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004bc0:	0052      	lsls	r2, r2, #1
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	f88d 2003 	strb.w	r2, [sp, #3]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4622      	mov	r2, r4
 8004bcc:	e7cc      	b.n	8004b68 <xPortStartScheduler+0x60>
 8004bce:	bf00      	nop
 8004bd0:	e000ed00 	.word	0xe000ed00
 8004bd4:	410fc271 	.word	0x410fc271
 8004bd8:	410fc270 	.word	0x410fc270
 8004bdc:	e000e400 	.word	0xe000e400
 8004be0:	2000018e 	.word	0x2000018e
 8004be4:	20000190 	.word	0x20000190
 8004be8:	e000ed20 	.word	0xe000ed20
 8004bec:	20000114 	.word	0x20000114
 8004bf0:	e000ef34 	.word	0xe000ef34

08004bf4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bf4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <prvInsertBlockIntoFreeList+0x40>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4282      	cmp	r2, r0
 8004bfc:	d318      	bcc.n	8004c30 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bfe:	685c      	ldr	r4, [r3, #4]
 8004c00:	1919      	adds	r1, r3, r4
 8004c02:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c04:	bf01      	itttt	eq
 8004c06:	6841      	ldreq	r1, [r0, #4]
 8004c08:	4618      	moveq	r0, r3
 8004c0a:	1909      	addeq	r1, r1, r4
 8004c0c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c0e:	6844      	ldr	r4, [r0, #4]
 8004c10:	1901      	adds	r1, r0, r4
 8004c12:	428a      	cmp	r2, r1
 8004c14:	d107      	bne.n	8004c26 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <prvInsertBlockIntoFreeList+0x44>)
 8004c18:	6809      	ldr	r1, [r1, #0]
 8004c1a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c1c:	bf1f      	itttt	ne
 8004c1e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c20:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c22:	1909      	addne	r1, r1, r4
 8004c24:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c26:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c28:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c2a:	bf18      	it	ne
 8004c2c:	6018      	strne	r0, [r3, #0]
 8004c2e:	bd10      	pop	{r4, pc}
 8004c30:	4613      	mov	r3, r2
 8004c32:	e7e1      	b.n	8004bf8 <prvInsertBlockIntoFreeList+0x4>
 8004c34:	20000d5c 	.word	0x20000d5c
 8004c38:	20000194 	.word	0x20000194

08004c3c <pvPortMalloc>:
{
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004c42:	f000 f9df 	bl	8005004 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004c46:	493e      	ldr	r1, [pc, #248]	; (8004d40 <pvPortMalloc+0x104>)
 8004c48:	4d3e      	ldr	r5, [pc, #248]	; (8004d44 <pvPortMalloc+0x108>)
 8004c4a:	680b      	ldr	r3, [r1, #0]
 8004c4c:	bb0b      	cbnz	r3, 8004c92 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004c4e:	4a3e      	ldr	r2, [pc, #248]	; (8004d48 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c50:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c52:	bf1f      	itttt	ne
 8004c54:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c56:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c5a:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 8004c5e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c60:	bf14      	ite	ne
 8004c62:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c64:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c68:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004c6a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c6c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c70:	4e36      	ldr	r6, [pc, #216]	; (8004d4c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004c72:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c74:	2000      	movs	r0, #0
 8004c76:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c78:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8004c7a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c7c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c7e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c80:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c82:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c84:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c86:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <pvPortMalloc+0x118>)
 8004c8a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c90:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c92:	682f      	ldr	r7, [r5, #0]
 8004c94:	4227      	tst	r7, r4
 8004c96:	d116      	bne.n	8004cc6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004c98:	2c00      	cmp	r4, #0
 8004c9a:	d041      	beq.n	8004d20 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8004c9c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ca0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ca2:	bf1c      	itt	ne
 8004ca4:	f023 0307 	bicne.w	r3, r3, #7
 8004ca8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004caa:	b163      	cbz	r3, 8004cc6 <pvPortMalloc+0x8a>
 8004cac:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <pvPortMalloc+0x118>)
 8004cae:	6816      	ldr	r6, [r2, #0]
 8004cb0:	42b3      	cmp	r3, r6
 8004cb2:	4690      	mov	r8, r2
 8004cb4:	d807      	bhi.n	8004cc6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004cb6:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <pvPortMalloc+0x110>)
 8004cb8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cba:	6868      	ldr	r0, [r5, #4]
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d804      	bhi.n	8004cca <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004cc0:	6809      	ldr	r1, [r1, #0]
 8004cc2:	428d      	cmp	r5, r1
 8004cc4:	d107      	bne.n	8004cd6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004cc6:	2400      	movs	r4, #0
 8004cc8:	e02a      	b.n	8004d20 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cca:	682c      	ldr	r4, [r5, #0]
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	d0f7      	beq.n	8004cc0 <pvPortMalloc+0x84>
 8004cd0:	462a      	mov	r2, r5
 8004cd2:	4625      	mov	r5, r4
 8004cd4:	e7f1      	b.n	8004cba <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cd6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cd8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cda:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cdc:	1ac2      	subs	r2, r0, r3
 8004cde:	2a10      	cmp	r2, #16
 8004ce0:	d90f      	bls.n	8004d02 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ce2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce4:	0741      	lsls	r1, r0, #29
 8004ce6:	d008      	beq.n	8004cfa <pvPortMalloc+0xbe>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	e7fe      	b.n	8004cf8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cfa:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cfc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cfe:	f7ff ff79 	bl	8004bf4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d02:	4913      	ldr	r1, [pc, #76]	; (8004d50 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d04:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d06:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d08:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d0a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d0c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8004d0e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d12:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d16:	bf38      	it	cc
 8004d18:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d1a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d1c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d1e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004d20:	f000 fa0a 	bl	8005138 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d24:	0763      	lsls	r3, r4, #29
 8004d26:	d008      	beq.n	8004d3a <pvPortMalloc+0xfe>
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	e7fe      	b.n	8004d38 <pvPortMalloc+0xfc>
}
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d40:	20000194 	.word	0x20000194
 8004d44:	20000d50 	.word	0x20000d50
 8004d48:	20000198 	.word	0x20000198
 8004d4c:	20000d5c 	.word	0x20000d5c
 8004d50:	20000d58 	.word	0x20000d58
 8004d54:	20000d54 	.word	0x20000d54

08004d58 <vPortFree>:
{
 8004d58:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	b370      	cbz	r0, 8004dbc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <vPortFree+0x68>)
 8004d60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	4213      	tst	r3, r2
 8004d68:	d108      	bne.n	8004d7c <vPortFree+0x24>
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	e7fe      	b.n	8004d7a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d7c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004d80:	b141      	cbz	r1, 8004d94 <vPortFree+0x3c>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	e7fe      	b.n	8004d92 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d94:	ea23 0302 	bic.w	r3, r3, r2
 8004d98:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004d9c:	f000 f932 	bl	8005004 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <vPortFree+0x6c>)
 8004da2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004da6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004da8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dac:	440b      	add	r3, r1
 8004dae:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004db0:	f7ff ff20 	bl	8004bf4 <prvInsertBlockIntoFreeList>
}
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004db8:	f000 b9be 	b.w	8005138 <xTaskResumeAll>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000d50 	.word	0x20000d50
 8004dc4:	20000d54 	.word	0x20000d54

08004dc8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc8:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <prvResetNextTaskUnblockTime+0x1c>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvResetNextTaskUnblockTime+0x20>)
 8004dd0:	b919      	cbnz	r1, 8004dda <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dde:	68d2      	ldr	r2, [r2, #12]
 8004de0:	6852      	ldr	r2, [r2, #4]
 8004de2:	e7f8      	b.n	8004dd6 <prvResetNextTaskUnblockTime+0xe>
 8004de4:	20000d68 	.word	0x20000d68
 8004de8:	20000e40 	.word	0x20000e40

08004dec <xTaskCreate>:
	{
 8004dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004df4:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df6:	4650      	mov	r0, sl
	{
 8004df8:	460f      	mov	r7, r1
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfe:	f7ff ff1d 	bl	8004c3c <pvPortMalloc>
			if( pxStack != NULL )
 8004e02:	4605      	mov	r5, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f000 8096 	beq.w	8004f36 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e0a:	2054      	movs	r0, #84	; 0x54
 8004e0c:	f7ff ff16 	bl	8004c3c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004e10:	4604      	mov	r4, r0
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f000 808c 	beq.w	8004f30 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e18:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004e1c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e1e:	4455      	add	r5, sl
 8004e20:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e22:	f025 0a07 	bic.w	sl, r5, #7
 8004e26:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8004e2a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e2c:	7859      	ldrb	r1, [r3, #1]
 8004e2e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004e32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004e36:	b109      	cbz	r1, 8004e3c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e38:	42bb      	cmp	r3, r7
 8004e3a:	d1f7      	bne.n	8004e2c <xTaskCreate+0x40>
 8004e3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004e3e:	2d06      	cmp	r5, #6
 8004e40:	bf28      	it	cs
 8004e42:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e44:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e48:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004e4a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004e4c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e4e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e50:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004e54:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e58:	f7ff fd45 	bl	80048e6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e60:	f104 0018 	add.w	r0, r4, #24
 8004e64:	f7ff fd3f 	bl	80048e6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004e68:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e6c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e70:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e72:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e76:	464a      	mov	r2, r9
 8004e78:	4641      	mov	r1, r8
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	f7ff fd84 	bl	8004988 <pxPortInitialiseStack>
 8004e80:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004e82:	b106      	cbz	r6, 8004e86 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e84:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004e86:	f7ff fdad 	bl	80049e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004e8a:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004e8c:	4e32      	ldr	r6, [pc, #200]	; (8004f58 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004f84 <xTaskCreate+0x198>
 8004e94:	3201      	adds	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004e98:	6835      	ldr	r5, [r6, #0]
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	d14e      	bne.n	8004f3c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8004e9e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d11d      	bne.n	8004ee2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea6:	eb08 0005 	add.w	r0, r8, r5
 8004eaa:	3514      	adds	r5, #20
 8004eac:	f7ff fd10 	bl	80048d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb0:	2d8c      	cmp	r5, #140	; 0x8c
 8004eb2:	d1f8      	bne.n	8004ea6 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004eb4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004f88 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004eb8:	4d28      	ldr	r5, [pc, #160]	; (8004f5c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f7ff fd08 	bl	80048d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7ff fd05 	bl	80048d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ec6:	4826      	ldr	r0, [pc, #152]	; (8004f60 <xTaskCreate+0x174>)
 8004ec8:	f7ff fd02 	bl	80048d0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004ecc:	4825      	ldr	r0, [pc, #148]	; (8004f64 <xTaskCreate+0x178>)
 8004ece:	f7ff fcff 	bl	80048d0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004ed2:	4825      	ldr	r0, [pc, #148]	; (8004f68 <xTaskCreate+0x17c>)
 8004ed4:	f7ff fcfc 	bl	80048d0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ed8:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <xTaskCreate+0x180>)
 8004eda:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ede:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <xTaskCreate+0x184>)
 8004ee0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004ee2:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004ee4:	4924      	ldr	r1, [pc, #144]	; (8004f78 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004ee6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004ee8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004eea:	3301      	adds	r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004eee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ef0:	2501      	movs	r5, #1
 8004ef2:	fa05 f302 	lsl.w	r3, r5, r2
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	2014      	movs	r0, #20
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	fb00 8002 	mla	r0, r0, r2, r8
 8004f00:	4639      	mov	r1, r7
 8004f02:	f7ff fcf3 	bl	80048ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004f06:	f7ff fd8f 	bl	8004a28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004f0a:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <xTaskCreate+0x190>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b163      	cbz	r3, 8004f2a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d207      	bcs.n	8004f2a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <xTaskCreate+0x194>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	f3bf 8f6f 	isb	sy
	}
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004f30:	4628      	mov	r0, r5
 8004f32:	f7ff ff11 	bl	8004d58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f36:	f04f 35ff 	mov.w	r5, #4294967295
 8004f3a:	e7f6      	b.n	8004f2a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <xTaskCreate+0x190>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ce      	bne.n	8004ee2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f4a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004f4c:	bf98      	it	ls
 8004f4e:	6034      	strls	r4, [r6, #0]
 8004f50:	e7c7      	b.n	8004ee2 <xTaskCreate+0xf6>
 8004f52:	bf00      	nop
 8004f54:	20000dfc 	.word	0x20000dfc
 8004f58:	20000d64 	.word	0x20000d64
 8004f5c:	20000e28 	.word	0x20000e28
 8004f60:	20000e48 	.word	0x20000e48
 8004f64:	20000e74 	.word	0x20000e74
 8004f68:	20000e60 	.word	0x20000e60
 8004f6c:	20000d68 	.word	0x20000d68
 8004f70:	20000d6c 	.word	0x20000d6c
 8004f74:	20000e0c 	.word	0x20000e0c
 8004f78:	20000e10 	.word	0x20000e10
 8004f7c:	20000e5c 	.word	0x20000e5c
 8004f80:	e000ed04 	.word	0xe000ed04
 8004f84:	20000d70 	.word	0x20000d70
 8004f88:	20000e14 	.word	0x20000e14

08004f8c <vTaskStartScheduler>:
{
 8004f8c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004f8e:	4b17      	ldr	r3, [pc, #92]	; (8004fec <vTaskStartScheduler+0x60>)
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	2400      	movs	r4, #0
 8004f94:	9400      	str	r4, [sp, #0]
 8004f96:	4623      	mov	r3, r4
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	4915      	ldr	r1, [pc, #84]	; (8004ff0 <vTaskStartScheduler+0x64>)
 8004f9c:	4815      	ldr	r0, [pc, #84]	; (8004ff4 <vTaskStartScheduler+0x68>)
 8004f9e:	f7ff ff25 	bl	8004dec <xTaskCreate>
	if( xReturn == pdPASS )
 8004fa2:	2801      	cmp	r0, #1
 8004fa4:	d114      	bne.n	8004fd0 <vTaskStartScheduler+0x44>
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <vTaskStartScheduler+0x6c>)
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <vTaskStartScheduler+0x70>)
 8004fc0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <vTaskStartScheduler+0x74>)
 8004fc4:	601c      	str	r4, [r3, #0]
}
 8004fc6:	b002      	add	sp, #8
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004fcc:	f7ff bd9c 	b.w	8004b08 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d108      	bne.n	8004fe6 <vTaskStartScheduler+0x5a>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	e7fe      	b.n	8004fe4 <vTaskStartScheduler+0x58>
}
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	bf00      	nop
 8004fec:	20000e3c 	.word	0x20000e3c
 8004ff0:	080063ed 	.word	0x080063ed
 8004ff4:	08005229 	.word	0x08005229
 8004ff8:	20000e40 	.word	0x20000e40
 8004ffc:	20000e5c 	.word	0x20000e5c
 8005000:	20000e88 	.word	0x20000e88

08005004 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005004:	4a02      	ldr	r2, [pc, #8]	; (8005010 <vTaskSuspendAll+0xc>)
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000e08 	.word	0x20000e08

08005014 <xTaskIncrementTick>:
{
 8005014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005018:	4b3c      	ldr	r3, [pc, #240]	; (800510c <xTaskIncrementTick+0xf8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d153      	bne.n	80050c8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8005020:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <xTaskIncrementTick+0xfc>)
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8005026:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8005028:	b9bc      	cbnz	r4, 800505a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800502a:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <xTaskIncrementTick+0x100>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	b142      	cbz	r2, 8005044 <xTaskIncrementTick+0x30>
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	e7fe      	b.n	8005042 <xTaskIncrementTick+0x2e>
 8005044:	4a34      	ldr	r2, [pc, #208]	; (8005118 <xTaskIncrementTick+0x104>)
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	6810      	ldr	r0, [r2, #0]
 800504a:	6018      	str	r0, [r3, #0]
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	4a33      	ldr	r2, [pc, #204]	; (800511c <xTaskIncrementTick+0x108>)
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	f7ff feb7 	bl	8004dc8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800505a:	4d31      	ldr	r5, [pc, #196]	; (8005120 <xTaskIncrementTick+0x10c>)
 800505c:	4f31      	ldr	r7, [pc, #196]	; (8005124 <xTaskIncrementTick+0x110>)
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	429c      	cmp	r4, r3
 8005062:	f04f 0b00 	mov.w	fp, #0
 8005066:	d33e      	bcc.n	80050e6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005068:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005114 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800506c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005134 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005070:	f8d8 2000 	ldr.w	r2, [r8]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	bb72      	cbnz	r2, 80050d6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	602a      	str	r2, [r5, #0]
					break;
 800507e:	e032      	b.n	80050e6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005080:	f106 0a04 	add.w	sl, r6, #4
 8005084:	4650      	mov	r0, sl
 8005086:	f7ff fc3d 	bl	8004904 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800508a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800508c:	b119      	cbz	r1, 8005096 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800508e:	f106 0018 	add.w	r0, r6, #24
 8005092:	f7ff fc37 	bl	8004904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005096:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005098:	f8d9 3000 	ldr.w	r3, [r9]
 800509c:	2201      	movs	r2, #1
 800509e:	fa02 f100 	lsl.w	r1, r2, r0
 80050a2:	4319      	orrs	r1, r3
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <xTaskIncrementTick+0x114>)
 80050a6:	f8c9 1000 	str.w	r1, [r9]
 80050aa:	f04f 0e14 	mov.w	lr, #20
 80050ae:	4651      	mov	r1, sl
 80050b0:	fb0e 3000 	mla	r0, lr, r0, r3
 80050b4:	f7ff fc1a 	bl	80048ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80050bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80050be:	4291      	cmp	r1, r2
 80050c0:	bf28      	it	cs
 80050c2:	f04f 0b01 	movcs.w	fp, #1
 80050c6:	e7d3      	b.n	8005070 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <xTaskIncrementTick+0x118>)
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80050d0:	f04f 0b00 	mov.w	fp, #0
 80050d4:	e011      	b.n	80050fa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050d6:	f8d8 2000 	ldr.w	r2, [r8]
 80050da:	68d2      	ldr	r2, [r2, #12]
 80050dc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050de:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80050e0:	428c      	cmp	r4, r1
 80050e2:	d2cd      	bcs.n	8005080 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80050e4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xTaskIncrementTick+0x114>)
 80050ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050ec:	2214      	movs	r2, #20
 80050ee:	434a      	muls	r2, r1
 80050f0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80050f2:	2a02      	cmp	r2, #2
 80050f4:	bf28      	it	cs
 80050f6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <xTaskIncrementTick+0x11c>)
 80050fc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80050fe:	2a00      	cmp	r2, #0
 8005100:	bf18      	it	ne
 8005102:	f04f 0b01 	movne.w	fp, #1
}
 8005106:	4658      	mov	r0, fp
 8005108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510c:	20000e08 	.word	0x20000e08
 8005110:	20000e88 	.word	0x20000e88
 8005114:	20000d68 	.word	0x20000d68
 8005118:	20000d6c 	.word	0x20000d6c
 800511c:	20000e44 	.word	0x20000e44
 8005120:	20000e40 	.word	0x20000e40
 8005124:	20000d64 	.word	0x20000d64
 8005128:	20000d70 	.word	0x20000d70
 800512c:	20000e04 	.word	0x20000e04
 8005130:	20000e8c 	.word	0x20000e8c
 8005134:	20000e10 	.word	0x20000e10

08005138 <xTaskResumeAll>:
{
 8005138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800513c:	4c31      	ldr	r4, [pc, #196]	; (8005204 <xTaskResumeAll+0xcc>)
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	b943      	cbnz	r3, 8005154 <xTaskResumeAll+0x1c>
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	e7fe      	b.n	8005152 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005154:	f7ff fc46 	bl	80049e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	3b01      	subs	r3, #1
 800515c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515e:	6824      	ldr	r4, [r4, #0]
 8005160:	b12c      	cbz	r4, 800516e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005162:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005164:	f7ff fc60 	bl	8004a28 <vPortExitCritical>
}
 8005168:	4620      	mov	r0, r4
 800516a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <xTaskResumeAll+0xd0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f5      	beq.n	8005162 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005176:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005220 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800517a:	4f24      	ldr	r7, [pc, #144]	; (800520c <xTaskResumeAll+0xd4>)
 800517c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005224 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005180:	f8d9 3000 	ldr.w	r3, [r9]
 8005184:	b9e3      	cbnz	r3, 80051c0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8005186:	b10c      	cbz	r4, 800518c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8005188:	f7ff fe1e 	bl	8004dc8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800518c:	4d20      	ldr	r5, [pc, #128]	; (8005210 <xTaskResumeAll+0xd8>)
 800518e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005190:	b144      	cbz	r4, 80051a4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8005192:	4e20      	ldr	r6, [pc, #128]	; (8005214 <xTaskResumeAll+0xdc>)
 8005194:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005196:	f7ff ff3d 	bl	8005014 <xTaskIncrementTick>
 800519a:	b100      	cbz	r0, 800519e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800519c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800519e:	3c01      	subs	r4, #1
 80051a0:	d1f9      	bne.n	8005196 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80051a2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <xTaskResumeAll+0xdc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0da      	beq.n	8005162 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <xTaskResumeAll+0xe0>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80051bc:	2401      	movs	r4, #1
 80051be:	e7d1      	b.n	8005164 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80051c4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c8:	f104 0018 	add.w	r0, r4, #24
 80051cc:	f7ff fb9a 	bl	8004904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff fb97 	bl	8004904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	2501      	movs	r5, #1
 80051dc:	fa05 f302 	lsl.w	r3, r5, r2
 80051e0:	2014      	movs	r0, #20
 80051e2:	430b      	orrs	r3, r1
 80051e4:	fb00 8002 	mla	r0, r0, r2, r8
 80051e8:	4631      	mov	r1, r6
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	f7ff fb7e 	bl	80048ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <xTaskResumeAll+0xe4>)
 80051f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80051fa:	bf24      	itt	cs
 80051fc:	4b05      	ldrcs	r3, [pc, #20]	; (8005214 <xTaskResumeAll+0xdc>)
 80051fe:	601d      	strcs	r5, [r3, #0]
 8005200:	e7be      	b.n	8005180 <xTaskResumeAll+0x48>
 8005202:	bf00      	nop
 8005204:	20000e08 	.word	0x20000e08
 8005208:	20000dfc 	.word	0x20000dfc
 800520c:	20000e10 	.word	0x20000e10
 8005210:	20000e04 	.word	0x20000e04
 8005214:	20000e8c 	.word	0x20000e8c
 8005218:	e000ed04 	.word	0xe000ed04
 800521c:	20000d64 	.word	0x20000d64
 8005220:	20000e48 	.word	0x20000e48
 8005224:	20000d70 	.word	0x20000d70

08005228 <prvIdleTask>:
{
 8005228:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800522a:	4e17      	ldr	r6, [pc, #92]	; (8005288 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800522c:	4c17      	ldr	r4, [pc, #92]	; (800528c <prvIdleTask+0x64>)
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	b963      	cbnz	r3, 800524c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <prvIdleTask+0x68>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d9f8      	bls.n	800522c <prvIdleTask+0x4>
				taskYIELD();
 800523a:	4b16      	ldr	r3, [pc, #88]	; (8005294 <prvIdleTask+0x6c>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	e7ef      	b.n	800522c <prvIdleTask+0x4>
			vTaskSuspendAll();
 800524c:	f7ff feda 	bl	8005004 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005250:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8005252:	f7ff ff71 	bl	8005138 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8005256:	2d00      	cmp	r5, #0
 8005258:	d0e9      	beq.n	800522e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800525a:	f7ff fbc3 	bl	80049e4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800525e:	68f3      	ldr	r3, [r6, #12]
 8005260:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005262:	1d28      	adds	r0, r5, #4
 8005264:	f7ff fb4e 	bl	8004904 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <prvIdleTask+0x70>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	3b01      	subs	r3, #1
 800526e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	3b01      	subs	r3, #1
 8005274:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8005276:	f7ff fbd7 	bl	8004a28 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800527a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800527c:	f7ff fd6c 	bl	8004d58 <vPortFree>
			vPortFree( pxTCB );
 8005280:	4628      	mov	r0, r5
 8005282:	f7ff fd69 	bl	8004d58 <vPortFree>
 8005286:	e7d2      	b.n	800522e <prvIdleTask+0x6>
 8005288:	20000e74 	.word	0x20000e74
 800528c:	20000e00 	.word	0x20000e00
 8005290:	20000d70 	.word	0x20000d70
 8005294:	e000ed04 	.word	0xe000ed04
 8005298:	20000dfc 	.word	0x20000dfc

0800529c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800529c:	4b17      	ldr	r3, [pc, #92]	; (80052fc <vTaskSwitchContext+0x60>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <vTaskSwitchContext+0x64>)
{
 80052a2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052a4:	b112      	cbz	r2, 80052ac <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80052a6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80052ac:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <vTaskSwitchContext+0x68>)
 80052b0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f1c3 031f 	rsb	r3, r3, #31
 80052bc:	2214      	movs	r2, #20
 80052be:	4912      	ldr	r1, [pc, #72]	; (8005308 <vTaskSwitchContext+0x6c>)
 80052c0:	435a      	muls	r2, r3
 80052c2:	1888      	adds	r0, r1, r2
 80052c4:	588c      	ldr	r4, [r1, r2]
 80052c6:	b944      	cbnz	r4, 80052da <vTaskSwitchContext+0x3e>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	e7fe      	b.n	80052d8 <vTaskSwitchContext+0x3c>
 80052da:	6844      	ldr	r4, [r0, #4]
 80052dc:	3208      	adds	r2, #8
 80052de:	6864      	ldr	r4, [r4, #4]
 80052e0:	6044      	str	r4, [r0, #4]
 80052e2:	440a      	add	r2, r1
 80052e4:	4294      	cmp	r4, r2
 80052e6:	bf04      	itt	eq
 80052e8:	6862      	ldreq	r2, [r4, #4]
 80052ea:	6042      	streq	r2, [r0, #4]
 80052ec:	2214      	movs	r2, #20
 80052ee:	fb02 1303 	mla	r3, r2, r3, r1
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <vTaskSwitchContext+0x70>)
 80052f8:	e7d6      	b.n	80052a8 <vTaskSwitchContext+0xc>
 80052fa:	bf00      	nop
 80052fc:	20000e08 	.word	0x20000e08
 8005300:	20000e8c 	.word	0x20000e8c
 8005304:	20000e10 	.word	0x20000e10
 8005308:	20000d70 	.word	0x20000d70
 800530c:	20000d64 	.word	0x20000d64

08005310 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <xTaskGetSchedulerState+0x18>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b133      	cbz	r3, 8005324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <xTaskGetSchedulerState+0x1c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800531c:	bf0c      	ite	eq
 800531e:	2002      	moveq	r0, #2
 8005320:	2000      	movne	r0, #0
 8005322:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005324:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 8005326:	4770      	bx	lr
 8005328:	20000e5c 	.word	0x20000e5c
 800532c:	20000e08 	.word	0x20000e08

08005330 <StartDefaultTask>:
	/* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8005330:	b530      	push	{r4, r5, lr}
 8005332:	b085      	sub	sp, #20
	uint32_t i = 0;

	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8005334:	f000 fd9a 	bl	8005e6c <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN StartDefaultTask */

	/* -1- Enable GPIO Clock (to be able to program the configuration registers) */
	LED1_GPIO_CLK_ENABLE()
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <StartDefaultTask+0x84>)
	;
	LED3_GPIO_CLK_ENABLE()
	;

	/* -2- Configure IO in output push-pull mode to drive external LEDs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800533a:	4c1f      	ldr	r4, [pc, #124]	; (80053b8 <StartDefaultTask+0x88>)
	LED1_GPIO_CLK_ENABLE()
 800533c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

	GPIO_InitStruct.Pin = LED1_PIN;
	HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800533e:	481f      	ldr	r0, [pc, #124]	; (80053bc <StartDefaultTask+0x8c>)
	LED1_GPIO_CLK_ENABLE()
 8005340:	f042 0204 	orr.w	r2, r2, #4
 8005344:	64da      	str	r2, [r3, #76]	; 0x4c
 8005346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005348:	f002 0204 	and.w	r2, r2, #4
 800534c:	9201      	str	r2, [sp, #4]
 800534e:	9a01      	ldr	r2, [sp, #4]
	LED2_GPIO_CLK_ENABLE()
 8005350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005352:	f042 0202 	orr.w	r2, r2, #2
 8005356:	64da      	str	r2, [r3, #76]	; 0x4c
 8005358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800535a:	f002 0202 	and.w	r2, r2, #2
 800535e:	9202      	str	r2, [sp, #8]
 8005360:	9a02      	ldr	r2, [sp, #8]
	LED3_GPIO_CLK_ENABLE()
 8005362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005364:	f042 0202 	orr.w	r2, r2, #2
 8005368:	64da      	str	r2, [r3, #76]	; 0x4c
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005374:	2301      	movs	r3, #1
 8005376:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005378:	60a3      	str	r3, [r4, #8]
	HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800537a:	4621      	mov	r1, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	2303      	movs	r3, #3
	GPIO_InitStruct.Pin = LED1_PIN;
 800537e:	2580      	movs	r5, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005380:	60e3      	str	r3, [r4, #12]
	GPIO_InitStruct.Pin = LED1_PIN;
 8005382:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 8005384:	f7fb f982 	bl	800068c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED2_PIN;
	HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 8005388:	4621      	mov	r1, r4
 800538a:	480d      	ldr	r0, [pc, #52]	; (80053c0 <StartDefaultTask+0x90>)
	GPIO_InitStruct.Pin = LED2_PIN;
 800538c:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 800538e:	f7fb f97d 	bl	800068c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED3_PIN;
 8005392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005396:	6023      	str	r3, [r4, #0]
	HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
 8005398:	4621      	mov	r1, r4
 800539a:	4809      	ldr	r0, [pc, #36]	; (80053c0 <StartDefaultTask+0x90>)
		osDelay(25);
#else

		if (!i) {
			i = 10000000UL;
			HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800539c:	4c07      	ldr	r4, [pc, #28]	; (80053bc <StartDefaultTask+0x8c>)
	HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
 800539e:	f7fb f975 	bl	800068c <HAL_GPIO_Init>
	uint32_t i = 0;
 80053a2:	2300      	movs	r3, #0
		if (!i) {
 80053a4:	b923      	cbnz	r3, 80053b0 <StartDefaultTask+0x80>
			HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fb fa4c 	bl	8000846 <HAL_GPIO_TogglePin>
			i = 10000000UL;
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <StartDefaultTask+0x94>)
		}
		--i;
 80053b0:	3b01      	subs	r3, #1
		if (!i) {
 80053b2:	e7f7      	b.n	80053a4 <StartDefaultTask+0x74>
 80053b4:	40021000 	.word	0x40021000
 80053b8:	20000e90 	.word	0x20000e90
 80053bc:	48000800 	.word	0x48000800
 80053c0:	48000400 	.word	0x48000400
 80053c4:	00989680 	.word	0x00989680

080053c8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80053c8:	b530      	push	{r4, r5, lr}
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <MX_FREERTOS_Init+0x20>)
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80053ce:	b087      	sub	sp, #28
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80053d0:	ac01      	add	r4, sp, #4
 80053d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80053d8:	2100      	movs	r1, #0
 80053da:	a801      	add	r0, sp, #4
 80053dc:	f7ff fa56 	bl	800488c <osThreadCreate>
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <MX_FREERTOS_Init+0x24>)
 80053e2:	6018      	str	r0, [r3, #0]
}
 80053e4:	b007      	add	sp, #28
 80053e6:	bd30      	pop	{r4, r5, pc}
 80053e8:	080063c8 	.word	0x080063c8
 80053ec:	200010c8 	.word	0x200010c8

080053f0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053f0:	4b79      	ldr	r3, [pc, #484]	; (80055d8 <MX_GPIO_Init+0x1e8>)
{
 80053f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80053f8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80055f0 <MX_GPIO_Init+0x200>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AX0_SEL_GPIO_Port, AX0_SEL_Pin, GPIO_PIN_RESET);
 80053fc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80055f4 <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8005400:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80055f8 <MX_GPIO_Init+0x208>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005404:	4e75      	ldr	r6, [pc, #468]	; (80055dc <MX_GPIO_Init+0x1ec>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005406:	f042 0210 	orr.w	r2, r2, #16
 800540a:	64da      	str	r2, [r3, #76]	; 0x4c
 800540c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800540e:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005410:	f002 0210 	and.w	r2, r2, #16
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800541a:	f042 0204 	orr.w	r2, r2, #4
 800541e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005422:	f002 0204 	and.w	r2, r2, #4
 8005426:	9202      	str	r2, [sp, #8]
 8005428:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800542a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800542c:	f042 0220 	orr.w	r2, r2, #32
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c
 8005432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005434:	f002 0220 	and.w	r2, r2, #32
 8005438:	9203      	str	r2, [sp, #12]
 800543a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800543c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800543e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005442:	64da      	str	r2, [r3, #76]	; 0x4c
 8005444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005446:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800544a:	9204      	str	r2, [sp, #16]
 800544c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800544e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	64da      	str	r2, [r3, #76]	; 0x4c
 8005456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005458:	f002 0201 	and.w	r2, r2, #1
 800545c:	9205      	str	r2, [sp, #20]
 800545e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005460:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005462:	f042 0202 	orr.w	r2, r2, #2
 8005466:	64da      	str	r2, [r3, #76]	; 0x4c
 8005468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800546a:	f002 0202 	and.w	r2, r2, #2
 800546e:	9206      	str	r2, [sp, #24]
 8005470:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005478:	64da      	str	r2, [r3, #76]	; 0x4c
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005480:	9207      	str	r2, [sp, #28]
 8005482:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005486:	f042 0208 	orr.w	r2, r2, #8
 800548a:	64da      	str	r2, [r3, #76]	; 0x4c
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	9308      	str	r3, [sp, #32]
 8005494:	9b08      	ldr	r3, [sp, #32]
  HAL_PWREx_EnableVddIO2();
 8005496:	f7fc fa4f 	bl	8001938 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800549a:	4650      	mov	r0, sl
 800549c:	2200      	movs	r2, #0
 800549e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80054a2:	f7fb f9cb 	bl	800083c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AX0_SEL_GPIO_Port, AX0_SEL_Pin, GPIO_PIN_RESET);
 80054a6:	4648      	mov	r0, r9
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054ae:	f7fb f9c5 	bl	800083c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80054b2:	4640      	mov	r0, r8
 80054b4:	2200      	movs	r2, #0
 80054b6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80054ba:	f7fb f9bf 	bl	800083c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80054be:	2200      	movs	r2, #0
 80054c0:	4630      	mov	r0, r6
 80054c2:	2180      	movs	r1, #128	; 0x80
 80054c4:	f7fb f9ba 	bl	800083c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c8:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054ca:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80054cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054d0:	a909      	add	r1, sp, #36	; 0x24
 80054d2:	4843      	ldr	r0, [pc, #268]	; (80055e0 <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80054d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054da:	f7fb f8d7 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_UserButton_Pin;
 80054de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_UserButton_GPIO_Port, &GPIO_InitStruct);
 80054e4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054e6:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <MX_GPIO_Init+0x1f4>)
 80054e8:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_UserButton_GPIO_Port, &GPIO_InitStruct);
 80054ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_UserButton_GPIO_Port, &GPIO_InitStruct);
 80054ee:	f7fb f8cd 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF8 
                           PF9 PF10 PF11 PF12 
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80054f2:	f64f 737f 	movw	r3, #65407	; 0xff7f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054f6:	a909      	add	r1, sp, #36	; 0x24
 80054f8:	483b      	ldr	r0, [pc, #236]	; (80055e8 <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80054fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054fc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fe:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005500:	f7fb f8c4 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 PC4 PC5 
                           PC6 PC8 PC9 PC10 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8005504:	f640 7379 	movw	r3, #3961	; 0xf79
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005508:	a909      	add	r1, sp, #36	; 0x24
 800550a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800550e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005512:	f7fb f8bb 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005516:	f248 030f 	movw	r3, #32783	; 0x800f
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551a:	a909      	add	r1, sp, #36	; 0x24
 800551c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005520:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005522:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005526:	f7fb f8b1 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 800552a:	f24a 1307 	movw	r3, #41223	; 0xa107
                          |GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552e:	a909      	add	r1, sp, #36	; 0x24
 8005530:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005534:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005536:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005538:	f7fb f8a8 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800553c:	f244 231f 	movw	r3, #16927	; 0x421f
                          |GPIO_PIN_4|GPIO_PIN_9|PG14__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005540:	a909      	add	r1, sp, #36	; 0x24
 8005542:	4640      	mov	r0, r8

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005544:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005546:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005548:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800554c:	f7fb f89e 	bl	800068c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005550:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005554:	a909      	add	r1, sp, #36	; 0x24
 8005556:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800555a:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005560:	f7fb f894 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD15 PD0 
                           PD1 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8005564:	f64b 73fb 	movw	r3, #49147	; 0xbffb
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005568:	a909      	add	r1, sp, #36	; 0x24
 800556a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800556c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800556e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005570:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005572:	f7fb f88b 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AX0_SEL_Pin;
 8005576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AX0_SEL_GPIO_Port, &GPIO_InitStruct);
 800557a:	a909      	add	r1, sp, #36	; 0x24
 800557c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = AX0_SEL_Pin;
 800557e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005580:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005584:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(AX0_SEL_GPIO_Port, &GPIO_InitStruct);
 8005586:	f7fb f881 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 800558a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800558e:	a909      	add	r1, sp, #36	; 0x24
 8005590:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8005592:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005594:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005596:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005598:	f7fb f878 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 800559c:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055a0:	a909      	add	r1, sp, #36	; 0x24
 80055a2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80055a4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055a6:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055aa:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055ac:	f7fb f86e 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80055b0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80055b2:	a909      	add	r1, sp, #36	; 0x24
 80055b4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD1_Pin;
 80055b6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055bc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80055be:	f7fb f865 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055c2:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80055c4:	a909      	add	r1, sp, #36	; 0x24
 80055c6:	4809      	ldr	r0, [pc, #36]	; (80055ec <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055ca:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80055ce:	f7fb f85d 	bl	800068c <HAL_GPIO_Init>

}
 80055d2:	b00e      	add	sp, #56	; 0x38
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	48000800 	.word	0x48000800
 80055e0:	48001000 	.word	0x48001000
 80055e4:	10110000 	.word	0x10110000
 80055e8:	48001400 	.word	0x48001400
 80055ec:	48001c00 	.word	0x48001c00
 80055f0:	48000400 	.word	0x48000400
 80055f4:	48000c00 	.word	0x48000c00
 80055f8:	48001800 	.word	0x48001800

080055fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055fc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80055fe:	4815      	ldr	r0, [pc, #84]	; (8005654 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00602173;
 8005600:	4b15      	ldr	r3, [pc, #84]	; (8005658 <MX_I2C1_Init+0x5c>)
 8005602:	4916      	ldr	r1, [pc, #88]	; (800565c <MX_I2C1_Init+0x60>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005604:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00602173;
 8005606:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800560e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005610:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005612:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005614:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005616:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005618:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800561a:	f7fb f954 	bl	80008c6 <HAL_I2C_Init>
 800561e:	b118      	cbz	r0, 8005628 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005620:	214c      	movs	r1, #76	; 0x4c
 8005622:	480f      	ldr	r0, [pc, #60]	; (8005660 <MX_I2C1_Init+0x64>)
 8005624:	f000 f8d3 	bl	80057ce <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005628:	2100      	movs	r1, #0
 800562a:	480a      	ldr	r0, [pc, #40]	; (8005654 <MX_I2C1_Init+0x58>)
 800562c:	f7fb fc16 	bl	8000e5c <HAL_I2CEx_ConfigAnalogFilter>
 8005630:	b118      	cbz	r0, 800563a <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005632:	2153      	movs	r1, #83	; 0x53
 8005634:	480a      	ldr	r0, [pc, #40]	; (8005660 <MX_I2C1_Init+0x64>)
 8005636:	f000 f8ca 	bl	80057ce <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800563a:	2100      	movs	r1, #0
 800563c:	4805      	ldr	r0, [pc, #20]	; (8005654 <MX_I2C1_Init+0x58>)
 800563e:	f7fb fc33 	bl	8000ea8 <HAL_I2CEx_ConfigDigitalFilter>
 8005642:	b128      	cbz	r0, 8005650 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005644:	215a      	movs	r1, #90	; 0x5a
 8005646:	4806      	ldr	r0, [pc, #24]	; (8005660 <MX_I2C1_Init+0x64>)
  }

}
 8005648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800564c:	f000 b8bf 	b.w	80057ce <_Error_Handler>
 8005650:	bd08      	pop	{r3, pc}
 8005652:	bf00      	nop
 8005654:	200010cc 	.word	0x200010cc
 8005658:	00602173 	.word	0x00602173
 800565c:	40005400 	.word	0x40005400
 8005660:	080063fe 	.word	0x080063fe

08005664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8005666:	6802      	ldr	r2, [r0, #0]
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <HAL_I2C_MspInit+0x64>)
 800566a:	429a      	cmp	r2, r3
 800566c:	d129      	bne.n	80056c2 <HAL_I2C_MspInit+0x5e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800566e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005672:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005674:	2312      	movs	r3, #18
 8005676:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005678:	2301      	movs	r3, #1
 800567a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567c:	2303      	movs	r3, #3
 800567e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005680:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005682:	eb0d 0103 	add.w	r1, sp, r3
 8005686:	4811      	ldr	r0, [pc, #68]	; (80056cc <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005688:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	f7fa ffff 	bl	800068c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <HAL_I2C_MspInit+0x6c>)
 8005690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005692:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005696:	659a      	str	r2, [r3, #88]	; 0x58
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2105      	movs	r1, #5
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056a2:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80056a4:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056a6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80056a8:	f7fa ff6a 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80056ac:	201f      	movs	r0, #31
 80056ae:	f7fa ff9b 	bl	80005e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80056b2:	2020      	movs	r0, #32
 80056b4:	2200      	movs	r2, #0
 80056b6:	2105      	movs	r1, #5
 80056b8:	f7fa ff62 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80056bc:	2020      	movs	r0, #32
 80056be:	f7fa ff93 	bl	80005e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80056c2:	b007      	add	sp, #28
 80056c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c8:	40005400 	.word	0x40005400
 80056cc:	48000400 	.word	0x48000400
 80056d0:	40021000 	.word	0x40021000

080056d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability
	 */
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80056d6:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <SystemClock_Config+0xb0>)
 80056d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 80056dc:	b0bb      	sub	sp, #236	; 0xec
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80056de:	f023 0318 	bic.w	r3, r3, #24
 80056e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80056e6:	2326      	movs	r3, #38	; 0x26
 80056e8:	9306      	str	r3, [sp, #24]
			| RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80056ea:	2301      	movs	r3, #1
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
	RCC_OscInitStruct.HSICalibrationValue = 64;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 40;
 80056ec:	2228      	movs	r2, #40	; 0x28
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80056ee:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80056f0:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80056f2:	2340      	movs	r3, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80056f4:	f44f 7780 	mov.w	r7, #256	; 0x100
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80056f8:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 4;
 80056fa:	2604      	movs	r6, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056fc:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLN = 40;
 80056fe:	9213      	str	r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005700:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8005702:	2208      	movs	r2, #8
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005704:	9709      	str	r7, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005706:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005708:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 4;
 800570a:	9612      	str	r6, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800570c:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800570e:	9215      	str	r2, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005710:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005712:	f7fc f9c3 	bl	8001a9c <HAL_RCC_OscConfig>
 8005716:	b100      	cbz	r0, 800571a <SystemClock_Config+0x46>
 8005718:	e7fe      	b.n	8005718 <SystemClock_Config+0x44>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800571a:	240f      	movs	r4, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800571c:	2103      	movs	r1, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800571e:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005720:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005722:	9005      	str	r0, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8005724:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005726:	9401      	str	r4, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005728:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800572a:	f7fc fc17 	bl	8001f5c <HAL_RCC_ClockConfig>
 800572e:	b100      	cbz	r0, 8005732 <SystemClock_Config+0x5e>
 8005730:	e7fe      	b.n	8005730 <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_UART5
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <SystemClock_Config+0xb4>)
 8005734:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8005736:	f44f 7500 	mov.w	r5, #512	; 0x200
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800573a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800573e:	902b      	str	r0, [sp, #172]	; 0xac
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005740:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005742:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8005744:	9529      	str	r5, [sp, #164]	; 0xa4
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8005746:	932a      	str	r3, [sp, #168]	; 0xa8
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005748:	9739      	str	r7, [sp, #228]	; 0xe4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800574a:	f7fc fe09 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 800574e:	b100      	cbz	r0, 8005752 <SystemClock_Config+0x7e>
 8005750:	e7fe      	b.n	8005750 <SystemClock_Config+0x7c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8005752:	4628      	mov	r0, r5
 8005754:	f7fc f8b4 	bl	80018c0 <HAL_PWREx_ControlVoltageScaling>
 8005758:	4605      	mov	r5, r0
 800575a:	b100      	cbz	r0, 800575e <SystemClock_Config+0x8a>
 800575c:	e7fe      	b.n	800575c <SystemClock_Config+0x88>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800575e:	f7fc fcb3 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 8005762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005766:	fbb0 f0f3 	udiv	r0, r0, r3
 800576a:	f7fa ff49 	bl	8000600 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800576e:	4630      	mov	r0, r6
 8005770:	f7fa ff5c 	bl	800062c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005774:	462a      	mov	r2, r5
 8005776:	4621      	mov	r1, r4
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	f7fa ff00 	bl	8000580 <HAL_NVIC_SetPriority>
}
 8005780:	b03b      	add	sp, #236	; 0xec
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	00022070 	.word	0x00022070

0800578c <main>:
{
 800578c:	b508      	push	{r3, lr}
	HAL_Init();
 800578e:	f7fa feb7 	bl	8000500 <HAL_Init>
	SystemClock_Config();
 8005792:	f7ff ff9f 	bl	80056d4 <SystemClock_Config>
	MX_GPIO_Init();
 8005796:	f7ff fe2b 	bl	80053f0 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 800579a:	f000 fac3 	bl	8005d24 <MX_LPUART1_UART_Init>
	MX_TIM5_Init();
 800579e:	f000 fa49 	bl	8005c34 <MX_TIM5_Init>
	MX_SPI1_Init();
 80057a2:	f000 f8b1 	bl	8005908 <MX_SPI1_Init>
	MX_UART5_Init();
 80057a6:	f000 fadf 	bl	8005d68 <MX_UART5_Init>
	MX_SPI2_Init();
 80057aa:	f000 f8d5 	bl	8005958 <MX_SPI2_Init>
	MX_I2C1_Init();
 80057ae:	f7ff ff25 	bl	80055fc <MX_I2C1_Init>
	MX_RTC_Init();
 80057b2:	f000 f80d 	bl	80057d0 <MX_RTC_Init>
	MX_FREERTOS_Init();
 80057b6:	f7ff fe07 	bl	80053c8 <MX_FREERTOS_Init>
	osKernelStart();
 80057ba:	f7ff f862 	bl	8004882 <osKernelStart>
 80057be:	e7fe      	b.n	80057be <main+0x32>

080057c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80057c0:	6803      	ldr	r3, [r0, #0]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 80057c8:	f7fa beac 	b.w	8000524 <HAL_IncTick>
 80057cc:	4770      	bx	lr

080057ce <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80057ce:	e7fe      	b.n	80057ce <_Error_Handler>

080057d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80057d0:	b530      	push	{r4, r5, lr}
  RTC_DateTypeDef sDate;
  RTC_AlarmTypeDef sAlarm;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80057d2:	4d38      	ldr	r5, [pc, #224]	; (80058b4 <MX_RTC_Init+0xe4>)
 80057d4:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <MX_RTC_Init+0xe8>)
 80057d6:	602b      	str	r3, [r5, #0]
{
 80057d8:	b091      	sub	sp, #68	; 0x44
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80057da:	2100      	movs	r1, #0
 80057dc:	4628      	mov	r0, r5
 80057de:	f7fd fab2 	bl	8002d46 <HAL_RTCEx_BKUPRead>
 80057e2:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80057e6:	4298      	cmp	r0, r3
 80057e8:	d061      	beq.n	80058ae <MX_RTC_Init+0xde>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80057ea:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80057ec:	2400      	movs	r4, #0
  hrtc.Init.AsynchPrediv = 127;
 80057ee:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80057f0:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80057f2:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80057f4:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = 255;
 80057f6:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80057f8:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80057fa:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80057fc:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80057fe:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005800:	f7fd f80e 	bl	8002820 <HAL_RTC_Init>
 8005804:	b118      	cbz	r0, 800580e <MX_RTC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005806:	214f      	movs	r1, #79	; 0x4f
 8005808:	482c      	ldr	r0, [pc, #176]	; (80058bc <MX_RTC_Init+0xec>)
 800580a:	f7ff ffe0 	bl	80057ce <_Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800580e:	2201      	movs	r2, #1
 8005810:	a901      	add	r1, sp, #4
 8005812:	4828      	ldr	r0, [pc, #160]	; (80058b4 <MX_RTC_Init+0xe4>)
  sTime.Hours = 0x0;
 8005814:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8005818:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 800581c:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005820:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005822:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005824:	f7fd f85c 	bl	80028e0 <HAL_RTC_SetTime>
 8005828:	b118      	cbz	r0, 8005832 <MX_RTC_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800582a:	215b      	movs	r1, #91	; 0x5b
 800582c:	4823      	ldr	r0, [pc, #140]	; (80058bc <MX_RTC_Init+0xec>)
 800582e:	f7ff ffce 	bl	80057ce <_Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005832:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8005834:	2400      	movs	r4, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005836:	4669      	mov	r1, sp
 8005838:	481e      	ldr	r0, [pc, #120]	; (80058b4 <MX_RTC_Init+0xe4>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800583a:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800583e:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8005842:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8005846:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800584a:	f7fd f8c2 	bl	80029d2 <HAL_RTC_SetDate>
 800584e:	b118      	cbz	r0, 8005858 <MX_RTC_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005850:	2165      	movs	r1, #101	; 0x65
 8005852:	481a      	ldr	r0, [pc, #104]	; (80058bc <MX_RTC_Init+0xec>)
 8005854:	f7ff ffbb 	bl	80057ce <_Error_Handler>
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
 8005858:	2201      	movs	r2, #1
  sAlarm.Alarm = RTC_ALARM_A;
 800585a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800585e:	a906      	add	r1, sp, #24
 8005860:	4814      	ldr	r0, [pc, #80]	; (80058b4 <MX_RTC_Init+0xe4>)
  sAlarm.AlarmTime.Hours = 0x0;
 8005862:	f88d 4018 	strb.w	r4, [sp, #24]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005866:	f88d 4019 	strb.w	r4, [sp, #25]
  sAlarm.AlarmTime.Seconds = 0x0;
 800586a:	f88d 401a 	strb.w	r4, [sp, #26]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800586e:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005870:	9409      	str	r4, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005872:	940a      	str	r4, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005874:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005876:	940c      	str	r4, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005878:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmDateWeekDay = 0x1;
 800587a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  sAlarm.Alarm = RTC_ALARM_A;
 800587e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005880:	f7fd f910 	bl	8002aa4 <HAL_RTC_SetAlarm_IT>
 8005884:	b118      	cbz	r0, 800588e <MX_RTC_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005886:	2177      	movs	r1, #119	; 0x77
 8005888:	480c      	ldr	r0, [pc, #48]	; (80058bc <MX_RTC_Init+0xec>)
 800588a:	f7ff ffa0 	bl	80057ce <_Error_Handler>
  }

    /**Enable the WakeUp 
    */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800588e:	2200      	movs	r2, #0
 8005890:	4611      	mov	r1, r2
 8005892:	4808      	ldr	r0, [pc, #32]	; (80058b4 <MX_RTC_Init+0xe4>)
 8005894:	f7fd f9c0 	bl	8002c18 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005898:	b118      	cbz	r0, 80058a2 <MX_RTC_Init+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800589a:	217e      	movs	r1, #126	; 0x7e
 800589c:	4807      	ldr	r0, [pc, #28]	; (80058bc <MX_RTC_Init+0xec>)
 800589e:	f7ff ff96 	bl	80057ce <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80058a2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80058a6:	2100      	movs	r1, #0
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <MX_RTC_Init+0xe4>)
 80058aa:	f7fd fa47 	bl	8002d3c <HAL_RTCEx_BKUPWrite>
  }

}
 80058ae:	b011      	add	sp, #68	; 0x44
 80058b0:	bd30      	pop	{r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	20001118 	.word	0x20001118
 80058b8:	40002800 	.word	0x40002800
 80058bc:	0800640b 	.word	0x0800640b

080058c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80058c0:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <HAL_RTC_MspInit+0x40>)
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d118      	bne.n	80058fc <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80058ca:	4a0e      	ldr	r2, [pc, #56]	; (8005904 <HAL_RTC_MspInit+0x44>)
 80058cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80058d8:	2200      	movs	r2, #0
 80058da:	4611      	mov	r1, r2
 80058dc:	2003      	movs	r0, #3
 80058de:	f7fa fe4f 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80058e2:	2003      	movs	r0, #3
 80058e4:	f7fa fe80 	bl	80005e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80058e8:	2200      	movs	r2, #0
 80058ea:	2029      	movs	r0, #41	; 0x29
 80058ec:	4611      	mov	r1, r2
 80058ee:	f7fa fe47 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80058f2:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80058f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80058f8:	f7fa be76 	b.w	80005e8 <HAL_NVIC_EnableIRQ>
 80058fc:	bd08      	pop	{r3, pc}
 80058fe:	bf00      	nop
 8005900:	40002800 	.word	0x40002800
 8005904:	40021000 	.word	0x40021000

08005908 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8005908:	4810      	ldr	r0, [pc, #64]	; (800594c <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800590a:	4911      	ldr	r1, [pc, #68]	; (8005950 <MX_SPI1_Init+0x48>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800590c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8005910:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005912:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005914:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005918:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800591a:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800591c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005920:	61c2      	str	r2, [r0, #28]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 8005922:	2210      	movs	r2, #16
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005924:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 8005928:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800592a:	2300      	movs	r3, #0
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800592c:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800592e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005930:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005932:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005934:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005936:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005938:	f7fd fa0b 	bl	8002d52 <HAL_SPI_Init>
 800593c:	b128      	cbz	r0, 800594a <MX_SPI1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800593e:	214f      	movs	r1, #79	; 0x4f
 8005940:	4804      	ldr	r0, [pc, #16]	; (8005954 <MX_SPI1_Init+0x4c>)
  }

}
 8005942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005946:	f7ff bf42 	b.w	80057ce <_Error_Handler>
 800594a:	bd08      	pop	{r3, pc}
 800594c:	200011a0 	.word	0x200011a0
 8005950:	40013000 	.word	0x40013000
 8005954:	08006418 	.word	0x08006418

08005958 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8005958:	4810      	ldr	r0, [pc, #64]	; (800599c <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800595a:	4911      	ldr	r1, [pc, #68]	; (80059a0 <MX_SPI2_Init+0x48>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800595c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8005960:	b508      	push	{r3, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005962:	60c2      	str	r2, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005964:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005968:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800596a:	2208      	movs	r2, #8
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800596c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005970:	61c2      	str	r2, [r0, #28]
  hspi2.Init.TIMode = SPI_TIMODE_ENABLE;
 8005972:	2210      	movs	r2, #16
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005974:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.TIMode = SPI_TIMODE_ENABLE;
 8005978:	6242      	str	r2, [r0, #36]	; 0x24
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800597a:	2300      	movs	r3, #0
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 800597c:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800597e:	6083      	str	r3, [r0, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005980:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005982:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005984:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005986:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005988:	f7fd f9e3 	bl	8002d52 <HAL_SPI_Init>
 800598c:	b128      	cbz	r0, 800599a <MX_SPI2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800598e:	2164      	movs	r1, #100	; 0x64
 8005990:	4804      	ldr	r0, [pc, #16]	; (80059a4 <MX_SPI2_Init+0x4c>)
  }

}
 8005992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005996:	f7ff bf1a 	b.w	80057ce <_Error_Handler>
 800599a:	bd08      	pop	{r3, pc}
 800599c:	2000113c 	.word	0x2000113c
 80059a0:	40003800 	.word	0x40003800
 80059a4:	08006418 	.word	0x08006418

080059a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80059aa:	6803      	ldr	r3, [r0, #0]
 80059ac:	4a2c      	ldr	r2, [pc, #176]	; (8005a60 <HAL_SPI_MspInit+0xb8>)
 80059ae:	4293      	cmp	r3, r2
{
 80059b0:	b089      	sub	sp, #36	; 0x24
  if(spiHandle->Instance==SPI1)
 80059b2:	d126      	bne.n	8005a02 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059b4:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_SPI_MspInit+0xbc>)
 80059b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	9b01      	ldr	r3, [sp, #4]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = AX0_NSS_Pin|AX0_SCK_Pin|AX0_MOSI_Pin;
 80059c8:	23b0      	movs	r3, #176	; 0xb0
 80059ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d0:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059d2:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d4:	a903      	add	r1, sp, #12
 80059d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059dc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059de:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059e0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e2:	f7fa fe53 	bl	800068c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AX0_MISO_Pin;
 80059e6:	2340      	movs	r3, #64	; 0x40
 80059e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059ea:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ec:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059f2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(AX0_MISO_GPIO_Port, &GPIO_InitStruct);
 80059f4:	a903      	add	r1, sp, #12
 80059f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = AX1_SCK_Pin|AX1_NSS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059fa:	f7fa fe47 	bl	800068c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80059fe:	b009      	add	sp, #36	; 0x24
 8005a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8005a02:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <HAL_SPI_MspInit+0xc0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d1fa      	bne.n	80059fe <HAL_SPI_MspInit+0x56>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a08:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <HAL_SPI_MspInit+0xbc>)
    HAL_GPIO_Init(AX1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005a0a:	4818      	ldr	r0, [pc, #96]	; (8005a6c <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a12:	659a      	str	r2, [r3, #88]	; 0x58
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = AX1_MOSI_Pin;
 8005a1c:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1e:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AX1_MOSI_Pin;
 8005a22:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a24:	2301      	movs	r3, #1
    HAL_GPIO_Init(AX1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005a26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a2c:	2605      	movs	r6, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a30:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8005a32:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(AX1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005a34:	f7fa fe2a 	bl	800068c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AX1_MISO_Pin;
 8005a38:	2304      	movs	r3, #4
    HAL_GPIO_Init(AX1_MISO_GPIO_Port, &GPIO_InitStruct);
 8005a3a:	a903      	add	r1, sp, #12
 8005a3c:	480b      	ldr	r0, [pc, #44]	; (8005a6c <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = AX1_MISO_Pin;
 8005a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a40:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a42:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a44:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a46:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(AX1_MISO_GPIO_Port, &GPIO_InitStruct);
 8005a48:	f7fa fe20 	bl	800068c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AX1_SCK_Pin|AX1_NSS_Pin;
 8005a4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a52:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a56:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a58:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a5a:	a903      	add	r1, sp, #12
 8005a5c:	4804      	ldr	r0, [pc, #16]	; (8005a70 <HAL_SPI_MspInit+0xc8>)
 8005a5e:	e7cc      	b.n	80059fa <HAL_SPI_MspInit+0x52>
 8005a60:	40013000 	.word	0x40013000
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40003800 	.word	0x40003800
 8005a6c:	48000800 	.word	0x48000800
 8005a70:	48000400 	.word	0x48000400

08005a74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a74:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <HAL_MspInit+0x98>)
{
 8005a76:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60
 8005a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a82:	f002 0201 	and.w	r2, r2, #1
 8005a86:	9200      	str	r2, [sp, #0]
 8005a88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a90:	659a      	str	r2, [r3, #88]	; 0x58
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a9a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a9c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a9e:	f7fa fd5d 	bl	800055c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	f06f 000b 	mvn.w	r0, #11
 8005aaa:	f7fa fd69 	bl	8000580 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	f06f 000a 	mvn.w	r0, #10
 8005ab6:	f7fa fd63 	bl	8000580 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005aba:	2200      	movs	r2, #0
 8005abc:	4611      	mov	r1, r2
 8005abe:	f06f 0009 	mvn.w	r0, #9
 8005ac2:	f7fa fd5d 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4611      	mov	r1, r2
 8005aca:	f06f 0004 	mvn.w	r0, #4
 8005ace:	f7fa fd57 	bl	8000580 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	f06f 0003 	mvn.w	r0, #3
 8005ada:	f7fa fd51 	bl	8000580 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	210f      	movs	r1, #15
 8005ae2:	f06f 0001 	mvn.w	r0, #1
 8005ae6:	f7fa fd4b 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005aea:	2200      	movs	r2, #0
 8005aec:	210f      	movs	r1, #15
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	f7fa fd45 	bl	8000580 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8005af6:	2105      	movs	r1, #5
 8005af8:	4608      	mov	r0, r1
 8005afa:	2200      	movs	r2, #0
 8005afc:	f7fa fd40 	bl	8000580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005b00:	2005      	movs	r0, #5
 8005b02:	f7fa fd71 	bl	80005e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b06:	b003      	add	sp, #12
 8005b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b0c:	40021000 	.word	0x40021000

08005b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b10:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005b12:	4601      	mov	r1, r0
{
 8005b14:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005b16:	2200      	movs	r2, #0
 8005b18:	201c      	movs	r0, #28
 8005b1a:	f7fa fd31 	bl	8000580 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8005b1e:	201c      	movs	r0, #28
 8005b20:	f7fa fd62 	bl	80005e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b24:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005b26:	4c15      	ldr	r4, [pc, #84]	; (8005b7c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b38:	a901      	add	r1, sp, #4
 8005b3a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b3c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b3e:	f7fc fae9 	bl	8002114 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fc fac7 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8005b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b4a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8005b4c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005b50:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_InitTick+0x70>)
 8005b54:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b58:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8005b5a:	2300      	movs	r3, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 8005b5c:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005b5e:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8005b60:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b62:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005b64:	f7fd fa5e 	bl	8003024 <HAL_TIM_Base_Init>
 8005b68:	b920      	cbnz	r0, 8005b74 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fd f942 	bl	8002df4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005b70:	b008      	add	sp, #32
 8005b72:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8005b74:	2001      	movs	r0, #1
 8005b76:	e7fb      	b.n	8005b70 <HAL_InitTick+0x60>
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	20001204 	.word	0x20001204
 8005b80:	000f4240 	.word	0x000f4240

08005b84 <NMI_Handler>:
 8005b84:	4770      	bx	lr

08005b86 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005b86:	e7fe      	b.n	8005b86 <HardFault_Handler>

08005b88 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005b88:	e7fe      	b.n	8005b88 <MemManage_Handler>

08005b8a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005b8a:	e7fe      	b.n	8005b8a <BusFault_Handler>

08005b8c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005b8c:	e7fe      	b.n	8005b8c <UsageFault_Handler>

08005b8e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8005b8e:	f7fe be95 	b.w	80048bc <osSystickHandler>
	...

08005b94 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <RTC_WKUP_IRQHandler+0x8>)
 8005b96:	f7fd b8b9 	b.w	8002d0c <HAL_RTCEx_WakeUpTimerIRQHandler>
 8005b9a:	bf00      	nop
 8005b9c:	20001118 	.word	0x20001118

08005ba0 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8005ba0:	4770      	bx	lr
	...

08005ba4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <TIM2_IRQHandler+0x8>)
 8005ba6:	f7fd b935 	b.w	8002e14 <HAL_TIM_IRQHandler>
 8005baa:	bf00      	nop
 8005bac:	20001204 	.word	0x20001204

08005bb0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <I2C1_EV_IRQHandler+0x8>)
 8005bb2:	f7fa bed9 	b.w	8000968 <HAL_I2C_EV_IRQHandler>
 8005bb6:	bf00      	nop
 8005bb8:	200010cc 	.word	0x200010cc

08005bbc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <I2C1_ER_IRQHandler+0x8>)
 8005bbe:	f7fb b903 	b.w	8000dc8 <HAL_I2C_ER_IRQHandler>
 8005bc2:	bf00      	nop
 8005bc4:	200010cc 	.word	0x200010cc

08005bc8 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <RTC_Alarm_IRQHandler+0x8>)
 8005bca:	f7fc bdbf 	b.w	800274c <HAL_RTC_AlarmIRQHandler>
 8005bce:	bf00      	nop
 8005bd0:	20001118 	.word	0x20001118

08005bd4 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <TIM5_IRQHandler+0x8>)
 8005bd6:	f7fd b91d 	b.w	8002e14 <HAL_TIM_IRQHandler>
 8005bda:	bf00      	nop
 8005bdc:	20001244 	.word	0x20001244

08005be0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <OTG_FS_IRQHandler+0x8>)
 8005be2:	f7fb ba21 	b.w	8001028 <HAL_PCD_IRQHandler>
 8005be6:	bf00      	nop
 8005be8:	20002598 	.word	0x20002598

08005bec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bec:	490f      	ldr	r1, [pc, #60]	; (8005c2c <SystemInit+0x40>)
 8005bee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005bf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <SystemInit+0x44>)
 8005bfc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005bfe:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005c06:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8005c0e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005c12:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c20:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c22:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c28:	608b      	str	r3, [r1, #8]
 8005c2a:	4770      	bx	lr
 8005c2c:	e000ed00 	.word	0xe000ed00
 8005c30:	40021000 	.word	0x40021000

08005c34 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c34:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
 8005c36:	4822      	ldr	r0, [pc, #136]	; (8005cc0 <MX_TIM5_Init+0x8c>)
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <MX_TIM5_Init+0x90>)
 8005c3a:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 8005c3c:	2300      	movs	r3, #0
{
 8005c3e:	b08c      	sub	sp, #48	; 0x30
  htim5.Init.Prescaler = 0;
 8005c40:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c42:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 8005c44:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c46:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c4c:	f7fd f9ea 	bl	8003024 <HAL_TIM_Base_Init>
 8005c50:	b118      	cbz	r0, 8005c5a <MX_TIM5_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c52:	214c      	movs	r1, #76	; 0x4c
 8005c54:	481c      	ldr	r0, [pc, #112]	; (8005cc8 <MX_TIM5_Init+0x94>)
 8005c56:	f7ff fdba 	bl	80057ce <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c5a:	a90c      	add	r1, sp, #48	; 0x30
 8005c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c60:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c64:	4816      	ldr	r0, [pc, #88]	; (8005cc0 <MX_TIM5_Init+0x8c>)
 8005c66:	f7fd fad9 	bl	800321c <HAL_TIM_ConfigClockSource>
 8005c6a:	b118      	cbz	r0, 8005c74 <MX_TIM5_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c6c:	2152      	movs	r1, #82	; 0x52
 8005c6e:	4816      	ldr	r0, [pc, #88]	; (8005cc8 <MX_TIM5_Init+0x94>)
 8005c70:	f7ff fdad 	bl	80057ce <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8005c74:	4812      	ldr	r0, [pc, #72]	; (8005cc0 <MX_TIM5_Init+0x8c>)
 8005c76:	f7fd f9ef 	bl	8003058 <HAL_TIM_IC_Init>
 8005c7a:	b118      	cbz	r0, 8005c84 <MX_TIM5_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c7c:	2157      	movs	r1, #87	; 0x57
 8005c7e:	4812      	ldr	r0, [pc, #72]	; (8005cc8 <MX_TIM5_Init+0x94>)
 8005c80:	f7ff fda5 	bl	80057ce <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c84:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c86:	a901      	add	r1, sp, #4
 8005c88:	480d      	ldr	r0, [pc, #52]	; (8005cc0 <MX_TIM5_Init+0x8c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c8a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c8c:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c8e:	f7fd fb7b 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8005c92:	b118      	cbz	r0, 8005c9c <MX_TIM5_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c94:	215e      	movs	r1, #94	; 0x5e
 8005c96:	480c      	ldr	r0, [pc, #48]	; (8005cc8 <MX_TIM5_Init+0x94>)
 8005c98:	f7ff fd99 	bl	80057ce <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c9c:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	a908      	add	r1, sp, #32
 8005ca2:	4807      	ldr	r0, [pc, #28]	; (8005cc0 <MX_TIM5_Init+0x8c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ca4:	9408      	str	r4, [sp, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005ca6:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005ca8:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8005caa:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005cac:	f7fd fa24 	bl	80030f8 <HAL_TIM_IC_ConfigChannel>
 8005cb0:	b118      	cbz	r0, 8005cba <MX_TIM5_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005cb2:	2167      	movs	r1, #103	; 0x67
 8005cb4:	4804      	ldr	r0, [pc, #16]	; (8005cc8 <MX_TIM5_Init+0x94>)
 8005cb6:	f7ff fd8a 	bl	80057ce <_Error_Handler>
  }

}
 8005cba:	b00c      	add	sp, #48	; 0x30
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20001244 	.word	0x20001244
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	08006470 	.word	0x08006470

08005ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ccc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM5)
 8005cce:	6802      	ldr	r2, [r0, #0]
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_TIM_Base_MspInit+0x50>)
 8005cd2:	429a      	cmp	r2, r3
{
 8005cd4:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM5)
 8005cd6:	d11f      	bne.n	8005d18 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cd8:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    PF7     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cdc:	2400      	movs	r4, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8005ce0:	480f      	ldr	r0, [pc, #60]	; (8005d20 <HAL_TIM_Base_MspInit+0x54>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cea:	9404      	str	r4, [sp, #16]
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8005cf4:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cf6:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8005cf8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8005cfa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d00:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005d02:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8005d04:	f7fa fcc2 	bl	800068c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005d08:	2032      	movs	r0, #50	; 0x32
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	2105      	movs	r1, #5
 8005d0e:	f7fa fc37 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005d12:	2032      	movs	r0, #50	; 0x32
 8005d14:	f7fa fc68 	bl	80005e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005d18:	b006      	add	sp, #24
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	48001400 	.word	0x48001400

08005d24 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart5;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005d24:	b508      	push	{r3, lr}

  hlpuart1.Instance = LPUART1;
 8005d26:	480c      	ldr	r0, [pc, #48]	; (8005d58 <MX_LPUART1_UART_Init+0x34>)
  hlpuart1.Init.BaudRate = 209700;
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005d28:	4a0c      	ldr	r2, [pc, #48]	; (8005d5c <MX_LPUART1_UART_Init+0x38>)
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <MX_LPUART1_UART_Init+0x3c>)
 8005d2c:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8005d30:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005d34:	2300      	movs	r3, #0
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005d36:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005d38:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005d3a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005d3c:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d3e:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d40:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d42:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005d44:	f7fd fd97 	bl	8003876 <HAL_UART_Init>
 8005d48:	b128      	cbz	r0, 8005d56 <MX_LPUART1_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d4a:	214e      	movs	r1, #78	; 0x4e
 8005d4c:	4805      	ldr	r0, [pc, #20]	; (8005d64 <MX_LPUART1_UART_Init+0x40>)
  }

}
 8005d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005d52:	f7ff bd3c 	b.w	80057ce <_Error_Handler>
 8005d56:	bd08      	pop	{r3, pc}
 8005d58:	20001284 	.word	0x20001284
 8005d5c:	40008000 	.word	0x40008000
 8005d60:	00033324 	.word	0x00033324
 8005d64:	0800647d 	.word	0x0800647d

08005d68 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005d68:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8005d6a:	480e      	ldr	r0, [pc, #56]	; (8005da4 <MX_UART5_Init+0x3c>)
  huart5.Init.BaudRate = 19200;
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <MX_UART5_Init+0x40>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005d6e:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 19200;
 8005d70:	f44f 4e96 	mov.w	lr, #19200	; 0x4b00
 8005d74:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005d78:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005d7a:	2300      	movs	r3, #0
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005d7c:	f44f 7240 	mov.w	r2, #768	; 0x300
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005d80:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005d82:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005d84:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005d86:	6182      	str	r2, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d88:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d8a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d8c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005d8e:	f7fd fd72 	bl	8003876 <HAL_UART_Init>
 8005d92:	b128      	cbz	r0, 8005da0 <MX_UART5_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d94:	2162      	movs	r1, #98	; 0x62
 8005d96:	4805      	ldr	r0, [pc, #20]	; (8005dac <MX_UART5_Init+0x44>)
  }

}
 8005d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005d9c:	f7ff bd17 	b.w	80057ce <_Error_Handler>
 8005da0:	bd08      	pop	{r3, pc}
 8005da2:	bf00      	nop
 8005da4:	200012fc 	.word	0x200012fc
 8005da8:	40005000 	.word	0x40005000
 8005dac:	0800647d 	.word	0x0800647d

08005db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005db0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==LPUART1)
 8005db2:	6803      	ldr	r3, [r0, #0]
 8005db4:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <HAL_UART_MspInit+0xa0>)
 8005db6:	4293      	cmp	r3, r2
{
 8005db8:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==LPUART1)
 8005dba:	d11a      	bne.n	8005df2 <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005dbe:	4826      	ldr	r0, [pc, #152]	; (8005e58 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005dd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005dd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005de0:	2303      	movs	r3, #3
 8005de2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005de4:	2308      	movs	r3, #8
 8005de6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005de8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SIM7000_RTS_Pin|SIM7000_CTS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dea:	f7fa fc4f 	bl	800068c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8005dee:	b009      	add	sp, #36	; 0x24
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==UART5)
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_UART_MspInit+0xac>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d1fa      	bne.n	8005dee <HAL_UART_MspInit+0x3e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(SIM7000_TX_GPIO_Port, &GPIO_InitStruct);
 8005dfa:	4819      	ldr	r0, [pc, #100]	; (8005e60 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e02:	659a      	str	r2, [r3, #88]	; 0x58
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e0c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e10:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e12:	2408      	movs	r4, #8
    __HAL_RCC_UART5_CLK_ENABLE();
 8005e14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e16:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = SIM7000_TX_Pin;
 8005e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(SIM7000_TX_GPIO_Port, &GPIO_InitStruct);
 8005e1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SIM7000_TX_Pin;
 8005e1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e22:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e24:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SIM7000_TX_GPIO_Port, &GPIO_InitStruct);
 8005e26:	f7fa fc31 	bl	800068c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM7000_RX_Pin;
 8005e2a:	2304      	movs	r3, #4
    HAL_GPIO_Init(SIM7000_RX_GPIO_Port, &GPIO_InitStruct);
 8005e2c:	a903      	add	r1, sp, #12
 8005e2e:	480d      	ldr	r0, [pc, #52]	; (8005e64 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Pin = SIM7000_RX_Pin;
 8005e30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e32:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e36:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e38:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SIM7000_RX_GPIO_Port, &GPIO_InitStruct);
 8005e3a:	f7fa fc27 	bl	800068c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM7000_RTS_Pin|SIM7000_CTS_Pin;
 8005e3e:	2330      	movs	r3, #48	; 0x30
 8005e40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e42:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e46:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e48:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e4a:	a903      	add	r1, sp, #12
 8005e4c:	4806      	ldr	r0, [pc, #24]	; (8005e68 <HAL_UART_MspInit+0xb8>)
 8005e4e:	e7cc      	b.n	8005dea <HAL_UART_MspInit+0x3a>
 8005e50:	40008000 	.word	0x40008000
 8005e54:	40021000 	.word	0x40021000
 8005e58:	48001800 	.word	0x48001800
 8005e5c:	40005000 	.word	0x40005000
 8005e60:	48000800 	.word	0x48000800
 8005e64:	48000c00 	.word	0x48000c00
 8005e68:	48000400 	.word	0x48000400

08005e6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005e6e:	2200      	movs	r2, #0
 8005e70:	490a      	ldr	r1, [pc, #40]	; (8005e9c <MX_USB_DEVICE_Init+0x30>)
 8005e72:	480b      	ldr	r0, [pc, #44]	; (8005ea0 <MX_USB_DEVICE_Init+0x34>)
 8005e74:	f7fe f9d3 	bl	800421e <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005e78:	490a      	ldr	r1, [pc, #40]	; (8005ea4 <MX_USB_DEVICE_Init+0x38>)
 8005e7a:	4809      	ldr	r0, [pc, #36]	; (8005ea0 <MX_USB_DEVICE_Init+0x34>)
 8005e7c:	f7fe f9e4 	bl	8004248 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005e80:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <MX_USB_DEVICE_Init+0x3c>)
 8005e82:	4807      	ldr	r0, [pc, #28]	; (8005ea0 <MX_USB_DEVICE_Init+0x34>)
 8005e84:	f7fe f9a3 	bl	80041ce <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8005e88:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <MX_USB_DEVICE_Init+0x34>)
 8005e8a:	f000 f9e2 	bl	8006252 <USBD_LL_BatteryCharging>
 8005e8e:	b120      	cbz	r0, 8005e9a <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8005e90:	4803      	ldr	r0, [pc, #12]	; (8005ea0 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8005e96:	f7fe b9de 	b.w	8004256 <USBD_Start>
 8005e9a:	bd08      	pop	{r3, pc}
 8005e9c:	2000012c 	.word	0x2000012c
 8005ea0:	20001374 	.word	0x20001374
 8005ea4:	20000000 	.word	0x20000000
 8005ea8:	2000011c 	.word	0x2000011c

08005eac <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005eac:	2000      	movs	r0, #0
 8005eae:	4770      	bx	lr

08005eb0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4770      	bx	lr

08005eb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005eb6:	4c05      	ldr	r4, [pc, #20]	; (8005ecc <CDC_Receive_FS+0x18>)
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7fe f996 	bl	80041ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7fe f999 	bl	80041f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	bf00      	nop
 8005ecc:	20001374 	.word	0x20001374

08005ed0 <CDC_Init_FS>:
{
 8005ed0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ed2:	4c06      	ldr	r4, [pc, #24]	; (8005eec <CDC_Init_FS+0x1c>)
 8005ed4:	4906      	ldr	r1, [pc, #24]	; (8005ef0 <CDC_Init_FS+0x20>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7fe f97f 	bl	80041dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ede:	4905      	ldr	r1, [pc, #20]	; (8005ef4 <CDC_Init_FS+0x24>)
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7fe f983 	bl	80041ec <USBD_CDC_SetRxBuffer>
}
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	20001374 	.word	0x20001374
 8005ef0:	20001d98 	.word	0x20001d98
 8005ef4:	20001598 	.word	0x20001598

08005ef8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005ef8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8005efa:	6803      	ldr	r3, [r0, #0]
 8005efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005f00:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f02:	d140      	bne.n	8005f86 <HAL_PCD_MspInit+0x8e>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005f04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005f08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f0e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f10:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f14:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f16:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f20:	f7fa fbb4 	bl	800068c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f24:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f26:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f28:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005f2c:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005f30:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005f34:	a903      	add	r1, sp, #12
 8005f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005f3a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005f3c:	f7fa fba6 	bl	800068c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f46:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005f48:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	d418      	bmi.n	8005f8a <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f66:	9302      	str	r3, [sp, #8]
 8005f68:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8005f6a:	f7fb fcdd 	bl	8001928 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f74:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005f76:	2043      	movs	r0, #67	; 0x43
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2105      	movs	r1, #5
 8005f7c:	f7fa fb00 	bl	8000580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005f80:	2043      	movs	r0, #67	; 0x43
 8005f82:	f7fa fb31 	bl	80005e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005f86:	b008      	add	sp, #32
 8005f88:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8005f8a:	f7fb fccd 	bl	8001928 <HAL_PWREx_EnableVddUSB>
 8005f8e:	e7f2      	b.n	8005f76 <HAL_PCD_MspInit+0x7e>

08005f90 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f90:	f500 7162 	add.w	r1, r0, #904	; 0x388
 8005f94:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005f98:	f7fe b974 	b.w	8004284 <USBD_LL_SetupStage>

08005f9c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f9c:	231c      	movs	r3, #28
 8005f9e:	fb03 0301 	mla	r3, r3, r1, r0
 8005fa2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005fa6:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8005faa:	f7fe b998 	b.w	80042de <USBD_LL_DataOutStage>

08005fae <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fae:	231c      	movs	r3, #28
 8005fb0:	fb03 0301 	mla	r3, r3, r1, r0
 8005fb4:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fba:	f7fe b9c2 	b.w	8004342 <USBD_LL_DataInStage>

08005fbe <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005fbe:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005fc2:	f7fe ba3e 	b.w	8004442 <USBD_LL_SOF>

08005fc6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005fca:	2101      	movs	r1, #1
 8005fcc:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005fd0:	f7fe fa25 	bl	800441e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fd4:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
}
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fdc:	f7fe ba00 	b.w	80043e0 <USBD_LL_Reset>

08005fe0 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fe0:	6802      	ldr	r2, [r0, #0]
 8005fe2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8005fe6:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
{
 8005fec:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005ff2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005ff6:	f7fe fa15 	bl	8004424 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005ffa:	6a23      	ldr	r3, [r4, #32]
 8005ffc:	b123      	cbz	r3, 8006008 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ffe:	4a03      	ldr	r2, [pc, #12]	; (800600c <HAL_PCD_SuspendCallback+0x2c>)
 8006000:	6913      	ldr	r3, [r2, #16]
 8006002:	f043 0306 	orr.w	r3, r3, #6
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop
 800600c:	e000ed00 	.word	0xe000ed00

08006010 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006010:	6802      	ldr	r2, [r0, #0]
 8006012:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006016:	f023 0301 	bic.w	r3, r3, #1
{
 800601a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800601c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006020:	6a03      	ldr	r3, [r0, #32]
{
 8006022:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8006024:	b133      	cbz	r3, 8006034 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006026:	4a06      	ldr	r2, [pc, #24]	; (8006040 <HAL_PCD_ResumeCallback+0x30>)
 8006028:	6913      	ldr	r3, [r2, #16]
 800602a:	f023 0306 	bic.w	r3, r3, #6
 800602e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8006030:	f7ff fb50 	bl	80056d4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006034:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
}
 8006038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800603c:	f7fe b9fb 	b.w	8004436 <USBD_LL_Resume>
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006044:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8006048:	f7fe ba09 	b.w	800445e <USBD_LL_IsoOUTIncomplete>

0800604c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800604c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8006050:	f7fe ba03 	b.w	800445a <USBD_LL_IsoINIncomplete>

08006054 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006054:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8006058:	f7fe ba03 	b.w	8004462 <USBD_LL_DevConnected>

0800605c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800605c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8006060:	f7fe ba01 	b.w	8004466 <USBD_LL_DevDisconnected>

08006064 <USBD_LL_Init>:
{
 8006064:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8006066:	7801      	ldrb	r1, [r0, #0]
 8006068:	bb51      	cbnz	r1, 80060c0 <USBD_LL_Init+0x5c>
  hpcd_USB_OTG_FS.pData = pdev;
 800606a:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800606c:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800606e:	f8c3 03c8 	str.w	r0, [r3, #968]	; 0x3c8
  pdev->pData = &hpcd_USB_OTG_FS;
 8006072:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006076:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800607a:	e883 0005 	stmia.w	r3, {r0, r2}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800607e:	2201      	movs	r2, #1
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006080:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006082:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006084:	6159      	str	r1, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006086:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006088:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800608a:	6219      	str	r1, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800608c:	6259      	str	r1, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006090:	6319      	str	r1, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006094:	f7fa ff2d 	bl	8000ef2 <HAL_PCD_Init>
 8006098:	b120      	cbz	r0, 80060a4 <USBD_LL_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 800609a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800609e:	480a      	ldr	r0, [pc, #40]	; (80060c8 <USBD_LL_Init+0x64>)
 80060a0:	f7ff fb95 	bl	80057ce <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	4807      	ldr	r0, [pc, #28]	; (80060c4 <USBD_LL_Init+0x60>)
 80060a8:	f7fb fbe1 	bl	800186e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	2100      	movs	r1, #0
 80060b0:	4804      	ldr	r0, [pc, #16]	; (80060c4 <USBD_LL_Init+0x60>)
 80060b2:	f7fb fbbb 	bl	800182c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80060b6:	2280      	movs	r2, #128	; 0x80
 80060b8:	2101      	movs	r1, #1
 80060ba:	4802      	ldr	r0, [pc, #8]	; (80060c4 <USBD_LL_Init+0x60>)
 80060bc:	f7fb fbb6 	bl	800182c <HAL_PCDEx_SetTxFiFo>
}
 80060c0:	2000      	movs	r0, #0
 80060c2:	bd08      	pop	{r3, pc}
 80060c4:	20002598 	.word	0x20002598
 80060c8:	08006490 	.word	0x08006490

080060cc <USBD_LL_Start>:
{
 80060cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80060ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80060d2:	f7fa ff93 	bl	8000ffc <HAL_PCD_Start>
 80060d6:	2803      	cmp	r0, #3
 80060d8:	bf9a      	itte	ls
 80060da:	4b02      	ldrls	r3, [pc, #8]	; (80060e4 <USBD_LL_Start+0x18>)
 80060dc:	5c18      	ldrbls	r0, [r3, r0]
 80060de:	2002      	movhi	r0, #2
}
 80060e0:	bd08      	pop	{r3, pc}
 80060e2:	bf00      	nop
 80060e4:	0800648c 	.word	0x0800648c

080060e8 <USBD_LL_OpenEP>:
{
 80060e8:	b510      	push	{r4, lr}
 80060ea:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80060ec:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80060f0:	4613      	mov	r3, r2
 80060f2:	4622      	mov	r2, r4
 80060f4:	f7fb fabc 	bl	8001670 <HAL_PCD_EP_Open>
 80060f8:	2803      	cmp	r0, #3
 80060fa:	bf9a      	itte	ls
 80060fc:	4b01      	ldrls	r3, [pc, #4]	; (8006104 <USBD_LL_OpenEP+0x1c>)
 80060fe:	5c18      	ldrbls	r0, [r3, r0]
 8006100:	2002      	movhi	r0, #2
}
 8006102:	bd10      	pop	{r4, pc}
 8006104:	0800648c 	.word	0x0800648c

08006108 <USBD_LL_CloseEP>:
{
 8006108:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800610a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800610e:	f7fb fad4 	bl	80016ba <HAL_PCD_EP_Close>
 8006112:	2803      	cmp	r0, #3
 8006114:	bf9a      	itte	ls
 8006116:	4b02      	ldrls	r3, [pc, #8]	; (8006120 <USBD_LL_CloseEP+0x18>)
 8006118:	5c18      	ldrbls	r0, [r3, r0]
 800611a:	2002      	movhi	r0, #2
}
 800611c:	bd08      	pop	{r3, pc}
 800611e:	bf00      	nop
 8006120:	0800648c 	.word	0x0800648c

08006124 <USBD_LL_StallEP>:
{
 8006124:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006126:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800612a:	f7fb fb2e 	bl	800178a <HAL_PCD_EP_SetStall>
 800612e:	2803      	cmp	r0, #3
 8006130:	bf9a      	itte	ls
 8006132:	4b02      	ldrls	r3, [pc, #8]	; (800613c <USBD_LL_StallEP+0x18>)
 8006134:	5c18      	ldrbls	r0, [r3, r0]
 8006136:	2002      	movhi	r0, #2
}
 8006138:	bd08      	pop	{r3, pc}
 800613a:	bf00      	nop
 800613c:	0800648c 	.word	0x0800648c

08006140 <USBD_LL_ClearStallEP>:
{
 8006140:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006142:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006146:	f7fb fb4c 	bl	80017e2 <HAL_PCD_EP_ClrStall>
 800614a:	2803      	cmp	r0, #3
 800614c:	bf9a      	itte	ls
 800614e:	4b02      	ldrls	r3, [pc, #8]	; (8006158 <USBD_LL_ClearStallEP+0x18>)
 8006150:	5c18      	ldrbls	r0, [r3, r0]
 8006152:	2002      	movhi	r0, #2
}
 8006154:	bd08      	pop	{r3, pc}
 8006156:	bf00      	nop
 8006158:	0800648c 	.word	0x0800648c

0800615c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800615c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006160:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8006164:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006168:	bf1b      	ittet	ne
 800616a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800616e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006172:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006176:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800617a:	bf08      	it	eq
 800617c:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
}
 8006180:	4770      	bx	lr
	...

08006184 <USBD_LL_SetUSBAddress>:
{
 8006184:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006186:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800618a:	f7fb fa5d 	bl	8001648 <HAL_PCD_SetAddress>
 800618e:	2803      	cmp	r0, #3
 8006190:	bf9a      	itte	ls
 8006192:	4b02      	ldrls	r3, [pc, #8]	; (800619c <USBD_LL_SetUSBAddress+0x18>)
 8006194:	5c18      	ldrbls	r0, [r3, r0]
 8006196:	2002      	movhi	r0, #2
}
 8006198:	bd08      	pop	{r3, pc}
 800619a:	bf00      	nop
 800619c:	0800648c 	.word	0x0800648c

080061a0 <USBD_LL_Transmit>:
{
 80061a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80061a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80061a6:	f7fb fad3 	bl	8001750 <HAL_PCD_EP_Transmit>
 80061aa:	2803      	cmp	r0, #3
 80061ac:	bf9a      	itte	ls
 80061ae:	4b02      	ldrls	r3, [pc, #8]	; (80061b8 <USBD_LL_Transmit+0x18>)
 80061b0:	5c18      	ldrbls	r0, [r3, r0]
 80061b2:	2002      	movhi	r0, #2
}
 80061b4:	bd08      	pop	{r3, pc}
 80061b6:	bf00      	nop
 80061b8:	0800648c 	.word	0x0800648c

080061bc <USBD_LL_PrepareReceive>:
{
 80061bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80061c2:	f7fb fa9d 	bl	8001700 <HAL_PCD_EP_Receive>
 80061c6:	2803      	cmp	r0, #3
 80061c8:	bf9a      	itte	ls
 80061ca:	4b02      	ldrls	r3, [pc, #8]	; (80061d4 <USBD_LL_PrepareReceive+0x18>)
 80061cc:	5c18      	ldrbls	r0, [r3, r0]
 80061ce:	2002      	movhi	r0, #2
}
 80061d0:	bd08      	pop	{r3, pc}
 80061d2:	bf00      	nop
 80061d4:	0800648c 	.word	0x0800648c

080061d8 <USBD_LL_GetRxDataSize>:
{
 80061d8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80061da:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80061de:	f7fb faaf 	bl	8001740 <HAL_PCD_EP_GetRxCount>
}
 80061e2:	bd08      	pop	{r3, pc}

080061e4 <HAL_PCDEx_LPM_Callback>:
{
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4604      	mov	r4, r0
  switch (msg)
 80061e8:	b111      	cbz	r1, 80061f0 <HAL_PCDEx_LPM_Callback+0xc>
 80061ea:	2901      	cmp	r1, #1
 80061ec:	d016      	beq.n	800621c <HAL_PCDEx_LPM_Callback+0x38>
 80061ee:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80061f0:	6a03      	ldr	r3, [r0, #32]
 80061f2:	b133      	cbz	r3, 8006202 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 80061f4:	f7ff fa6e 	bl	80056d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <HAL_PCDEx_LPM_Callback+0x60>)
 80061fa:	6913      	ldr	r3, [r2, #16]
 80061fc:	f023 0306 	bic.w	r3, r3, #6
 8006200:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006202:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8006204:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006208:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8006218:	f7fe b90d 	b.w	8004436 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800621c:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800621e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006222:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800622e:	f7fe f8f9 	bl	8004424 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006232:	6a23      	ldr	r3, [r4, #32]
 8006234:	b123      	cbz	r3, 8006240 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006236:	4a03      	ldr	r2, [pc, #12]	; (8006244 <HAL_PCDEx_LPM_Callback+0x60>)
 8006238:	6913      	ldr	r3, [r2, #16]
 800623a:	f043 0306 	orr.w	r3, r3, #6
 800623e:	6113      	str	r3, [r2, #16]
 8006240:	bd10      	pop	{r4, pc}
 8006242:	bf00      	nop
 8006244:	e000ed00 	.word	0xe000ed00

08006248 <USBD_static_malloc>:
}
 8006248:	4800      	ldr	r0, [pc, #0]	; (800624c <USBD_static_malloc+0x4>)
 800624a:	4770      	bx	lr
 800624c:	20000ea4 	.word	0x20000ea4

08006250 <USBD_static_free>:
{
 8006250:	4770      	bx	lr

08006252 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8006252:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800625a:	bf14      	ite	ne
 800625c:	2002      	movne	r0, #2
 800625e:	2000      	moveq	r0, #0
 8006260:	4770      	bx	lr
	...

08006264 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006264:	2312      	movs	r3, #18
 8006266:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006268:	4800      	ldr	r0, [pc, #0]	; (800626c <USBD_FS_DeviceDescriptor+0x8>)
 800626a:	4770      	bx	lr
 800626c:	20000158 	.word	0x20000158

08006270 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8006270:	2304      	movs	r3, #4
 8006272:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006274:	4800      	ldr	r0, [pc, #0]	; (8006278 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006276:	4770      	bx	lr
 8006278:	2000016c 	.word	0x2000016c

0800627c <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 800627c:	230c      	movs	r3, #12
 800627e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006280:	4800      	ldr	r0, [pc, #0]	; (8006284 <USBD_FS_USR_BOSDescriptor+0x8>)
 8006282:	4770      	bx	lr
 8006284:	2000014c 	.word	0x2000014c

08006288 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006288:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800628a:	4c04      	ldr	r4, [pc, #16]	; (800629c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800628c:	4804      	ldr	r0, [pc, #16]	; (80062a0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800628e:	460a      	mov	r2, r1
 8006290:	4621      	mov	r1, r4
 8006292:	f7fe fa98 	bl	80047c6 <USBD_GetString>
}
 8006296:	4620      	mov	r0, r4
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop
 800629c:	20002964 	.word	0x20002964
 80062a0:	080064bc 	.word	0x080064bc

080062a4 <USBD_FS_ProductStrDescriptor>:
{
 80062a4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062a6:	4c04      	ldr	r4, [pc, #16]	; (80062b8 <USBD_FS_ProductStrDescriptor+0x14>)
 80062a8:	4804      	ldr	r0, [pc, #16]	; (80062bc <USBD_FS_ProductStrDescriptor+0x18>)
 80062aa:	460a      	mov	r2, r1
 80062ac:	4621      	mov	r1, r4
 80062ae:	f7fe fa8a 	bl	80047c6 <USBD_GetString>
}
 80062b2:	4620      	mov	r0, r4
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	bf00      	nop
 80062b8:	20002964 	.word	0x20002964
 80062bc:	080064cf 	.word	0x080064cf

080062c0 <USBD_FS_SerialStrDescriptor>:
{
 80062c0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80062c2:	4c04      	ldr	r4, [pc, #16]	; (80062d4 <USBD_FS_SerialStrDescriptor+0x14>)
 80062c4:	4804      	ldr	r0, [pc, #16]	; (80062d8 <USBD_FS_SerialStrDescriptor+0x18>)
 80062c6:	460a      	mov	r2, r1
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7fe fa7c 	bl	80047c6 <USBD_GetString>
}
 80062ce:	4620      	mov	r0, r4
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	bf00      	nop
 80062d4:	20002964 	.word	0x20002964
 80062d8:	080064e5 	.word	0x080064e5

080062dc <USBD_FS_ConfigStrDescriptor>:
{
 80062dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062de:	4c04      	ldr	r4, [pc, #16]	; (80062f0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80062e0:	4804      	ldr	r0, [pc, #16]	; (80062f4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80062e2:	460a      	mov	r2, r1
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7fe fa6e 	bl	80047c6 <USBD_GetString>
}
 80062ea:	4620      	mov	r0, r4
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	20002964 	.word	0x20002964
 80062f4:	080064a3 	.word	0x080064a3

080062f8 <USBD_FS_InterfaceStrDescriptor>:
{
 80062f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062fa:	4c04      	ldr	r4, [pc, #16]	; (800630c <USBD_FS_InterfaceStrDescriptor+0x14>)
 80062fc:	4804      	ldr	r0, [pc, #16]	; (8006310 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80062fe:	460a      	mov	r2, r1
 8006300:	4621      	mov	r1, r4
 8006302:	f7fe fa60 	bl	80047c6 <USBD_GetString>
}
 8006306:	4620      	mov	r0, r4
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	20002964 	.word	0x20002964
 8006310:	080064ae 	.word	0x080064ae

08006314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800634c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006318:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800631a:	e003      	b.n	8006324 <LoopCopyDataInit>

0800631c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800631e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006320:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006322:	3104      	adds	r1, #4

08006324 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006324:	480b      	ldr	r0, [pc, #44]	; (8006354 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006328:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800632a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800632c:	d3f6      	bcc.n	800631c <CopyDataInit>
	ldr	r2, =_sbss
 800632e:	4a0b      	ldr	r2, [pc, #44]	; (800635c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006330:	e002      	b.n	8006338 <LoopFillZerobss>

08006332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006332:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006334:	f842 3b04 	str.w	r3, [r2], #4

08006338 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <LoopForever+0x16>)
	cmp	r2, r3
 800633a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800633c:	d3f9      	bcc.n	8006332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800633e:	f7ff fc55 	bl	8005bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006342:	f000 f811 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006346:	f7ff fa21 	bl	800578c <main>

0800634a <LoopForever>:

LoopForever:
    b LoopForever
 800634a:	e7fe      	b.n	800634a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800634c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8006350:	08006504 	.word	0x08006504
	ldr	r0, =_sdata
 8006354:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006358:	20000170 	.word	0x20000170
	ldr	r2, =_sbss
 800635c:	20000170 	.word	0x20000170
	ldr	r3, = _ebss
 8006360:	20002b64 	.word	0x20002b64

08006364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006364:	e7fe      	b.n	8006364 <ADC1_2_IRQHandler>
	...

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4e0d      	ldr	r6, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1ba4      	subs	r4, r4, r6
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2500      	movs	r5, #0
 8006374:	42a5      	cmp	r5, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4e0b      	ldr	r6, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f000 f818 	bl	80063b0 <_init>
 8006380:	1ba4      	subs	r4, r4, r6
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2500      	movs	r5, #0
 8006386:	42a5      	cmp	r5, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006390:	4798      	blx	r3
 8006392:	3501      	adds	r5, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800639a:	4798      	blx	r3
 800639c:	3501      	adds	r5, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	080064fc 	.word	0x080064fc
 80063a4:	080064fc 	.word	0x080064fc
 80063a8:	080064fc 	.word	0x080064fc
 80063ac:	08006500 	.word	0x08006500

080063b0 <_init>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr

080063bc <_fini>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr
